
readADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008234  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008504  08008504  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800850c  0800850c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  24000010  08008524  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000634  08008524  00020634  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcda  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a3  00000000  00000000  0003bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3f  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ea3e  00000000  00000000  00040ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fa8  00000000  00000000  0007f905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019082f  00000000  00000000  000998ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f64  00000000  00000000  0022a0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0022f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080084b4 	.word	0x080084b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080084b4 	.word	0x080084b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <_ZN3ADCC1EP17ADC_HandleTypeDefP20__UART_HandleTypeDef>:

#include "ADC.h"



ADC::ADC(ADC_HandleTypeDef *_hadc1, UART_HandleTypeDef *_huart3) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	hadc = _hadc1;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	605a      	str	r2, [r3, #4]
	huart = _huart3;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
	HAL_ADC_Start(hadc);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f921 	bl	8001964 <HAL_ADC_Start>
}
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_ZN3ADC4readEv>:

void ADC::read(){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f9db 	bl	8001af8 <HAL_ADC_PollForConversion>
	data =  HAL_ADC_GetValue(hadc);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f001 faca 	bl	8001ce0 <HAL_ADC_GetValue>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	801a      	strh	r2, [r3, #0]
	msg[0] = (data/10000)+48;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4a3f      	ldr	r2, [pc, #252]	; (8000858 <_ZN3ADC4readEv+0x12c>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0b5b      	lsrs	r3, r3, #13
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3330      	adds	r3, #48	; 0x30
 8000766:	b2da      	uxtb	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	731a      	strb	r2, [r3, #12]
	data = data%10000;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	4a39      	ldr	r2, [pc, #228]	; (8000858 <_ZN3ADC4readEv+0x12c>)
 8000772:	fba2 1203 	umull	r1, r2, r2, r3
 8000776:	0b52      	lsrs	r2, r2, #13
 8000778:	f242 7110 	movw	r1, #10000	; 0x2710
 800077c:	fb01 f202 	mul.w	r2, r1, r2
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	b29a      	uxth	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	801a      	strh	r2, [r3, #0]
	msg[1] = (data/1000)+48;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4a33      	ldr	r2, [pc, #204]	; (800085c <_ZN3ADC4readEv+0x130>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	099b      	lsrs	r3, r3, #6
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	735a      	strb	r2, [r3, #13]
	data = data%1000;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	4a2d      	ldr	r2, [pc, #180]	; (800085c <_ZN3ADC4readEv+0x130>)
 80007a6:	fba2 1203 	umull	r1, r2, r2, r3
 80007aa:	0992      	lsrs	r2, r2, #6
 80007ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b0:	fb01 f202 	mul.w	r2, r1, r2
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	801a      	strh	r2, [r3, #0]
	msg[2] = (data/100)+48;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <_ZN3ADC4readEv+0x134>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	3330      	adds	r3, #48	; 0x30
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	739a      	strb	r2, [r3, #14]
	data = data%100;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <_ZN3ADC4readEv+0x134>)
 80007da:	fba2 1203 	umull	r1, r2, r2, r3
 80007de:	0952      	lsrs	r2, r2, #5
 80007e0:	2164      	movs	r1, #100	; 0x64
 80007e2:	fb01 f202 	mul.w	r2, r1, r2
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	801a      	strh	r2, [r3, #0]
	msg[3] = (data/10)+48;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <_ZN3ADC4readEv+0x138>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	3330      	adds	r3, #48	; 0x30
 8000800:	b2da      	uxtb	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	73da      	strb	r2, [r3, #15]
	data = data%10;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <_ZN3ADC4readEv+0x138>)
 800080c:	fba3 1302 	umull	r1, r3, r3, r2
 8000810:	08d9      	lsrs	r1, r3, #3
 8000812:	460b      	mov	r3, r1
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	801a      	strh	r2, [r3, #0]
	msg[4] = data+48;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	3330      	adds	r3, #48	; 0x30
 800082a:	b2da      	uxtb	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	741a      	strb	r2, [r3, #16]
	msg[5] = 10;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	220a      	movs	r2, #10
 8000834:	745a      	strb	r2, [r3, #17]
	msg[6] = 13;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	220d      	movs	r2, #13
 800083a:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(huart, msg, 7, HAL_MAX_DELAY);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 010c 	add.w	r1, r3, #12
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	2207      	movs	r2, #7
 800084c:	f006 f9e8 	bl	8006c20 <HAL_UART_Transmit>

}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	d1b71759 	.word	0xd1b71759
 800085c:	10624dd3 	.word	0x10624dd3
 8000860:	51eb851f 	.word	0x51eb851f
 8000864:	cccccccd 	.word	0xcccccccd

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000874:	bf00      	nop
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <main+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d006      	beq.n	8000890 <main+0x28>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	61fa      	str	r2, [r7, #28]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dd01      	ble.n	8000890 <main+0x28>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <main+0x2a>
 8000890:	2300      	movs	r3, #0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1ef      	bne.n	8000876 <main+0xe>
  if ( timeout < 0 )
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b00      	cmp	r3, #0
 800089a:	da01      	bge.n	80008a0 <main+0x38>
  {
  Error_Handler();
 800089c:	f000 fa3e 	bl	8000d1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fc1a 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f848 	bl	8000938 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <main+0xc4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <main+0xc4>)
 80008b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <main+0xc4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f002 fa96 	bl	8002df8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f002 faac 	bl	8002e2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d8:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008da:	bf00      	nop
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <main+0xc4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <main+0x8e>
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	61fa      	str	r2, [r7, #28]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dd01      	ble.n	80008f6 <main+0x8e>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <main+0x90>
 80008f6:	2300      	movs	r3, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1ef      	bne.n	80008dc <main+0x74>
if ( timeout < 0 )
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da01      	bge.n	8000906 <main+0x9e>
{
Error_Handler();
 8000902:	f000 fa0b 	bl	8000d1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 f9c1 	bl	8000c8c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800090a:	f000 f929 	bl	8000b60 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800090e:	f000 f987 	bl	8000c20 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_ADC1_Init();
 8000912:	f000 f89d 	bl	8000a50 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
 ADC adc1(&hadc1,&huart3);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <main+0xc8>)
 800091a:	4906      	ldr	r1, [pc, #24]	; (8000934 <main+0xcc>)
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff feef 	bl	8000700 <_ZN3ADCC1EP17ADC_HandleTypeDefP20__UART_HandleTypeDef>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	/* USER CODE END WHILE */
    adc1.read();
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff01 	bl	800072c <_ZN3ADC4readEv>
 800092a:	e7fa      	b.n	8000922 <main+0xba>
 800092c:	58024400 	.word	0x58024400
 8000930:	24000090 	.word	0x24000090
 8000934:	2400002c 	.word	0x2400002c

08000938 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fd88 	bl	800845c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f007 fd82 	bl	800845c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000958:	2004      	movs	r0, #4
 800095a:	f002 fbc3 	bl	80030e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <_Z18SystemClock_Configv+0x110>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	4a38      	ldr	r2, [pc, #224]	; (8000a48 <_Z18SystemClock_Configv+0x110>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <_Z18SystemClock_Configv+0x110>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <_Z18SystemClock_Configv+0x114>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000980:	4a32      	ldr	r2, [pc, #200]	; (8000a4c <_Z18SystemClock_Configv+0x114>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <_Z18SystemClock_Configv+0x114>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000994:	bf00      	nop
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <_Z18SystemClock_Configv+0x114>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a2:	bf14      	ite	ne
 80009a4:	2301      	movne	r3, #1
 80009a6:	2300      	moveq	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f3      	bne.n	8000996 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ae:	2301      	movs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80009c4:	2312      	movs	r3, #18
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009d4:	230c      	movs	r3, #12
 80009d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009d8:	2302      	movs	r3, #2
 80009da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80009dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fbe6 	bl	80031b8 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 80009fc:	f000 f98e 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	233f      	movs	r3, #63	; 0x3f
 8000a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 f820 	bl	8003a6c <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000a3c:	f000 f96e 	bl	8000d1c <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	; 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58000400 	.word	0x58000400
 8000a4c:	58024800 	.word	0x58024800

08000a50 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a74:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a76:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <_ZL12MX_ADC1_Initv+0x108>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a80:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000ad2:	f000 fda5 	bl	8001620 <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 8000ae6:	f000 f919 	bl	8000d1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000af6:	f001 fe0d 	bl	8002714 <HAL_ADCEx_MultiModeConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf14      	ite	ne
 8000b00:	2301      	movne	r3, #1
 8000b02:	2300      	moveq	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 8000b0a:	f000 f907 	bl	8000d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_ZL12MX_ADC1_Initv+0x10c>)
 8000b10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b12:	2306      	movs	r3, #6
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b20:	2304      	movs	r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <_ZL12MX_ADC1_Initv+0x104>)
 8000b32:	f001 f8e3 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf14      	ite	ne
 8000b3c:	2301      	movne	r3, #1
 8000b3e:	2300      	moveq	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <_ZL12MX_ADC1_Initv+0xfa>
  {
    Error_Handler();
 8000b46:	f000 f8e9 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2400002c 	.word	0x2400002c
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	0c900008 	.word	0x0c900008

08000b60 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b66:	4a2d      	ldr	r2, [pc, #180]	; (8000c1c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba8:	481b      	ldr	r0, [pc, #108]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000baa:	f005 ffe9 	bl	8006b80 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000bbe:	f000 f8ad 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bc6:	f007 f874 	bl	8007cb2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf14      	ite	ne
 8000bd0:	2301      	movne	r3, #1
 8000bd2:	2300      	moveq	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000bda:	f000 f89f 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000be2:	f007 f8a4 	bl	8007d2e <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	bf14      	ite	ne
 8000bec:	2301      	movne	r3, #1
 8000bee:	2300      	moveq	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000bf6:	f000 f891 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bfc:	f007 f820 	bl	8007c40 <HAL_UARTEx_DisableFifoMode>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000c10:	f000 f884 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000090 	.word	0x24000090
 8000c1c:	40004800 	.word	0x40004800

08000c20 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c2c:	2209      	movs	r2, #9
 8000c2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c68:	f002 f8f4 	bl	8002e54 <HAL_PCD_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000c7c:	f000 f84e 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000124 	.word	0x24000124
 8000c88:	40080000 	.word	0x40080000

08000c8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <_ZL12MX_GPIO_Initv+0x8c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	58024400 	.word	0x58024400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_MspInit+0x30>)
 8000d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x30>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x30>)
 8000d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58024400 	.word	0x58024400

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	; 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	; 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f007 fb6d 	bl	800845c <memset>
  if(hadc->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <HAL_ADC_MspInit+0xdc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d150      	bne.n	8000e2e <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dac:	23c0      	movs	r3, #192	; 0xc0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db0:	2320      	movs	r3, #32
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8000db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 f9dd 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000dd0:	f7ff ffa4 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_ADC_MspInit+0xe0>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_ADC_MspInit+0xe4>)
 8000e2a:	f001 fe35 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	37e8      	adds	r7, #232	; 0xe8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020000 	.word	0x58020000

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ba      	sub	sp, #232	; 0xe8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 faf9 	bl	800845c <memset>
  if(huart->Instance==USART3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d146      	bne.n	8000f02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e74:	f04f 0202 	mov.w	r2, #2
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f97a 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e96:	f7ff ff41 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_UART_MspInit+0xd0>)
 8000efe:	f001 fdcb 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	37e8      	adds	r7, #232	; 0xe8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004800 	.word	0x40004800
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020c00 	.word	0x58020c00

08000f18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ba      	sub	sp, #232	; 0xe8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	22c0      	movs	r2, #192	; 0xc0
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f007 fa8f 	bl	800845c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a38      	ldr	r2, [pc, #224]	; (8001024 <HAL_PCD_MspInit+0x10c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d169      	bne.n	800101c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8000f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 f8ff 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f8c:	f7ff fec6 	bl	8000d1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f90:	f002 f902 	bl	8003198 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fb2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fcc:	230a      	movs	r3, #10
 8000fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <HAL_PCD_MspInit+0x114>)
 8000fda:	f001 fd5d 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <HAL_PCD_MspInit+0x114>)
 8000ffa:	f001 fd4d 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8001006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800100a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_PCD_MspInit+0x110>)
 8001010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	37e8      	adds	r7, #232	; 0xe8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40080000 	.word	0x40080000
 8001028:	58024400 	.word	0x58024400
 800102c:	58020000 	.word	0x58020000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107c:	f000 f89e 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001088:	f7ff faa4 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f007 f9db 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fbd7 	bl	8000868 <main>
  bx  lr
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010c4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010c8:	08008514 	.word	0x08008514
  ldr r2, =_sbss
 80010cc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010d0:	24000634 	.word	0x24000634

080010d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC3_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010de:	2003      	movs	r0, #3
 80010e0:	f001 fca8 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010e4:	f002 fe78 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_Init+0x68>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	4913      	ldr	r1, [pc, #76]	; (8001144 <HAL_Init+0x6c>)
 80010f6:	5ccb      	ldrb	r3, [r1, r3]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_Init+0x68>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_Init+0x6c>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_Init+0x70>)
 800111a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <HAL_Init+0x74>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f814 	bl	8001150 <HAL_InitTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e002      	b.n	8001138 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001132:	f7ff fdf9 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58024400 	.word	0x58024400
 8001144:	080084cc 	.word	0x080084cc
 8001148:	24000004 	.word	0x24000004
 800114c:	24000000 	.word	0x24000000

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_InitTick+0x60>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e021      	b.n	80011a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_InitTick+0x64>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_InitTick+0x60>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fc7f 	bl	8002a7e <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f001 fc57 	bl	8002a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x68>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2400000c 	.word	0x2400000c
 80011b4:	24000000 	.word	0x24000000
 80011b8:	24000008 	.word	0x24000008

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2400000c 	.word	0x2400000c
 80011e0:	24000630 	.word	0x24000630

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	24000630 	.word	0x24000630

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2400000c 	.word	0x2400000c

08001244 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetREVID+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	5c001000 	.word	0x5c001000

0800125c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3360      	adds	r3, #96	; 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	431a      	orrs	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	611a      	str	r2, [r3, #16]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001336:	b480      	push	{r7}
 8001338:	b087      	sub	sp, #28
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3360      	adds	r3, #96	; 0x60
 8001346:	461a      	mov	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]
  }
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3330      	adds	r3, #48	; 0x30
 80013a2:	461a      	mov	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	4413      	add	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	211f      	movs	r1, #31
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0e9b      	lsrs	r3, r3, #26
 80013ca:	f003 011f 	and.w	r1, r3, #31
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b087      	sub	sp, #28
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3314      	adds	r3, #20
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0e5b      	lsrs	r3, r3, #25
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	0d1b      	lsrs	r3, r3, #20
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2107      	movs	r1, #7
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	0d1b      	lsrs	r3, r3, #20
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	431a      	orrs	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0318 	and.w	r3, r3, #24
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001464:	40d9      	lsrs	r1, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	400b      	ands	r3, r1
 800146a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	000fffff 	.word	0x000fffff

08001488 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 031f 	and.w	r3, r3, #31
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	5fffffc0 	.word	0x5fffffc0

080014e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f8:	d101      	bne.n	80014fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_ADC_EnableInternalRegulator+0x24>)
 800151a:	4013      	ands	r3, r2
 800151c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	6fffffc0 	.word	0x6fffffc0

08001534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001548:	d101      	bne.n	800154e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_ADC_Enable+0x24>)
 800156a:	4013      	ands	r3, r2
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	7fffffc0 	.word	0x7fffffc0

08001584 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <LL_ADC_IsEnabled+0x18>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <LL_ADC_IsEnabled+0x1a>
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_ADC_REG_StartConversion+0x24>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	7fffffc0 	.word	0x7fffffc0

080015d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d101      	bne.n	80015ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b08      	cmp	r3, #8
 800160c:	d101      	bne.n	8001612 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e18f      	b.n	800195a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fb87 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff3f 	bl	80014e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff25 	bl	80014c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff5a 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d114      	bne.n	80016b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff3e 	bl	800150c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001690:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <HAL_ADC_Init+0x290>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	4a87      	ldr	r2, [pc, #540]	; (80018b4 <HAL_ADC_Init+0x294>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016a2:	e002      	b.n	80016aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff3d 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	f043 0210 	orr.w	r2, r3, #16
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff77 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 80016e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 8129 	bne.w	8001948 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 8125 	bne.w	8001948 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001706:	f043 0202 	orr.w	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff36 	bl	8001584 <LL_ADC_IsEnabled>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d136      	bne.n	800178c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <HAL_ADC_Init+0x298>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d004      	beq.n	8001732 <HAL_ADC_Init+0x112>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <HAL_ADC_Init+0x29c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10e      	bne.n	8001750 <HAL_ADC_Init+0x130>
 8001732:	4861      	ldr	r0, [pc, #388]	; (80018b8 <HAL_ADC_Init+0x298>)
 8001734:	f7ff ff26 	bl	8001584 <LL_ADC_IsEnabled>
 8001738:	4604      	mov	r4, r0
 800173a:	4860      	ldr	r0, [pc, #384]	; (80018bc <HAL_ADC_Init+0x29c>)
 800173c:	f7ff ff22 	bl	8001584 <LL_ADC_IsEnabled>
 8001740:	4603      	mov	r3, r0
 8001742:	4323      	orrs	r3, r4
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e008      	b.n	8001762 <HAL_ADC_Init+0x142>
 8001750:	485b      	ldr	r0, [pc, #364]	; (80018c0 <HAL_ADC_Init+0x2a0>)
 8001752:	f7ff ff17 	bl	8001584 <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_ADC_Init+0x298>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_ADC_Init+0x15a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_ADC_Init+0x29c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x15e>
 800177a:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_ADC_Init+0x2a4>)
 800177c:	e000      	b.n	8001780 <HAL_ADC_Init+0x160>
 800177e:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_ADC_Init+0x2a8>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f7ff fd68 	bl	800125c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800178c:	f7ff fd5a 	bl	8001244 <HAL_GetREVID>
 8001790:	4603      	mov	r3, r0
 8001792:	f241 0203 	movw	r2, #4099	; 0x1003
 8001796:	4293      	cmp	r3, r2
 8001798:	d914      	bls.n	80017c4 <HAL_ADC_Init+0x1a4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d110      	bne.n	80017c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7d5b      	ldrb	r3, [r3, #21]
 80017a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7f1b      	ldrb	r3, [r3, #28]
 80017b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017bc:	f043 030c 	orr.w	r3, r3, #12
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	e00d      	b.n	80017e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d5b      	ldrb	r3, [r3, #21]
 80017c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7f1b      	ldrb	r3, [r3, #28]
 80017da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7f1b      	ldrb	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	045b      	lsls	r3, r3, #17
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_ADC_Init+0x2ac>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fed2 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001830:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fedf 	bl	80015fa <LL_ADC_INJ_IsConversionOngoing>
 800183c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d15f      	bne.n	8001904 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d15c      	bne.n	8001904 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7d1b      	ldrb	r3, [r3, #20]
 800184e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_ADC_Init+0x2b0>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	430b      	orrs	r3, r1
 800186a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001872:	2b01      	cmp	r3, #1
 8001874:	d130      	bne.n	80018d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_ADC_Init+0x2b4>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800188a:	3a01      	subs	r2, #1
 800188c:	0411      	lsls	r1, r2, #16
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800189e:	430a      	orrs	r2, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	e01c      	b.n	80018e8 <HAL_ADC_Init+0x2c8>
 80018ae:	bf00      	nop
 80018b0:	24000000 	.word	0x24000000
 80018b4:	053e2d63 	.word	0x053e2d63
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40022100 	.word	0x40022100
 80018c0:	58026000 	.word	0x58026000
 80018c4:	40022300 	.word	0x40022300
 80018c8:	58026300 	.word	0x58026300
 80018cc:	fff0c003 	.word	0xfff0c003
 80018d0:	ffffbffc 	.word	0xffffbffc
 80018d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fdd6 	bl	80024b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10c      	bne.n	8001926 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f023 010f 	bic.w	r1, r3, #15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	e007      	b.n	8001936 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 020f 	bic.w	r2, r2, #15
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
 8001946:	e007      	b.n	8001958 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f043 0210 	orr.w	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001958:	7ffb      	ldrb	r3, [r7, #31]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop

08001964 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_ADC_Start+0x180>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_ADC_Start+0x1c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5b      	ldr	r2, [pc, #364]	; (8001ae8 <HAL_ADC_Start+0x184>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_ADC_Start+0x20>
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <HAL_ADC_Start+0x188>)
 8001982:	e000      	b.n	8001986 <HAL_ADC_Start+0x22>
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_ADC_Start+0x18c>)
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd7e 	bl	8001488 <LL_ADC_GetMultimode>
 800198c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fe1e 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 809a 	bne.w	8001ad4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Start+0x4a>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e095      	b.n	8001ada <HAL_ADC_Start+0x176>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fcf0 	bl	800239c <ADC_Enable>
 80019bc:	4603      	mov	r3, r0
 80019be:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8081 	bne.w	8001aca <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_ADC_Start+0x190>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <HAL_ADC_Start+0x184>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d002      	beq.n	80019e8 <HAL_ADC_Start+0x84>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e000      	b.n	80019ea <HAL_ADC_Start+0x86>
 80019e8:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <HAL_ADC_Start+0x180>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d002      	beq.n	80019f8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a10:	d106      	bne.n	8001a20 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f023 0206 	bic.w	r2, r3, #6
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a1e:	e002      	b.n	8001a26 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	221c      	movs	r2, #28
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <HAL_ADC_Start+0x184>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_Start+0xe2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_Start+0xe4>
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_ADC_Start+0x180>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d008      	beq.n	8001a62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d002      	beq.n	8001a62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	d114      	bne.n	8001a8c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fd91 	bl	80015ac <LL_ADC_REG_StartConversion>
 8001a8a:	e025      	b.n	8001ad8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_ADC_Start+0x184>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d002      	beq.n	8001aa8 <HAL_ADC_Start+0x144>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_Start+0x146>
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_ADC_Start+0x180>)
 8001aaa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00f      	beq.n	8001ad8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac8:	e006      	b.n	8001ad8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40022100 	.word	0x40022100
 8001aec:	40022300 	.word	0x40022300
 8001af0:	58026300 	.word	0x58026300
 8001af4:	fffff0fe 	.word	0xfffff0fe

08001af8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_ADC_PollForConversion+0x1d8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x1e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a70      	ldr	r2, [pc, #448]	; (8001cd4 <HAL_ADC_PollForConversion+0x1dc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_PollForConversion+0x22>
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_ADC_PollForConversion+0x1e0>)
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_PollForConversion+0x24>
 8001b1a:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <HAL_ADC_PollForConversion+0x1e4>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fcb3 	bl	8001488 <LL_ADC_GetMultimode>
 8001b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d102      	bne.n	8001b32 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e037      	b.n	8001ba2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d002      	beq.n	8001b44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	d111      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	f043 0220 	orr.w	r2, r3, #32
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0b1      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b62:	2304      	movs	r3, #4
 8001b64:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b66:	e01c      	b.n	8001ba2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_ADC_PollForConversion+0x1d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_PollForConversion+0x84>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_ADC_PollForConversion+0x1dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x88>
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_ADC_PollForConversion+0x1e0>)
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_PollForConversion+0x8a>
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_ADC_PollForConversion+0x1e4>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fc8e 	bl	80014a4 <LL_ADC_GetMultiDMATransfer>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f043 0220 	orr.w	r2, r3, #32
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e093      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ba2:	f7ff fb1f 	bl	80011e4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ba8:	e021      	b.n	8001bee <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d01d      	beq.n	8001bee <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bb2:	f7ff fb17 	bl	80011e4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d302      	bcc.n	8001bc8 <HAL_ADC_PollForConversion+0xd0>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d112      	bne.n	8001bee <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f043 0204 	orr.w	r2, r3, #4
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e06b      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0d6      	beq.n	8001baa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fbad 	bl	800136c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01c      	beq.n	8001c52 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7d5b      	ldrb	r3, [r3, #21]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d118      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d111      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_ADC_PollForConversion+0x1dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d002      	beq.n	8001c62 <HAL_ADC_PollForConversion+0x16a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_PollForConversion+0x16c>
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_ADC_PollForConversion+0x1d8>)
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d008      	beq.n	8001c7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	d104      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	e00c      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_ADC_PollForConversion+0x1dc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d002      	beq.n	8001c98 <HAL_ADC_PollForConversion+0x1a0>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e000      	b.n	8001c9a <HAL_ADC_PollForConversion+0x1a2>
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_ADC_PollForConversion+0x1d8>)
 8001c9a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d104      	bne.n	8001cb2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2208      	movs	r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e008      	b.n	8001cc4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40022100 	.word	0x40022100
 8001cd8:	40022300 	.word	0x40022300
 8001cdc:	58026300 	.word	0x58026300

08001ce0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b0a1      	sub	sp, #132	; 0x84
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a9d      	ldr	r2, [pc, #628]	; (8001f8c <HAL_ADC_ConfigChannel+0x290>)
 8001d16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x2a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e321      	b.n	800236a <HAL_ADC_ConfigChannel+0x66e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fc4e 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8306 	bne.w	800234c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x62>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2201      	movs	r2, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	e016      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e003      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2201      	movs	r2, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	69d1      	ldr	r1, [r2, #28]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f7ff faf3 	bl	8001392 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fc0f 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001db6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc1c 	bl	80015fa <LL_ADC_INJ_IsConversionOngoing>
 8001dc2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80b3 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 80af 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fb02 	bl	80013ea <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001de6:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_ADC_ConfigChannel+0x294>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x110>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	e01d      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x14c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x136>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	e00a      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x14c>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d027      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e60:	f7ff fa30 	bl	80012c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6919      	ldr	r1, [r3, #16]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	7e5b      	ldrb	r3, [r3, #25]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x17e>
 8001e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e78:	e000      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x180>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f7ff fa5a 	bl	8001336 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7e1b      	ldrb	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x19c>
 8001e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x19e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f7ff fa32 	bl	8001304 <LL_ADC_SetDataRightShift>
 8001ea0:	e047      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	069b      	lsls	r3, r3, #26
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d107      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d107      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f0c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	069b      	lsls	r3, r3, #26
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d107      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f30:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fb24 	bl	8001584 <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 820d 	bne.w	800235e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f7ff fa75 	bl	8001440 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_ADC_ConfigChannel+0x290>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 8133 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d110      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x298>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2b09      	cmp	r3, #9
 8001f80:	bf94      	ite	ls
 8001f82:	2301      	movls	r3, #1
 8001f84:	2300      	movhi	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e01e      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x2cc>
 8001f8a:	bf00      	nop
 8001f8c:	47ff0000 	.word	0x47ff0000
 8001f90:	5c001000 	.word	0x5c001000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	bf94      	ite	ls
 8001fc2:	2301      	movls	r3, #1
 8001fc4:	2300      	movhi	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d079      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x2ec>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	069b      	lsls	r3, r3, #26
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe6:	e015      	b.n	8002014 <HAL_ADC_ConfigChannel+0x318>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	069b      	lsls	r3, r3, #26
 8002010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x338>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	3301      	adds	r3, #1
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	e017      	b.n	8002064 <HAL_ADC_ConfigChannel+0x368>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e003      	b.n	8002058 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	ea42 0103 	orr.w	r1, r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x38e>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	3301      	adds	r3, #1
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	051b      	lsls	r3, r3, #20
 8002088:	e018      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3c0>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020bc:	430b      	orrs	r3, r1
 80020be:	e07e      	b.n	80021be <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x3e0>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020da:	e015      	b.n	8002108 <HAL_ADC_ConfigChannel+0x40c>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x42c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	e017      	b.n	8002158 <HAL_ADC_ConfigChannel+0x45c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	61bb      	str	r3, [r7, #24]
  return result;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e003      	b.n	800214c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x488>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	3301      	adds	r3, #1
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	3b1e      	subs	r3, #30
 800217c:	051b      	lsls	r3, r3, #20
 800217e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002182:	e01b      	b.n	80021bc <HAL_ADC_ConfigChannel+0x4c0>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	60fb      	str	r3, [r7, #12]
  return result;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e003      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	051b      	lsls	r3, r3, #20
 80021b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021bc:	430b      	orrs	r3, r1
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	6892      	ldr	r2, [r2, #8]
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7ff f911 	bl	80013ea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f280 80c6 	bge.w	800235e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a67      	ldr	r2, [pc, #412]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x4ea>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x4ee>
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_ADC_ConfigChannel+0x680>)
 80021e8:	e000      	b.n	80021ec <HAL_ADC_ConfigChannel+0x4f0>
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_ADC_ConfigChannel+0x684>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f85b 	bl	80012a8 <LL_ADC_GetCommonPathInternalCh>
 80021f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5e      	ldr	r2, [pc, #376]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_ADC_ConfigChannel+0x50c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d10e      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x52a>
 8002208:	485a      	ldr	r0, [pc, #360]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 800220a:	f7ff f9bb 	bl	8001584 <LL_ADC_IsEnabled>
 800220e:	4604      	mov	r4, r0
 8002210:	4859      	ldr	r0, [pc, #356]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 8002212:	f7ff f9b7 	bl	8001584 <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	4323      	orrs	r3, r4
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e008      	b.n	8002238 <HAL_ADC_ConfigChannel+0x53c>
 8002226:	4857      	ldr	r0, [pc, #348]	; (8002384 <HAL_ADC_ConfigChannel+0x688>)
 8002228:	f7ff f9ac 	bl	8001584 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07d      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a51      	ldr	r2, [pc, #324]	; (8002388 <HAL_ADC_ConfigChannel+0x68c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d130      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ac>
 8002246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d12b      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_ADC_ConfigChannel+0x688>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f040 8081 	bne.w	800235e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x574>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a43      	ldr	r2, [pc, #268]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x578>
 8002270:	4a42      	ldr	r2, [pc, #264]	; (800237c <HAL_ADC_ConfigChannel+0x680>)
 8002272:	e000      	b.n	8002276 <HAL_ADC_ConfigChannel+0x57a>
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_ADC_ConfigChannel+0x684>)
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7fe ffff 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_ADC_ConfigChannel+0x690>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	4a41      	ldr	r2, [pc, #260]	; (8002390 <HAL_ADC_ConfigChannel+0x694>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a6:	e05a      	b.n	800235e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_ADC_ConfigChannel+0x698>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11e      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x5f4>
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d119      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_ADC_ConfigChannel+0x688>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d14b      	bne.n	800235e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_ADC_ConfigChannel+0x5de>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x5e2>
 80022da:	4a28      	ldr	r2, [pc, #160]	; (800237c <HAL_ADC_ConfigChannel+0x680>)
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x5e4>
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_ADC_ConfigChannel+0x684>)
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f7fe ffca 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ee:	e036      	b.n	800235e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a28      	ldr	r2, [pc, #160]	; (8002398 <HAL_ADC_ConfigChannel+0x69c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d131      	bne.n	800235e <HAL_ADC_ConfigChannel+0x662>
 80022fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d12c      	bne.n	800235e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_ADC_ConfigChannel+0x688>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d127      	bne.n	800235e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x626>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_ADC_ConfigChannel+0x67c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x62a>
 8002322:	4a16      	ldr	r2, [pc, #88]	; (800237c <HAL_ADC_ConfigChannel+0x680>)
 8002324:	e000      	b.n	8002328 <HAL_ADC_ConfigChannel+0x62c>
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_ADC_ConfigChannel+0x684>)
 8002328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7fe ffa6 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
 8002336:	e012      	b.n	800235e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800234a:	e008      	b.n	800235e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002366:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800236a:	4618      	mov	r0, r3
 800236c:	3784      	adds	r7, #132	; 0x84
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000
 8002378:	40022100 	.word	0x40022100
 800237c:	40022300 	.word	0x40022300
 8002380:	58026300 	.word	0x58026300
 8002384:	58026000 	.word	0x58026000
 8002388:	cb840000 	.word	0xcb840000
 800238c:	24000000 	.word	0x24000000
 8002390:	053e2d63 	.word	0x053e2d63
 8002394:	c7520000 	.word	0xc7520000
 8002398:	cfb80000 	.word	0xcfb80000

0800239c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f8eb 	bl	8001584 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d16e      	bne.n	8002492 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <ADC_Enable+0x100>)
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e05a      	b.n	8002494 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f8ba 	bl	800155c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023e8:	f7fe fefc 	bl	80011e4 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <ADC_Enable+0x104>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <ADC_Enable+0x66>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <ADC_Enable+0x108>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <ADC_Enable+0x6a>
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <ADC_Enable+0x10c>)
 8002404:	e000      	b.n	8002408 <ADC_Enable+0x6c>
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <ADC_Enable+0x110>)
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f83d 	bl	8001488 <LL_ADC_GetMultimode>
 800240e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <ADC_Enable+0x108>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d002      	beq.n	8002420 <ADC_Enable+0x84>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	e000      	b.n	8002422 <ADC_Enable+0x86>
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <ADC_Enable+0x104>)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4293      	cmp	r3, r2
 8002428:	d02c      	beq.n	8002484 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d130      	bne.n	8002492 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002430:	e028      	b.n	8002484 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff f8a4 	bl	8001584 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f888 	bl	800155c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800244c:	f7fe feca 	bl	80011e4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d914      	bls.n	8002484 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d00d      	beq.n	8002484 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d1cf      	bne.n	8002432 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	8000003f 	.word	0x8000003f
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40022100 	.word	0x40022100
 80024a8:	40022300 	.word	0x40022300
 80024ac:	58026300 	.word	0x58026300

080024b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <ADC_ConfigureBoostMode+0x1f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <ADC_ConfigureBoostMode+0x1c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a79      	ldr	r2, [pc, #484]	; (80026ac <ADC_ConfigureBoostMode+0x1fc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d109      	bne.n	80024e0 <ADC_ConfigureBoostMode+0x30>
 80024cc:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <ADC_ConfigureBoostMode+0x200>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e008      	b.n	80024f2 <ADC_ConfigureBoostMode+0x42>
 80024e0:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <ADC_ConfigureBoostMode+0x204>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01c      	beq.n	8002530 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024f6:	f001 fde9 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80024fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002504:	d010      	beq.n	8002528 <ADC_ConfigureBoostMode+0x78>
 8002506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800250a:	d873      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x144>
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d002      	beq.n	8002518 <ADC_ConfigureBoostMode+0x68>
 8002512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002516:	d16d      	bne.n	80025f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	60fb      	str	r3, [r7, #12]
        break;
 8002526:	e068      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	60fb      	str	r3, [r7, #12]
        break;
 800252e:	e064      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002530:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	f003 f82e 	bl	8005598 <HAL_RCCEx_GetPeriphCLKFreq>
 800253c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002546:	d051      	beq.n	80025ec <ADC_ConfigureBoostMode+0x13c>
 8002548:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800254c:	d854      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 800254e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002552:	d047      	beq.n	80025e4 <ADC_ConfigureBoostMode+0x134>
 8002554:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002558:	d84e      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 800255a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800255e:	d03d      	beq.n	80025dc <ADC_ConfigureBoostMode+0x12c>
 8002560:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002564:	d848      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 8002566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256a:	d033      	beq.n	80025d4 <ADC_ConfigureBoostMode+0x124>
 800256c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002570:	d842      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 8002572:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002576:	d029      	beq.n	80025cc <ADC_ConfigureBoostMode+0x11c>
 8002578:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800257c:	d83c      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 800257e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002582:	d01a      	beq.n	80025ba <ADC_ConfigureBoostMode+0x10a>
 8002584:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002588:	d836      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 800258a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800258e:	d014      	beq.n	80025ba <ADC_ConfigureBoostMode+0x10a>
 8002590:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002594:	d830      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 8002596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259a:	d00e      	beq.n	80025ba <ADC_ConfigureBoostMode+0x10a>
 800259c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a0:	d82a      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 80025a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025a6:	d008      	beq.n	80025ba <ADC_ConfigureBoostMode+0x10a>
 80025a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025ac:	d824      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x148>
 80025ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025b2:	d002      	beq.n	80025ba <ADC_ConfigureBoostMode+0x10a>
 80025b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025b8:	d11e      	bne.n	80025f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	60fb      	str	r3, [r7, #12]
        break;
 80025ca:	e016      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
        break;
 80025d2:	e012      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	60fb      	str	r3, [r7, #12]
        break;
 80025da:	e00e      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	60fb      	str	r3, [r7, #12]
        break;
 80025e2:	e00a      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	09db      	lsrs	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
        break;
 80025ea:	e006      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	60fb      	str	r3, [r7, #12]
        break;
 80025f2:	e002      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80025f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025fa:	f7fe fe23 	bl	8001244 <HAL_GetREVID>
 80025fe:	4603      	mov	r3, r0
 8002600:	f241 0203 	movw	r2, #4099	; 0x1003
 8002604:	4293      	cmp	r3, r2
 8002606:	d815      	bhi.n	8002634 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <ADC_ConfigureBoostMode+0x208>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d908      	bls.n	8002622 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002620:	e03e      	b.n	80026a0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	e035      	b.n	80026a0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <ADC_ConfigureBoostMode+0x20c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d808      	bhi.n	8002654 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002650:	609a      	str	r2, [r3, #8]
}
 8002652:	e025      	b.n	80026a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <ADC_ConfigureBoostMode+0x210>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d80a      	bhi.n	8002672 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	e016      	b.n	80026a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <ADC_ConfigureBoostMode+0x214>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d80a      	bhi.n	8002690 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	609a      	str	r2, [r3, #8]
}
 800268e:	e007      	b.n	80026a0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022100 	.word	0x40022100
 80026b0:	40022300 	.word	0x40022300
 80026b4:	58026300 	.word	0x58026300
 80026b8:	01312d00 	.word	0x01312d00
 80026bc:	005f5e10 	.word	0x005f5e10
 80026c0:	00bebc20 	.word	0x00bebc20
 80026c4:	017d7840 	.word	0x017d7840

080026c8 <LL_ADC_IsEnabled>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <LL_ADC_IsEnabled+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_IsEnabled+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b09f      	sub	sp, #124	; 0x7c
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800272e:	2302      	movs	r3, #2
 8002730:	e0be      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800273e:	2300      	movs	r3, #0
 8002740:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d102      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800274c:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	e001      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e09d      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffb9 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 800277c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffb3 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d17f      	bne.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800278e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002790:	2b00      	cmp	r3, #0
 8002792:	d17c      	bne.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a46      	ldr	r2, [pc, #280]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027aa:	e000      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d039      	beq.n	800282c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10e      	bne.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027de:	4836      	ldr	r0, [pc, #216]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027e0:	f7ff ff72 	bl	80026c8 <LL_ADC_IsEnabled>
 80027e4:	4604      	mov	r4, r0
 80027e6:	4835      	ldr	r0, [pc, #212]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027e8:	f7ff ff6e 	bl	80026c8 <LL_ADC_IsEnabled>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4323      	orrs	r3, r4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e008      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80027fc:	4832      	ldr	r0, [pc, #200]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80027fe:	f7ff ff63 	bl	80026c8 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d047      	beq.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002818:	4013      	ands	r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6811      	ldr	r1, [r2, #0]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	6892      	ldr	r2, [r2, #8]
 8002822:	430a      	orrs	r2, r1
 8002824:	431a      	orrs	r2, r3
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800282a:	e03a      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10e      	bne.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800284c:	481a      	ldr	r0, [pc, #104]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800284e:	f7ff ff3b 	bl	80026c8 <LL_ADC_IsEnabled>
 8002852:	4604      	mov	r4, r0
 8002854:	4819      	ldr	r0, [pc, #100]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002856:	f7ff ff37 	bl	80026c8 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	4323      	orrs	r3, r4
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e008      	b.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800286a:	4817      	ldr	r0, [pc, #92]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800286c:	f7ff ff2c 	bl	80026c8 <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002886:	4013      	ands	r3, r2
 8002888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800288a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800288c:	e009      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028a0:	e000      	b.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	377c      	adds	r7, #124	; 0x7c
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022100 	.word	0x40022100
 80028c0:	40022300 	.word	0x40022300
 80028c4:	58026300 	.word	0x58026300
 80028c8:	58026000 	.word	0x58026000
 80028cc:	fffff0e0 	.word	0xfffff0e0

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <__NVIC_SetPriorityGrouping+0x40>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x40>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00
 8002914:	05fa0000 	.word	0x05fa0000

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff47 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff5e 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff90 	bl	8002988 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5f 	bl	8002934 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffb2 	bl	80029f0 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_GPIO_Init+0x234>)
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aaa:	e194      	b.n	8002dd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8186 	beq.w	8002dd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d005      	beq.n	8002adc <HAL_GPIO_Init+0x44>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d130      	bne.n	8002b3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b12:	2201      	movs	r2, #1
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0201 	and.w	r2, r3, #1
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d017      	beq.n	8002b7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d123      	bne.n	8002bce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80e0 	beq.w	8002dd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_GPIO_Init+0x23c>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_GPIO_Init+0x240>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d052      	beq.n	8002d00 <HAL_GPIO_Init+0x268>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_GPIO_Init+0x244>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d031      	beq.n	8002cc6 <HAL_GPIO_Init+0x22e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_GPIO_Init+0x248>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <HAL_GPIO_Init+0x22a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_GPIO_Init+0x24c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d025      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_GPIO_Init+0x250>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_GPIO_Init+0x254>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_GPIO_Init+0x258>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_GPIO_Init+0x25c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_GPIO_Init+0x260>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_GPIO_Init+0x264>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	e02d      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	e02b      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002caa:	2308      	movs	r3, #8
 8002cac:	e029      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e027      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	e025      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e023      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e021      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e01f      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e01d      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e01b      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cca:	bf00      	nop
 8002ccc:	58000080 	.word	0x58000080
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58000400 	.word	0x58000400
 8002cd8:	58020000 	.word	0x58020000
 8002cdc:	58020400 	.word	0x58020400
 8002ce0:	58020800 	.word	0x58020800
 8002ce4:	58020c00 	.word	0x58020c00
 8002ce8:	58021000 	.word	0x58021000
 8002cec:	58021400 	.word	0x58021400
 8002cf0:	58021800 	.word	0x58021800
 8002cf4:	58021c00 	.word	0x58021c00
 8002cf8:	58022000 	.word	0x58022000
 8002cfc:	58022400 	.word	0x58022400
 8002d00:	2300      	movs	r3, #0
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d12:	4938      	ldr	r1, [pc, #224]	; (8002df4 <HAL_GPIO_Init+0x35c>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f ae63 	bne.w	8002aac <HAL_GPIO_Init+0x14>
  }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	58000400 	.word	0x58000400

08002df8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_HSEM_FastTake+0x2c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3320      	adds	r3, #32
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_HSEM_FastTake+0x30>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	58026400 	.word	0x58026400
 8002e28:	80000300 	.word	0x80000300

08002e2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002e36:	4906      	ldr	r1, [pc, #24]	; (8002e50 <HAL_HSEM_Release+0x24>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	58026400 	.word	0x58026400

08002e54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	b08f      	sub	sp, #60	; 0x3c
 8002e58:	af0a      	add	r7, sp, #40	; 0x28
 8002e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e116      	b.n	8003094 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe f849 	bl	8000f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 f83d 	bl	8007f24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	687e      	ldr	r6, [r7, #4]
 8002eb2:	466d      	mov	r5, sp
 8002eb4:	f106 0410 	add.w	r4, r6, #16
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec8:	1d33      	adds	r3, r6, #4
 8002eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f004 ffbb 	bl	8007e48 <USB_CoreInit>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d7      	b.n	8003094 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 f82b 	bl	8007f46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e04a      	b.n	8002f8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	333d      	adds	r3, #61	; 0x3d
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	333c      	adds	r3, #60	; 0x3c
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	b298      	uxth	r0, r3
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3356      	adds	r3, #86	; 0x56
 8002f32:	4602      	mov	r2, r0
 8002f34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3340      	adds	r3, #64	; 0x40
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3344      	adds	r3, #68	; 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3348      	adds	r3, #72	; 0x48
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334c      	adds	r3, #76	; 0x4c
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3af      	bcc.n	8002ef6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e044      	b.n	8003026 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	3301      	adds	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3b5      	bcc.n	8002f9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	687e      	ldr	r6, [r7, #4]
 8003038:	466d      	mov	r5, sp
 800303a:	f106 0410 	add.w	r4, r6, #16
 800303e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800304a:	e885 0003 	stmia.w	r5, {r0, r1}
 800304e:	1d33      	adds	r3, r6, #4
 8003050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f004 ffc4 	bl	8007fe0 <USB_DevInit>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e014      	b.n	8003094 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f80a 	bl	800309c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f005 f982 	bl	8008396 <USB_DevDisconnect>

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800309c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	10000003 	.word	0x10000003

080030e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030ec:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d00a      	beq.n	800310e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e040      	b.n	800318c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e03e      	b.n	800318c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003116:	491f      	ldr	r1, [pc, #124]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4313      	orrs	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800311e:	f7fe f861 	bl	80011e4 <HAL_GetTick>
 8003122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003124:	e009      	b.n	800313a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003126:	f7fe f85d 	bl	80011e4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003134:	d901      	bls.n	800313a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e028      	b.n	800318c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d1ee      	bne.n	8003126 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b1e      	cmp	r3, #30
 800314c:	d008      	beq.n	8003160 <HAL_PWREx_ConfigSupply+0x7c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b2e      	cmp	r3, #46	; 0x2e
 8003152:	d005      	beq.n	8003160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b1d      	cmp	r3, #29
 8003158:	d002      	beq.n	8003160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b2d      	cmp	r3, #45	; 0x2d
 800315e:	d114      	bne.n	800318a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003160:	f7fe f840 	bl	80011e4 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003166:	e009      	b.n	800317c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003168:	f7fe f83c 	bl	80011e4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003176:	d901      	bls.n	800317c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_PWREx_ConfigSupply+0xb0>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d1ee      	bne.n	8003168 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	58024800 	.word	0x58024800

08003198 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	58024800 	.word	0x58024800

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f000 bc48 	b.w	8003a5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8088 	beq.w	80032ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b99      	ldr	r3, [pc, #612]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031e4:	4b96      	ldr	r3, [pc, #600]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d007      	beq.n	8003200 <HAL_RCC_OscConfig+0x48>
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b18      	cmp	r3, #24
 80031f4:	d111      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b8f      	ldr	r3, [pc, #572]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d06d      	beq.n	80032e8 <HAL_RCC_OscConfig+0x130>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d169      	bne.n	80032e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f000 bc21 	b.w	8003a5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x7a>
 8003224:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a85      	ldr	r2, [pc, #532]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x9c>
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xc0>
 800325e:	4b78      	ldr	r3, [pc, #480]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a77      	ldr	r2, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b75      	ldr	r3, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a74      	ldr	r2, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003278:	4b71      	ldr	r3, [pc, #452]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a70      	ldr	r2, [pc, #448]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b6e      	ldr	r3, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6d      	ldr	r2, [pc, #436]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd ffa4 	bl	80011e4 <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd ffa0 	bl	80011e4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e3d4      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe8>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd ff90 	bl	80011e4 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd ff8c 	bl	80011e4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e3c0      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032da:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x110>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80ca 	beq.w	800348c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_RCC_OscConfig+0x166>
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b18      	cmp	r3, #24
 8003312:	d156      	bne.n	80033c2 <HAL_RCC_OscConfig+0x20a>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d151      	bne.n	80033c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331e:	4b48      	ldr	r3, [pc, #288]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x17e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e392      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0219 	bic.w	r2, r3, #25
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	493f      	ldr	r1, [pc, #252]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd ff4c 	bl	80011e4 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fd ff48 	bl	80011e4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e37c      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	f7fd ff69 	bl	8001244 <HAL_GetREVID>
 8003372:	4603      	mov	r3, r0
 8003374:	f241 0203 	movw	r2, #4099	; 0x1003
 8003378:	4293      	cmp	r3, r2
 800337a:	d817      	bhi.n	80033ac <HAL_RCC_OscConfig+0x1f4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d108      	bne.n	8003396 <HAL_RCC_OscConfig+0x1de>
 8003384:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003392:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	e07a      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	031b      	lsls	r3, r3, #12
 80033a4:	4926      	ldr	r1, [pc, #152]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033aa:	e06f      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	4921      	ldr	r1, [pc, #132]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	e064      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d047      	beq.n	800345a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0219 	bic.w	r2, r3, #25
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	491a      	ldr	r1, [pc, #104]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd ff02 	bl	80011e4 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fd fefe 	bl	80011e4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e332      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	f7fd ff1f 	bl	8001244 <HAL_GetREVID>
 8003406:	4603      	mov	r3, r0
 8003408:	f241 0203 	movw	r2, #4099	; 0x1003
 800340c:	4293      	cmp	r3, r2
 800340e:	d819      	bhi.n	8003444 <HAL_RCC_OscConfig+0x28c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d108      	bne.n	800342a <HAL_RCC_OscConfig+0x272>
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003420:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	6053      	str	r3, [r2, #4]
 8003428:	e030      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	031b      	lsls	r3, r3, #12
 8003438:	4901      	ldr	r1, [pc, #4]	; (8003440 <HAL_RCC_OscConfig+0x288>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
 800343e:	e025      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
 8003440:	58024400 	.word	0x58024400
 8003444:	4b9a      	ldr	r3, [pc, #616]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	4997      	ldr	r1, [pc, #604]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	e018      	b.n	800348c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b95      	ldr	r3, [pc, #596]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a94      	ldr	r2, [pc, #592]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd febd 	bl	80011e4 <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346e:	f7fd feb9 	bl	80011e4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e2ed      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003480:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a9 	beq.w	80035ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034a4:	4b82      	ldr	r3, [pc, #520]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d007      	beq.n	80034c0 <HAL_RCC_OscConfig+0x308>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b18      	cmp	r3, #24
 80034b4:	d13a      	bne.n	800352c <HAL_RCC_OscConfig+0x374>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d135      	bne.n	800352c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034c0:	4b7b      	ldr	r3, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_OscConfig+0x320>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e2c1      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d8:	f7fd feb4 	bl	8001244 <HAL_GetREVID>
 80034dc:	4603      	mov	r3, r0
 80034de:	f241 0203 	movw	r2, #4099	; 0x1003
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d817      	bhi.n	8003516 <HAL_RCC_OscConfig+0x35e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d108      	bne.n	8003500 <HAL_RCC_OscConfig+0x348>
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034f6:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034fe:	e075      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003500:	4b6b      	ldr	r3, [pc, #428]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	069b      	lsls	r3, r3, #26
 800350e:	4968      	ldr	r1, [pc, #416]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003514:	e06a      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003516:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	4962      	ldr	r1, [pc, #392]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800352a:	e05f      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d042      	beq.n	80035ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003534:	4b5e      	ldr	r3, [pc, #376]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fe50 	bl	80011e4 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003548:	f7fd fe4c 	bl	80011e4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e280      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800355a:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003566:	f7fd fe6d 	bl	8001244 <HAL_GetREVID>
 800356a:	4603      	mov	r3, r0
 800356c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003570:	4293      	cmp	r3, r2
 8003572:	d817      	bhi.n	80035a4 <HAL_RCC_OscConfig+0x3ec>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	2b20      	cmp	r3, #32
 800357a:	d108      	bne.n	800358e <HAL_RCC_OscConfig+0x3d6>
 800357c:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003584:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800358a:	6053      	str	r3, [r2, #4]
 800358c:	e02e      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	069b      	lsls	r3, r3, #26
 800359c:	4944      	ldr	r1, [pc, #272]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
 80035a2:	e023      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	493f      	ldr	r1, [pc, #252]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
 80035b8:	e018      	b.n	80035ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fe0d 	bl	80011e4 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035ce:	f7fd fe09 	bl	80011e4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e23d      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035e0:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d036      	beq.n	8003666 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d019      	beq.n	8003634 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fd fdea 	bl	80011e4 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fd fde6 	bl	80011e4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e21a      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x45c>
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fd fdd0 	bl	80011e4 <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7fd fdcc 	bl	80011e4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e200      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d039      	beq.n	80036e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003686:	f7fd fdad 	bl	80011e4 <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368e:	f7fd fda9 	bl	80011e4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1dd      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x4d6>
 80036ac:	e01b      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036b4:	4b9b      	ldr	r3, [pc, #620]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a9a      	ldr	r2, [pc, #616]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80036ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036c0:	f7fd fd90 	bl	80011e4 <HAL_GetTick>
 80036c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c8:	f7fd fd8c 	bl	80011e4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1c0      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036da:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8081 	beq.w	80037f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <HAL_RCC_OscConfig+0x770>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a8b      	ldr	r2, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x770>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003700:	f7fd fd70 	bl	80011e4 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fd fd6c 	bl	80011e4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1a0      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371a:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x770>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x584>
 800372e:	4b7d      	ldr	r3, [pc, #500]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	; 0x70
 800373a:	e02d      	b.n	8003798 <HAL_RCC_OscConfig+0x5e0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10c      	bne.n	800375e <HAL_RCC_OscConfig+0x5a6>
 8003744:	4b77      	ldr	r3, [pc, #476]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a76      	ldr	r2, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	4b74      	ldr	r3, [pc, #464]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a73      	ldr	r2, [pc, #460]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x5e0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x5c8>
 8003766:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a6b      	ldr	r2, [pc, #428]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x5e0>
 8003780:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	4b65      	ldr	r3, [pc, #404]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a64      	ldr	r2, [pc, #400]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd fd20 	bl	80011e4 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd fd1c 	bl	80011e4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e14e      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037be:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ee      	beq.n	80037a8 <HAL_RCC_OscConfig+0x5f0>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fd0a 	bl	80011e4 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fd fd06 	bl	80011e4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e138      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ea:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ee      	bne.n	80037d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 812d 	beq.w	8003a5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003800:	4b48      	ldr	r3, [pc, #288]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003808:	2b18      	cmp	r3, #24
 800380a:	f000 80bd 	beq.w	8003988 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b02      	cmp	r3, #2
 8003814:	f040 809e 	bne.w	8003954 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	4b42      	ldr	r3, [pc, #264]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a41      	ldr	r2, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fcde 	bl	80011e4 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fcda 	bl	80011e4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e10e      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800384c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_OscConfig+0x774>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	430a      	orrs	r2, r1
 800385e:	4931      	ldr	r1, [pc, #196]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	628b      	str	r3, [r1, #40]	; 0x28
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	3b01      	subs	r3, #1
 800386a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	3b01      	subs	r3, #1
 8003874:	025b      	lsls	r3, r3, #9
 8003876:	b29b      	uxth	r3, r3
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	3b01      	subs	r3, #1
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003894:	4923      	ldr	r1, [pc, #140]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	4a21      	ldr	r2, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038a6:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_RCC_OscConfig+0x778>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038b2:	00d2      	lsls	r2, r2, #3
 80038b4:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	f023 020c 	bic.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4917      	ldr	r1, [pc, #92]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038cc:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f023 0202 	bic.w	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	4912      	ldr	r1, [pc, #72]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_RCC_OscConfig+0x76c>)
 8003914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd fc63 	bl	80011e4 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003920:	e011      	b.n	8003946 <HAL_RCC_OscConfig+0x78e>
 8003922:	bf00      	nop
 8003924:	58024400 	.word	0x58024400
 8003928:	58024800 	.word	0x58024800
 800392c:	fffffc0c 	.word	0xfffffc0c
 8003930:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fd fc56 	bl	80011e4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e08a      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x77c>
 8003952:	e082      	b.n	8003a5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b43      	ldr	r3, [pc, #268]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fc40 	bl	80011e4 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fc3c 	bl	80011e4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e070      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397a:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x7b0>
 8003986:	e068      	b.n	8003a5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800398e:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b01      	cmp	r3, #1
 800399a:	d031      	beq.n	8003a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d12a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d122      	bne.n	8003a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d11a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0a5b      	lsrs	r3, r3, #9
 80039ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d111      	bne.n	8003a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e02b      	b.n	8003a5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d01f      	beq.n	8003a5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a26:	f7fd fbdd 	bl	80011e4 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a2c:	bf00      	nop
 8003a2e:	f7fd fbd9 	bl	80011e4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d0f9      	beq.n	8003a2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_RCC_OscConfig+0x8b0>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a46:	00d2      	lsls	r2, r2, #3
 8003a48:	4906      	ldr	r1, [pc, #24]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_OscConfig+0x8ac>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	58024400 	.word	0x58024400
 8003a68:	ffff0007 	.word	0xffff0007

08003a6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e19c      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b8a      	ldr	r3, [pc, #552]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d910      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b87      	ldr	r3, [pc, #540]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 020f 	bic.w	r2, r3, #15
 8003a96:	4985      	ldr	r1, [pc, #532]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b83      	ldr	r3, [pc, #524]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e184      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d908      	bls.n	8003ade <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003acc:	4b78      	ldr	r3, [pc, #480]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4975      	ldr	r1, [pc, #468]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d010      	beq.n	8003b0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d908      	bls.n	8003b0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	496a      	ldr	r1, [pc, #424]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d908      	bls.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b28:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	495e      	ldr	r1, [pc, #376]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d908      	bls.n	8003b68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b56:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4953      	ldr	r1, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d908      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f023 020f 	bic.w	r2, r3, #15
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4947      	ldr	r1, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d055      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4940      	ldr	r1, [pc, #256]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bbc:	4b3c      	ldr	r3, [pc, #240]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d121      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0f6      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d115      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ea      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bec:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0de      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0d6      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f023 0207 	bic.w	r2, r3, #7
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1e:	f7fd fae1 	bl	80011e4 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c26:	f7fd fadd 	bl	80011e4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0be      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d1eb      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d010      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d208      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x244>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d214      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 020f 	bic.w	r2, r3, #15
 8003c92:	4906      	ldr	r1, [pc, #24]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <HAL_RCC_ClockConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e086      	b.n	8003dba <HAL_RCC_ClockConfig+0x34e>
 8003cac:	52002000 	.word	0x52002000
 8003cb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d208      	bcs.n	8003ce2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	4939      	ldr	r1, [pc, #228]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d208      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cfe:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	492e      	ldr	r1, [pc, #184]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d208      	bcs.n	8003d3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	4922      	ldr	r1, [pc, #136]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d208      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4917      	ldr	r1, [pc, #92]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d6c:	f000 f834 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	4912      	ldr	r1, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x35c>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x358>)
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a0d      	ldr	r2, [pc, #52]	; (8003dc8 <HAL_RCC_ClockConfig+0x35c>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <HAL_RCC_ClockConfig+0x360>)
 8003da2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x364>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x368>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f9ce 	bl	8001150 <HAL_InitTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	080084cc 	.word	0x080084cc
 8003dcc:	24000004 	.word	0x24000004
 8003dd0:	24000000 	.word	0x24000000
 8003dd4:	24000008 	.word	0x24000008

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dde:	4bb3      	ldr	r3, [pc, #716]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de6:	2b18      	cmp	r3, #24
 8003de8:	f200 8155 	bhi.w	8004096 <HAL_RCC_GetSysClockFreq+0x2be>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e59 	.word	0x08003e59
 8003df8:	08004097 	.word	0x08004097
 8003dfc:	08004097 	.word	0x08004097
 8003e00:	08004097 	.word	0x08004097
 8003e04:	08004097 	.word	0x08004097
 8003e08:	08004097 	.word	0x08004097
 8003e0c:	08004097 	.word	0x08004097
 8003e10:	08004097 	.word	0x08004097
 8003e14:	08003e7f 	.word	0x08003e7f
 8003e18:	08004097 	.word	0x08004097
 8003e1c:	08004097 	.word	0x08004097
 8003e20:	08004097 	.word	0x08004097
 8003e24:	08004097 	.word	0x08004097
 8003e28:	08004097 	.word	0x08004097
 8003e2c:	08004097 	.word	0x08004097
 8003e30:	08004097 	.word	0x08004097
 8003e34:	08003e85 	.word	0x08003e85
 8003e38:	08004097 	.word	0x08004097
 8003e3c:	08004097 	.word	0x08004097
 8003e40:	08004097 	.word	0x08004097
 8003e44:	08004097 	.word	0x08004097
 8003e48:	08004097 	.word	0x08004097
 8003e4c:	08004097 	.word	0x08004097
 8003e50:	08004097 	.word	0x08004097
 8003e54:	08003e8b 	.word	0x08003e8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e58:	4b94      	ldr	r3, [pc, #592]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e64:	4b91      	ldr	r3, [pc, #580]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	08db      	lsrs	r3, r3, #3
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	4a90      	ldr	r2, [pc, #576]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e76:	e111      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e78:	4b8d      	ldr	r3, [pc, #564]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e7a:	61bb      	str	r3, [r7, #24]
      break;
 8003e7c:	e10e      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e80:	61bb      	str	r3, [r7, #24]
      break;
 8003e82:	e10b      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e84:	4b8c      	ldr	r3, [pc, #560]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e86:	61bb      	str	r3, [r7, #24]
      break;
 8003e88:	e108      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e8a:	4b88      	ldr	r3, [pc, #544]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e94:	4b85      	ldr	r3, [pc, #532]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ea0:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003eaa:	4b80      	ldr	r3, [pc, #512]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80e1 	beq.w	8004090 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f000 8083 	beq.w	8003fdc <HAL_RCC_GetSysClockFreq+0x204>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f200 80a1 	bhi.w	8004020 <HAL_RCC_GetSysClockFreq+0x248>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x114>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d056      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003eea:	e099      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eec:	4b6f      	ldr	r3, [pc, #444]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d02d      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ef8:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b62      	ldr	r3, [pc, #392]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f36:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f52:	e087      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f96:	e065      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b40      	ldr	r3, [pc, #256]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fda:	e043      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004002:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800401e:	e021      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a02 	vldr	s12, [r7, #8]
 8004046:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004062:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	0a5b      	lsrs	r3, r3, #9
 800406a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406e:	3301      	adds	r3, #1
 8004070:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800407c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004088:	ee17 3a90 	vmov	r3, s15
 800408c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800408e:	e005      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
      break;
 8004094:	e002      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004098:	61bb      	str	r3, [r7, #24]
      break;
 800409a:	bf00      	nop
  }

  return sysclockfreq;
 800409c:	69bb      	ldr	r3, [r7, #24]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
 80040b0:	03d09000 	.word	0x03d09000
 80040b4:	003d0900 	.word	0x003d0900
 80040b8:	007a1200 	.word	0x007a1200
 80040bc:	46000000 	.word	0x46000000
 80040c0:	4c742400 	.word	0x4c742400
 80040c4:	4a742400 	.word	0x4a742400
 80040c8:	4af42400 	.word	0x4af42400

080040cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040d2:	f7ff fe81 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_GetHCLKFreq+0x50>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490f      	ldr	r1, [pc, #60]	; (8004120 <HAL_RCC_GetHCLKFreq+0x54>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_GetHCLKFreq+0x50>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <HAL_RCC_GetHCLKFreq+0x54>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <HAL_RCC_GetHCLKFreq+0x58>)
 8004108:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_RCC_GetHCLKFreq+0x5c>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <HAL_RCC_GetHCLKFreq+0x58>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	58024400 	.word	0x58024400
 8004120:	080084cc 	.word	0x080084cc
 8004124:	24000004 	.word	0x24000004
 8004128:	24000000 	.word	0x24000000

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004130:	f7ff ffcc 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	58024400 	.word	0x58024400
 8004154:	080084cc 	.word	0x080084cc

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800415c:	f7ff ffb6 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	58024400 	.word	0x58024400
 8004180:	080084cc 	.word	0x080084cc

08004184 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b0ca      	sub	sp, #296	; 0x128
 800418a:	af00      	add	r7, sp, #0
 800418c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004196:	2300      	movs	r3, #0
 8004198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80041a8:	2500      	movs	r5, #0
 80041aa:	ea54 0305 	orrs.w	r3, r4, r5
 80041ae:	d049      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ba:	d02f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041c0:	d828      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c6:	d01a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041cc:	d822      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d007      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041d8:	e01c      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041da:	4bb8      	ldr	r3, [pc, #736]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4ab7      	ldr	r2, [pc, #732]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041e6:	e01a      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ec:	3308      	adds	r3, #8
 80041ee:	2102      	movs	r1, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fb61 	bl	80068b8 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	3328      	adds	r3, #40	; 0x28
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fc08 	bl	8006a1c <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004226:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004234:	4aa1      	ldr	r2, [pc, #644]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004236:	430b      	orrs	r3, r1
 8004238:	6513      	str	r3, [r2, #80]	; 0x50
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004240:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004250:	f04f 0900 	mov.w	r9, #0
 8004254:	ea58 0309 	orrs.w	r3, r8, r9
 8004258:	d047      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	2b04      	cmp	r3, #4
 8004262:	d82a      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004281 	.word	0x08004281
 8004270:	0800428f 	.word	0x0800428f
 8004274:	080042a5 	.word	0x080042a5
 8004278:	080042c3 	.word	0x080042c3
 800427c:	080042c3 	.word	0x080042c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004280:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a8d      	ldr	r2, [pc, #564]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800428c:	e01a      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	3308      	adds	r3, #8
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f002 fb0e 	bl	80068b8 <RCCEx_PLL2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042a2:	e00f      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a8:	3328      	adds	r3, #40	; 0x28
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f002 fbb5 	bl	8006a1c <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042b8:	e004      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80042c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	f023 0107 	bic.w	r1, r3, #7
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4a78      	ldr	r2, [pc, #480]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6513      	str	r3, [r2, #80]	; 0x50
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80042f6:	f04f 0b00 	mov.w	fp, #0
 80042fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80042fe:	d04c      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d030      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d829      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004312:	2bc0      	cmp	r3, #192	; 0xc0
 8004314:	d02d      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004316:	2bc0      	cmp	r3, #192	; 0xc0
 8004318:	d825      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d018      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d821      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d007      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800432a:	e01c      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432c:	4b63      	ldr	r3, [pc, #396]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a62      	ldr	r2, [pc, #392]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004338:	e01c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	3308      	adds	r3, #8
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f002 fab8 	bl	80068b8 <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800434e:	e011      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004354:	3328      	adds	r3, #40	; 0x28
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f002 fb5f 	bl	8006a1c <RCCEx_PLL3_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800437c:	4b4f      	ldr	r3, [pc, #316]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	4a4c      	ldr	r2, [pc, #304]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6513      	str	r3, [r2, #80]	; 0x50
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80043a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d053      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043c6:	d035      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80043c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043cc:	d82e      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043d2:	d031      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80043d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043d8:	d828      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d01a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80043e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e4:	d822      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ee:	d007      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043f0:	e01c      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a31      	ldr	r2, [pc, #196]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043fe:	e01c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	3308      	adds	r3, #8
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f002 fa55 	bl	80068b8 <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004414:	e011      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441a:	3328      	adds	r3, #40	; 0x28
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f002 fafc 	bl	8006a1c <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800442a:	e006      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004432:	e002      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004434:	bf00      	nop
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004452:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800446e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004478:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d056      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800448a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800448e:	d038      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004494:	d831      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800449a:	d034      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800449c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a0:	d82b      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044a6:	d01d      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ac:	d825      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80044b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80044b8:	e01f      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044ba:	bf00      	nop
 80044bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4ba2      	ldr	r3, [pc, #648]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4aa1      	ldr	r2, [pc, #644]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044cc:	e01c      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	3308      	adds	r3, #8
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 f9ee 	bl	80068b8 <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044e2:	e011      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e8:	3328      	adds	r3, #40	; 0x28
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f002 fa95 	bl	8006a1c <RCCEx_PLL3_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004510:	4b8e      	ldr	r3, [pc, #568]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004520:	4a8a      	ldr	r2, [pc, #552]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004522:	430b      	orrs	r3, r1
 8004524:	6593      	str	r3, [r2, #88]	; 0x58
 8004526:	e003      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800452c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800453c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004546:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d03a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	2b30      	cmp	r3, #48	; 0x30
 8004558:	d01f      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800455a:	2b30      	cmp	r3, #48	; 0x30
 800455c:	d819      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800455e:	2b20      	cmp	r3, #32
 8004560:	d00c      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004562:	2b20      	cmp	r3, #32
 8004564:	d815      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d019      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800456a:	2b10      	cmp	r3, #16
 800456c:	d111      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4b77      	ldr	r3, [pc, #476]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a76      	ldr	r2, [pc, #472]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	3308      	adds	r3, #8
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f002 f997 	bl	80068b8 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045a8:	4b68      	ldr	r3, [pc, #416]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80045d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d051      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f0:	d035      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f6:	d82e      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045fc:	d031      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004602:	d828      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d01a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	d822      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d007      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800461a:	e01c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a4a      	ldr	r2, [pc, #296]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004628:	e01c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f002 f940 	bl	80068b8 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800463e:	e011      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004644:	3328      	adds	r3, #40	; 0x28
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f002 f9e7 	bl	8006a1c <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800466c:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	4a34      	ldr	r2, [pc, #208]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800467c:	430b      	orrs	r3, r1
 800467e:	6513      	str	r3, [r2, #80]	; 0x50
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d056      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b4:	d033      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80046b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ba:	d82c      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046c0:	d02f      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80046c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046c6:	d826      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046cc:	d02b      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046d2:	d820      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d8:	d012      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80046da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046de:	d81a      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d022      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e8:	d115      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	3308      	adds	r3, #8
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f002 f8e0 	bl	80068b8 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046fe:	e015      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004704:	3328      	adds	r3, #40	; 0x28
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f002 f987 	bl	8006a1c <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004714:	e00a      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800471e:	bf00      	nop
 8004720:	e004      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800472a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004742:	4a02      	ldr	r2, [pc, #8]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6513      	str	r3, [r2, #80]	; 0x50
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800474a:	bf00      	nop
 800474c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800476e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d055      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004784:	d033      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478a:	d82c      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d02f      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d826      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800479c:	d02b      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800479e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047a2:	d820      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a8:	d012      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80047aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ae:	d81a      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d022      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80047b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b8:	d115      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047be:	3308      	adds	r3, #8
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 f878 	bl	80068b8 <RCCEx_PLL2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047ce:	e015      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	3328      	adds	r3, #40	; 0x28
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 f91f 	bl	8006a1c <RCCEx_PLL3_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047e4:	e00a      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ee:	bf00      	nop
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004804:	4ba3      	ldr	r3, [pc, #652]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004814:	4a9f      	ldr	r2, [pc, #636]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004834:	2300      	movs	r3, #0
 8004836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800483a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d037      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d00e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004854:	d816      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485e:	d111      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004860:	4b8c      	ldr	r3, [pc, #560]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4a8b      	ldr	r2, [pc, #556]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	3308      	adds	r3, #8
 8004874:	2101      	movs	r1, #1
 8004876:	4618      	mov	r0, r3
 8004878:	f002 f81e 	bl	80068b8 <RCCEx_PLL2_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800488c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004896:	4b7f      	ldr	r3, [pc, #508]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	4a7b      	ldr	r2, [pc, #492]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6513      	str	r3, [r2, #80]	; 0x50
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80048c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d039      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d81c      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004921 	.word	0x08004921
 80048e8:	080048f5 	.word	0x080048f5
 80048ec:	08004903 	.word	0x08004903
 80048f0:	08004921 	.word	0x08004921
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a66      	ldr	r2, [pc, #408]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004906:	3308      	adds	r3, #8
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f001 ffd4 	bl	80068b8 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800492a:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f023 0103 	bic.w	r1, r3, #3
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493a:	430b      	orrs	r3, r1
 800493c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800495e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	f000 809f 	beq.w	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496a:	4b4b      	ldr	r3, [pc, #300]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4a      	ldr	r2, [pc, #296]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004976:	f7fc fc35 	bl	80011e4 <HAL_GetTick>
 800497a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497e:	e00b      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fc fc30 	bl	80011e4 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b64      	cmp	r3, #100	; 0x64
 800498e:	d903      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ed      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80049a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d179      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049b8:	4053      	eors	r3, r2
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	4a30      	ldr	r2, [pc, #192]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a2d      	ldr	r2, [pc, #180]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049e6:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d118      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fc fbf2 	bl	80011e4 <HAL_GetTick>
 8004a00:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a04:	e00d      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fc fbed 	bl	80011e4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a10:	1ad2      	subs	r2, r2, r3
 8004a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d903      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004a20:	e005      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0eb      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d129      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d10e      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a58:	091a      	lsrs	r2, r3, #4
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6113      	str	r3, [r2, #16]
 8004a64:	e005      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a70:	6113      	str	r3, [r2, #16]
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e00e      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004a92:	e009      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004a94:	58024400 	.word	0x58024400
 8004a98:	58024800 	.word	0x58024800
 8004a9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f002 0301 	and.w	r3, r2, #1
 8004ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004abe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f000 8089 	beq.w	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad0:	2b28      	cmp	r3, #40	; 0x28
 8004ad2:	d86b      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004bb5 	.word	0x08004bb5
 8004ae0:	08004bad 	.word	0x08004bad
 8004ae4:	08004bad 	.word	0x08004bad
 8004ae8:	08004bad 	.word	0x08004bad
 8004aec:	08004bad 	.word	0x08004bad
 8004af0:	08004bad 	.word	0x08004bad
 8004af4:	08004bad 	.word	0x08004bad
 8004af8:	08004bad 	.word	0x08004bad
 8004afc:	08004b81 	.word	0x08004b81
 8004b00:	08004bad 	.word	0x08004bad
 8004b04:	08004bad 	.word	0x08004bad
 8004b08:	08004bad 	.word	0x08004bad
 8004b0c:	08004bad 	.word	0x08004bad
 8004b10:	08004bad 	.word	0x08004bad
 8004b14:	08004bad 	.word	0x08004bad
 8004b18:	08004bad 	.word	0x08004bad
 8004b1c:	08004b97 	.word	0x08004b97
 8004b20:	08004bad 	.word	0x08004bad
 8004b24:	08004bad 	.word	0x08004bad
 8004b28:	08004bad 	.word	0x08004bad
 8004b2c:	08004bad 	.word	0x08004bad
 8004b30:	08004bad 	.word	0x08004bad
 8004b34:	08004bad 	.word	0x08004bad
 8004b38:	08004bad 	.word	0x08004bad
 8004b3c:	08004bb5 	.word	0x08004bb5
 8004b40:	08004bad 	.word	0x08004bad
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004bad 	.word	0x08004bad
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bb5 	.word	0x08004bb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	3308      	adds	r3, #8
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fe95 	bl	80068b8 <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b94:	e00f      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	3328      	adds	r3, #40	; 0x28
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 ff3c 	bl	8006a1c <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004baa:	e004      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bbe:	4bbf      	ldr	r3, [pc, #764]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bcc:	4abb      	ldr	r2, [pc, #748]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6553      	str	r3, [r2, #84]	; 0x54
 8004bd2:	e003      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f002 0302 	and.w	r3, r2, #2
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d041      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d824      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c59 	.word	0x08004c59
 8004c10:	08004c25 	.word	0x08004c25
 8004c14:	08004c3b 	.word	0x08004c3b
 8004c18:	08004c59 	.word	0x08004c59
 8004c1c:	08004c59 	.word	0x08004c59
 8004c20:	08004c59 	.word	0x08004c59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	3308      	adds	r3, #8
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fe43 	bl	80068b8 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c38:	e00f      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3e:	3328      	adds	r3, #40	; 0x28
 8004c40:	2101      	movs	r1, #1
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 feea 	bl	8006a1c <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c4e:	e004      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c56:	e000      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c62:	4b96      	ldr	r3, [pc, #600]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f023 0107 	bic.w	r1, r3, #7
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c70:	4a92      	ldr	r2, [pc, #584]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c72:	430b      	orrs	r3, r1
 8004c74:	6553      	str	r3, [r2, #84]	; 0x54
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f002 0304 	and.w	r3, r2, #4
 8004c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d044      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d825      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004d01 	.word	0x08004d01
 8004cb8:	08004ccd 	.word	0x08004ccd
 8004cbc:	08004ce3 	.word	0x08004ce3
 8004cc0:	08004d01 	.word	0x08004d01
 8004cc4:	08004d01 	.word	0x08004d01
 8004cc8:	08004d01 	.word	0x08004d01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fdef 	bl	80068b8 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ce0:	e00f      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce6:	3328      	adds	r3, #40	; 0x28
 8004ce8:	2101      	movs	r1, #1
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 fe96 	bl	8006a1c <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cf6:	e004      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10b      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0a:	4b6c      	ldr	r3, [pc, #432]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	f023 0107 	bic.w	r1, r3, #7
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1a:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f002 0320 	and.w	r3, r2, #32
 8004d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d055      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d56:	d033      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d5c:	d82c      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d02f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d826      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d6e:	d02b      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d74:	d820      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7a:	d012      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d80:	d81a      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d022      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8a:	d115      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d90:	3308      	adds	r3, #8
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fd8f 	bl	80068b8 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004da0:	e015      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da6:	3328      	adds	r3, #40	; 0x28
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fe36 	bl	8006a1c <RCCEx_PLL3_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004db6:	e00a      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dbe:	e006      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dc0:	bf00      	nop
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6553      	str	r3, [r2, #84]	; 0x54
 8004dec:	e003      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4313      	orrs	r3, r2
 8004e14:	d058      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e22:	d033      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004e24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e28:	d82c      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d02f      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d826      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3a:	d02b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e40:	d820      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e46:	d012      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4c:	d81a      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d022      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e56:	d115      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 fd29 	bl	80068b8 <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e6c:	e015      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e72:	3328      	adds	r3, #40	; 0x28
 8004e74:	2102      	movs	r1, #2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fdd0 	bl	8006a1c <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e82:	e00a      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e8a:	e006      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e004      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb2:	4a02      	ldr	r2, [pc, #8]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb8:	e006      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ede:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d055      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ef0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ef4:	d033      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ef6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004efa:	d82c      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f00:	d02f      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f06:	d826      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f0c:	d02b      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004f0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f12:	d820      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f18:	d012      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f1e:	d81a      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d022      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d115      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 fcc0 	bl	80068b8 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f3e:	e015      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f44:	3328      	adds	r3, #40	; 0x28
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fd67 	bl	8006a1c <RCCEx_PLL3_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f54:	e00a      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f5c:	e006      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f74:	4ba1      	ldr	r3, [pc, #644]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f84:	4a9d      	ldr	r2, [pc, #628]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8a:	e003      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f002 0308 	and.w	r3, r2, #8
 8004fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004faa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	d01e      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc6:	3328      	adds	r3, #40	; 0x28
 8004fc8:	2102      	movs	r1, #2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fd26 	bl	8006a1c <RCCEx_PLL3_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004fdc:	4b87      	ldr	r3, [pc, #540]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	4a83      	ldr	r2, [pc, #524]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f002 0310 	and.w	r3, r2, #16
 8004ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005002:	2300      	movs	r3, #0
 8005004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005008:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800500c:	460b      	mov	r3, r1
 800500e:	4313      	orrs	r3, r2
 8005010:	d01e      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d10c      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005024:	3328      	adds	r3, #40	; 0x28
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f001 fcf7 	bl	8006a1c <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800503a:	4b70      	ldr	r3, [pc, #448]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800504a:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800504c:	430b      	orrs	r3, r1
 800504e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800505c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005066:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800506a:	460b      	mov	r3, r1
 800506c:	4313      	orrs	r3, r2
 800506e:	d03e      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800507c:	d022      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800507e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005082:	d81b      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d00b      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800508e:	e015      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005094:	3308      	adds	r3, #8
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fc0d 	bl	80068b8 <RCCEx_PLL2_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050aa:	3328      	adds	r3, #40	; 0x28
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fcb4 	bl	8006a1c <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050ba:	e004      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80050c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ce:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050de:	4a47      	ldr	r2, [pc, #284]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6593      	str	r3, [r2, #88]	; 0x58
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80050fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80050fc:	2300      	movs	r3, #0
 80050fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005100:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d03b      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005116:	d01f      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800511c:	d818      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005122:	d003      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005128:	d007      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800512a:	e011      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512c:	4b33      	ldr	r3, [pc, #204]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4a32      	ldr	r2, [pc, #200]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005138:	e00f      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	3328      	adds	r3, #40	; 0x28
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fc6a 	bl	8006a1c <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6553      	str	r3, [r2, #84]	; 0x54
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800517e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800518e:	673b      	str	r3, [r7, #112]	; 0x70
 8005190:	2300      	movs	r3, #0
 8005192:	677b      	str	r3, [r7, #116]	; 0x74
 8005194:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005198:	460b      	mov	r3, r1
 800519a:	4313      	orrs	r3, r2
 800519c:	d034      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d007      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80051ae:	e011      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a11      	ldr	r2, [pc, #68]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051bc:	e00e      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	3308      	adds	r3, #8
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fb76 	bl	80068b8 <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051d2:	e003      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f2:	4a02      	ldr	r2, [pc, #8]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051f8:	e006      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005214:	66bb      	str	r3, [r7, #104]	; 0x68
 8005216:	2300      	movs	r3, #0
 8005218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800521a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d00c      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005228:	3328      	adds	r3, #40	; 0x28
 800522a:	2102      	movs	r1, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fbf5 	bl	8006a1c <RCCEx_PLL3_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800524a:	663b      	str	r3, [r7, #96]	; 0x60
 800524c:	2300      	movs	r3, #0
 800524e:	667b      	str	r3, [r7, #100]	; 0x64
 8005250:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d038      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005266:	d018      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526c:	d811      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800526e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005272:	d014      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005278:	d80b      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d106      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005284:	4bc3      	ldr	r3, [pc, #780]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	4ac2      	ldr	r2, [pc, #776]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800528a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005298:	e004      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80052a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ac:	4bb9      	ldr	r3, [pc, #740]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052bc:	4ab5      	ldr	r2, [pc, #724]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6553      	str	r3, [r2, #84]	; 0x54
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80052d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052da:	2300      	movs	r3, #0
 80052dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80052e2:	460b      	mov	r3, r1
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052e8:	4baa      	ldr	r3, [pc, #680]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	4aa7      	ldr	r2, [pc, #668]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005308:	653b      	str	r3, [r7, #80]	; 0x50
 800530a:	2300      	movs	r3, #0
 800530c:	657b      	str	r3, [r7, #84]	; 0x54
 800530e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005318:	4b9e      	ldr	r3, [pc, #632]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005328:	4a9a      	ldr	r2, [pc, #616]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800532a:	430b      	orrs	r3, r1
 800532c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48
 800533c:	2300      	movs	r3, #0
 800533e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005340:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800534a:	4b92      	ldr	r3, [pc, #584]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005358:	4a8e      	ldr	r2, [pc, #568]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800535a:	430b      	orrs	r3, r1
 800535c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800536a:	643b      	str	r3, [r7, #64]	; 0x40
 800536c:	2300      	movs	r3, #0
 800536e:	647b      	str	r3, [r7, #68]	; 0x44
 8005370:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800537a:	4b86      	ldr	r3, [pc, #536]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	4a85      	ldr	r2, [pc, #532]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005384:	6113      	str	r3, [r2, #16]
 8005386:	4b83      	ldr	r3, [pc, #524]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005388:	6919      	ldr	r1, [r3, #16]
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005392:	4a80      	ldr	r2, [pc, #512]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005394:	430b      	orrs	r3, r1
 8005396:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80053a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a6:	2300      	movs	r3, #0
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80053ae:	460b      	mov	r3, r1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053b4:	4b77      	ldr	r3, [pc, #476]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	4a74      	ldr	r2, [pc, #464]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
 80053da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e4:	4b6b      	ldr	r3, [pc, #428]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f4:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	2100      	movs	r1, #0
 8005404:	62b9      	str	r1, [r7, #40]	; 0x28
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d011      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541a:	3308      	adds	r3, #8
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fa4a 	bl	80068b8 <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800542a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	2100      	movs	r1, #0
 8005444:	6239      	str	r1, [r7, #32]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
 800544c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d011      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	3308      	adds	r3, #8
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fa2a 	bl	80068b8 <RCCEx_PLL2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	2100      	movs	r1, #0
 8005484:	61b9      	str	r1, [r7, #24]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005490:	460b      	mov	r3, r1
 8005492:	4313      	orrs	r3, r2
 8005494:	d011      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549a:	3308      	adds	r3, #8
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fa0a 	bl	80068b8 <RCCEx_PLL2_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	2100      	movs	r1, #0
 80054c4:	6139      	str	r1, [r7, #16]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d011      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054da:	3328      	adds	r3, #40	; 0x28
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fa9c 	bl	8006a1c <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80054ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	2100      	movs	r1, #0
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d011      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551a:	3328      	adds	r3, #40	; 0x28
 800551c:	2101      	movs	r1, #1
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fa7c 	bl	8006a1c <RCCEx_PLL3_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	2100      	movs	r1, #0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d011      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	3328      	adds	r3, #40	; 0x28
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fa5c 	bl	8006a1c <RCCEx_PLL3_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800556a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800557a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
}
 8005588:	4618      	mov	r0, r3
 800558a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800558e:	46bd      	mov	sp, r7
 8005590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005594:	58024400 	.word	0x58024400

08005598 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b090      	sub	sp, #64	; 0x40
 800559c:	af00      	add	r7, sp, #0
 800559e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80055aa:	430b      	orrs	r3, r1
 80055ac:	f040 8094 	bne.w	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80055b0:	4b9e      	ldr	r3, [pc, #632]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	2b04      	cmp	r3, #4
 80055be:	f200 8087 	bhi.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055dd 	.word	0x080055dd
 80055cc:	08005605 	.word	0x08005605
 80055d0:	0800562d 	.word	0x0800562d
 80055d4:	080056c9 	.word	0x080056c9
 80055d8:	08005655 	.word	0x08005655
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055dc:	4b93      	ldr	r3, [pc, #588]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e8:	d108      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 f810 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055f8:	f000 bd45 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005600:	f000 bd41 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005604:	4b89      	ldr	r3, [pc, #548]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800560c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005610:	d108      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005612:	f107 0318 	add.w	r3, r7, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fd54 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005620:	f000 bd31 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005628:	f000 bd2d 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800562c:	4b7f      	ldr	r3, [pc, #508]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d108      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fe94 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005648:	f000 bd1d 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005650:	f000 bd19 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800565c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800565e:	4b73      	ldr	r3, [pc, #460]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b04      	cmp	r3, #4
 8005668:	d10c      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005670:	4b6e      	ldr	r3, [pc, #440]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	08db      	lsrs	r3, r3, #3
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	4a6d      	ldr	r2, [pc, #436]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005682:	e01f      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005690:	d106      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005698:	d102      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800569a:	4b66      	ldr	r3, [pc, #408]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	e011      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056a0:	4b62      	ldr	r3, [pc, #392]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ac:	d106      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d102      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056b6:	4b60      	ldr	r3, [pc, #384]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ba:	e003      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056c0:	f000 bce1 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056c4:	f000 bcdf 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056c8:	4b5c      	ldr	r3, [pc, #368]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056cc:	f000 bcdb 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	f000 bcd7 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80056d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056dc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80056e0:	430b      	orrs	r3, r1
 80056e2:	f040 80ad 	bne.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80056e6:	4b51      	ldr	r3, [pc, #324]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	d056      	beq.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	f200 8090 	bhi.w	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2bc0      	cmp	r3, #192	; 0xc0
 8005706:	f000 8088 	beq.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2bc0      	cmp	r3, #192	; 0xc0
 800570e:	f200 8088 	bhi.w	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d032      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	2b80      	cmp	r3, #128	; 0x80
 800571c:	f200 8081 	bhi.w	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d014      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800572c:	e079      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800573a:	d108      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800573c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005740:	4618      	mov	r0, r3
 8005742:	f000 ff67 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800574a:	f000 bc9c 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005752:	f000 bc98 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005756:	4b35      	ldr	r3, [pc, #212]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005762:	d108      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005764:	f107 0318 	add.w	r3, r7, #24
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fcab 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005772:	f000 bc88 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800577a:	f000 bc84 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578a:	d108      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fdeb 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800579a:	f000 bc74 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a2:	f000 bc70 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c2:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	08db      	lsrs	r3, r3, #3
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057ce:	fa22 f303 	lsr.w	r3, r2, r3
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	e01f      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ea:	d102      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057ec:	4b11      	ldr	r3, [pc, #68]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f0:	e011      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057f2:	4b0e      	ldr	r3, [pc, #56]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057fe:	d106      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005812:	f000 bc38 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005816:	f000 bc36 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800581a:	4b08      	ldr	r3, [pc, #32]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800581e:	f000 bc32 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005826:	f000 bc2e 	b.w	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800582a:	bf00      	nop
 800582c:	58024400 	.word	0x58024400
 8005830:	03d09000 	.word	0x03d09000
 8005834:	003d0900 	.word	0x003d0900
 8005838:	007a1200 	.word	0x007a1200
 800583c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005844:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005848:	430b      	orrs	r3, r1
 800584a:	f040 809c 	bne.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800584e:	4b9e      	ldr	r3, [pc, #632]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005856:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800585e:	d054      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005866:	f200 808b 	bhi.w	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005870:	f000 8083 	beq.w	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800587a:	f200 8081 	bhi.w	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005884:	d02f      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588c:	d878      	bhi.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800589a:	d012      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800589c:	e070      	b.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800589e:	4b8a      	ldr	r3, [pc, #552]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058aa:	d107      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 feaf 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ba:	e3e4      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c0:	e3e1      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058c2:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ce:	d107      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d0:	f107 0318 	add.w	r3, r7, #24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fbf5 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058de:	e3d2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e4:	e3cf      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058e6:	4b78      	ldr	r3, [pc, #480]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f2:	d107      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fd37 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005902:	e3c0      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005908:	e3bd      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800590a:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005912:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b04      	cmp	r3, #4
 800591e:	d10c      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005926:	4b68      	ldr	r3, [pc, #416]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	08db      	lsrs	r3, r3, #3
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	4a66      	ldr	r2, [pc, #408]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005938:	e01e      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800593a:	4b63      	ldr	r3, [pc, #396]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d106      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594e:	d102      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005950:	4b5f      	ldr	r3, [pc, #380]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005954:	e010      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005962:	d106      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596a:	d102      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800596c:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005976:	e386      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005978:	e385      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800597a:	4b57      	ldr	r3, [pc, #348]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597e:	e382      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005984:	e37f      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800598e:	430b      	orrs	r3, r1
 8005990:	f040 80a7 	bne.w	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005994:	4b4c      	ldr	r3, [pc, #304]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800599c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059a4:	d055      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ac:	f200 8096 	bhi.w	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059b6:	f000 8084 	beq.w	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059c0:	f200 808c 	bhi.w	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ca:	d030      	beq.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d2:	f200 8083 	bhi.w	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e2:	d012      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80059e4:	e07a      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f2:	d107      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fe0b 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a02:	e340      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a08:	e33d      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fb51 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a26:	e32e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2c:	e32b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3c:	f107 030c 	add.w	r3, r7, #12
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc93 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4a:	e31c      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a50:	e319      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d10c      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6e:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	e01e      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a96:	d102      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9c:	e010      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab2:	d102      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ab4:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005abe:	e2e2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ac0:	e2e1      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac6:	e2de      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	03d09000 	.word	0x03d09000
 8005ad0:	003d0900 	.word	0x003d0900
 8005ad4:	007a1200 	.word	0x007a1200
 8005ad8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae0:	e2d1      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005aea:	430b      	orrs	r3, r1
 8005aec:	f040 809c 	bne.w	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005af0:	4b93      	ldr	r3, [pc, #588]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b00:	d054      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b08:	f200 808b 	bhi.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b12:	f000 8083 	beq.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b1c:	f200 8081 	bhi.w	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d02f      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2e:	d878      	bhi.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	d012      	beq.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005b3e:	e070      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b40:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4c:	d107      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fd5e 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b5c:	e293      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b62:	e290      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b64:	4b76      	ldr	r3, [pc, #472]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b70:	d107      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b72:	f107 0318 	add.w	r3, r7, #24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 faa4 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b80:	e281      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b86:	e27e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b88:	4b6d      	ldr	r3, [pc, #436]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fbe6 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ba4:	e26f      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005baa:	e26c      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bac:	4b64      	ldr	r3, [pc, #400]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bb6:	4b62      	ldr	r3, [pc, #392]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc8:	4b5d      	ldr	r3, [pc, #372]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	4a5c      	ldr	r2, [pc, #368]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bda:	e01e      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bdc:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf0:	d102      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bf2:	4b55      	ldr	r3, [pc, #340]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf6:	e010      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bf8:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c04:	d106      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c0e:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c12:	e002      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c18:	e235      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c1a:	e234      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c20:	e231      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c26:	e22e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005c30:	430b      	orrs	r3, r1
 8005c32:	f040 808f 	bne.w	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005c36:	4b42      	ldr	r3, [pc, #264]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c46:	d06b      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c4e:	d874      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c56:	d056      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c5e:	d86c      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c66:	d03b      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c6e:	d864      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c76:	d021      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c7e:	d85c      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d004      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005c8e:	e054      	b.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fe fa4c 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005c94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c96:	e1f6      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca4:	d107      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca6:	f107 0318 	add.w	r3, r7, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fa0a 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb4:	e1e7      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cba:	e1e4      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc8:	d107      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fb4c 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd8:	e1d5      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cde:	e1d2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d109      	bne.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cec:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cfe:	e1c2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d04:	e1bf      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d06:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d12:	d102      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d18:	e1b5      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1e:	e1b2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2c:	d102      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d32:	e1a8      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d38:	e1a5      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3e:	e1a2      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d40:	58024400 	.word	0x58024400
 8005d44:	03d09000 	.word	0x03d09000
 8005d48:	003d0900 	.word	0x003d0900
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d58:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	d173      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d60:	4b9c      	ldr	r3, [pc, #624]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d70:	d02f      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d78:	d863      	bhi.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d012      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005d88:	e05b      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d96:	d107      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d98:	f107 0318 	add.w	r3, r7, #24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 f991 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da6:	e16e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dac:	e16b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dae:	4b89      	ldr	r3, [pc, #548]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dba:	d107      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fad3 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dca:	e15c      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dd0:	e159      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dd2:	4b80      	ldr	r3, [pc, #512]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ddc:	4b7d      	ldr	r3, [pc, #500]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d10c      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dee:	4b79      	ldr	r3, [pc, #484]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	08db      	lsrs	r3, r3, #3
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	4a77      	ldr	r2, [pc, #476]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e00:	e01e      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e02:	4b74      	ldr	r3, [pc, #464]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e16:	d102      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e18:	4b70      	ldr	r3, [pc, #448]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1c:	e010      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e1e:	4b6d      	ldr	r3, [pc, #436]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e32:	d102      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e34:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005e3e:	e122      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e40:	e121      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e46:	e11e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005e50:	430b      	orrs	r3, r1
 8005e52:	d133      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005e54:	4b5f      	ldr	r3, [pc, #380]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6a:	d012      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005e6c:	e023      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e6e:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fbc7 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8a:	e0fc      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e90:	e0f9      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e92:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea0:	f107 0318 	add.w	r3, r7, #24
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f90d 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eae:	e0ea      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb4:	e0e7      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eba:	e0e4      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	f040 808d 	bne.w	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005eca:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eda:	d06b      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee2:	d874      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d056      	beq.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d86c      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005efa:	d03b      	beq.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f02:	d864      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d021      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f12:	d85c      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f20:	d004      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005f22:	e054      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f24:	f000 f8b8 	bl	8006098 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f2a:	e0ac      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f38:	d107      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f8c0 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f48:	e09d      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f4e:	e09a      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fa02 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6c:	e08b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f72:	e088      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d109      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	08db      	lsrs	r3, r3, #3
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f92:	e078      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f98:	e075      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d102      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fac:	e06b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fb2:	e068      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc0:	d102      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc6:	e05e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fcc:	e05b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd2:	e058      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	003d0900 	.word	0x003d0900
 8005fe0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005fec:	430b      	orrs	r3, r1
 8005fee:	d148      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006000:	d02a      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006008:	d838      	bhi.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006016:	d00d      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006018:	e030      	b.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006026:	d102      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800602c:	e02b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006032:	e028      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006034:	4b16      	ldr	r3, [pc, #88]	; (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006040:	d107      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fae4 	bl	8006614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006050:	e019      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006056:	e016      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006064:	d107      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006066:	f107 0318 	add.w	r3, r7, #24
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f82a 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006074:	e007      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800607a:	e004      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006080:	e001      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006088:	4618      	mov	r0, r3
 800608a:	3740      	adds	r7, #64	; 0x40
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58024400 	.word	0x58024400
 8006094:	007a1200 	.word	0x007a1200

08006098 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800609c:	f7fe f816 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b06      	ldr	r3, [pc, #24]	; (80060bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4904      	ldr	r1, [pc, #16]	; (80060c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	58024400 	.word	0x58024400
 80060c0:	080084cc 	.word	0x080084cc

080060c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b089      	sub	sp, #36	; 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060cc:	4ba1      	ldr	r3, [pc, #644]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060d6:	4b9f      	ldr	r3, [pc, #636]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	0b1b      	lsrs	r3, r3, #12
 80060dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060e2:	4b9c      	ldr	r3, [pc, #624]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060ee:	4b99      	ldr	r3, [pc, #612]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	08db      	lsrs	r3, r3, #3
 80060f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8111 	beq.w	8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b02      	cmp	r3, #2
 8006116:	f000 8083 	beq.w	8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b02      	cmp	r3, #2
 800611e:	f200 80a1 	bhi.w	8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d056      	beq.n	80061dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800612e:	e099      	b.n	8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006130:	4b88      	ldr	r3, [pc, #544]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d02d      	beq.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800613c:	4b85      	ldr	r3, [pc, #532]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	08db      	lsrs	r3, r3, #3
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	4a84      	ldr	r2, [pc, #528]	; (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	4b7b      	ldr	r3, [pc, #492]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a03 	vldr	s12, [r7, #12]
 800617a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006196:	e087      	b.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061aa:	4b6a      	ldr	r3, [pc, #424]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80061be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061da:	e065      	b.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ee:	4b59      	ldr	r3, [pc, #356]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800621e:	e043      	b.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	4b48      	ldr	r3, [pc, #288]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	ed97 6a03 	vldr	s12, [r7, #12]
 8006246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006262:	e021      	b.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	ed97 6a03 	vldr	s12, [r7, #12]
 800628a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800635c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	0a5b      	lsrs	r3, r3, #9
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ce:	ee17 2a90 	vmov	r2, s15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062d6:	4b1f      	ldr	r3, [pc, #124]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fc:	ee17 2a90 	vmov	r2, s15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	0e1b      	lsrs	r3, r3, #24
 800630a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800631a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632a:	ee17 2a90 	vmov	r2, s15
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006332:	e008      	b.n	8006346 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
}
 8006346:	bf00      	nop
 8006348:	3724      	adds	r7, #36	; 0x24
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	58024400 	.word	0x58024400
 8006358:	03d09000 	.word	0x03d09000
 800635c:	46000000 	.word	0x46000000
 8006360:	4c742400 	.word	0x4c742400
 8006364:	4a742400 	.word	0x4a742400
 8006368:	4af42400 	.word	0x4af42400

0800636c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800636c:	b480      	push	{r7}
 800636e:	b089      	sub	sp, #36	; 0x24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006374:	4ba1      	ldr	r3, [pc, #644]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800637e:	4b9f      	ldr	r3, [pc, #636]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	0d1b      	lsrs	r3, r3, #20
 8006384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006388:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800638a:	4b9c      	ldr	r3, [pc, #624]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006396:	4b99      	ldr	r3, [pc, #612]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8111 	beq.w	80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	f000 8083 	beq.w	80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	f200 80a1 	bhi.w	800650c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d056      	beq.n	8006484 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063d6:	e099      	b.n	800650c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02d      	beq.n	8006440 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e4:	4b85      	ldr	r3, [pc, #532]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	08db      	lsrs	r3, r3, #3
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	4a84      	ldr	r2, [pc, #528]	; (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640e:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006422:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800643e:	e087      	b.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006452:	4b6a      	ldr	r3, [pc, #424]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006462:	ed97 6a03 	vldr	s12, [r7, #12]
 8006466:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800646a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006482:	e065      	b.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064c6:	e043      	b.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b48      	ldr	r3, [pc, #288]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800650a:	e021      	b.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b37      	ldr	r3, [pc, #220]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006532:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800654e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	0a5b      	lsrs	r3, r3, #9
 8006556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800656a:	edd7 6a07 	vldr	s13, [r7, #28]
 800656e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006576:	ee17 2a90 	vmov	r2, s15
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006598:	edd7 6a07 	vldr	s13, [r7, #28]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	ee17 2a90 	vmov	r2, s15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d2:	ee17 2a90 	vmov	r2, s15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065da:	e008      	b.n	80065ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	609a      	str	r2, [r3, #8]
}
 80065ee:	bf00      	nop
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	58024400 	.word	0x58024400
 8006600:	03d09000 	.word	0x03d09000
 8006604:	46000000 	.word	0x46000000
 8006608:	4c742400 	.word	0x4c742400
 800660c:	4a742400 	.word	0x4a742400
 8006610:	4af42400 	.word	0x4af42400

08006614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	; 0x24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800661c:	4ba0      	ldr	r3, [pc, #640]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006626:	4b9e      	ldr	r3, [pc, #632]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	091b      	lsrs	r3, r3, #4
 800662c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006630:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006632:	4b9b      	ldr	r3, [pc, #620]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800663c:	4b98      	ldr	r3, [pc, #608]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	08db      	lsrs	r3, r3, #3
 8006642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006654:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8111 	beq.w	8006882 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b02      	cmp	r3, #2
 8006664:	f000 8083 	beq.w	800676e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b02      	cmp	r3, #2
 800666c:	f200 80a1 	bhi.w	80067b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d056      	beq.n	800672a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800667c:	e099      	b.n	80067b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800667e:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02d      	beq.n	80066e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800668a:	4b85      	ldr	r3, [pc, #532]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	4a83      	ldr	r2, [pc, #524]	; (80068a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006696:	fa22 f303 	lsr.w	r3, r2, r3
 800669a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b4:	4b7a      	ldr	r3, [pc, #488]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066e4:	e087      	b.n	80067f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80068ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f8:	4b69      	ldr	r3, [pc, #420]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006708:	ed97 6a03 	vldr	s12, [r7, #12]
 800670c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800671c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006728:	e065      	b.n	80067f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673c:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006750:	eddf 5a55 	vldr	s11, [pc, #340]	; 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800676c:	e043      	b.n	80067f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800677c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006780:	4b47      	ldr	r3, [pc, #284]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006790:	ed97 6a03 	vldr	s12, [r7, #12]
 8006794:	eddf 5a44 	vldr	s11, [pc, #272]	; 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b0:	e021      	b.n	80067f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80068ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c4:	4b36      	ldr	r3, [pc, #216]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80067f6:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	0a5b      	lsrs	r3, r3, #9
 80067fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800680c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006810:	edd7 6a07 	vldr	s13, [r7, #28]
 8006814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681c:	ee17 2a90 	vmov	r2, s15
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006824:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800683a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800683e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684a:	ee17 2a90 	vmov	r2, s15
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	0e1b      	lsrs	r3, r3, #24
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800686c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006878:	ee17 2a90 	vmov	r2, s15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006880:	e008      	b.n	8006894 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	3724      	adds	r7, #36	; 0x24
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	58024400 	.word	0x58024400
 80068a4:	03d09000 	.word	0x03d09000
 80068a8:	46000000 	.word	0x46000000
 80068ac:	4c742400 	.word	0x4c742400
 80068b0:	4a742400 	.word	0x4a742400
 80068b4:	4af42400 	.word	0x4af42400

080068b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068c6:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d101      	bne.n	80068d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e099      	b.n	8006a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068d6:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a4e      	ldr	r2, [pc, #312]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80068dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068e2:	f7fa fc7f 	bl	80011e4 <HAL_GetTick>
 80068e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068e8:	e008      	b.n	80068fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068ea:	f7fa fc7b 	bl	80011e4 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e086      	b.n	8006a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068fc:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f0      	bne.n	80068ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006908:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	031b      	lsls	r3, r3, #12
 8006916:	493f      	ldr	r1, [pc, #252]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	628b      	str	r3, [r1, #40]	; 0x28
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	3b01      	subs	r3, #1
 8006922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	3b01      	subs	r3, #1
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	b29b      	uxth	r3, r3
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	3b01      	subs	r3, #1
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	3b01      	subs	r3, #1
 8006946:	061b      	lsls	r3, r3, #24
 8006948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800694c:	4931      	ldr	r1, [pc, #196]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 800694e:	4313      	orrs	r3, r2
 8006950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	492d      	ldr	r1, [pc, #180]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006960:	4313      	orrs	r3, r2
 8006962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006964:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f023 0220 	bic.w	r2, r3, #32
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	4928      	ldr	r1, [pc, #160]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006976:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 800697c:	f023 0310 	bic.w	r3, r3, #16
 8006980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006986:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <RCCEx_PLL2_Config+0x160>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	69d2      	ldr	r2, [r2, #28]
 800698e:	00d2      	lsls	r2, r2, #3
 8006990:	4920      	ldr	r1, [pc, #128]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006996:	4b1f      	ldr	r3, [pc, #124]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 800699c:	f043 0310 	orr.w	r3, r3, #16
 80069a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069a8:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069b4:	e00f      	b.n	80069d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d106      	bne.n	80069ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069bc:	4b15      	ldr	r3, [pc, #84]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a14      	ldr	r2, [pc, #80]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069c8:	e005      	b.n	80069d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a0e      	ldr	r2, [pc, #56]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e2:	f7fa fbff 	bl	80011e4 <HAL_GetTick>
 80069e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069e8:	e008      	b.n	80069fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069ea:	f7fa fbfb 	bl	80011e4 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e006      	b.n	8006a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0f0      	beq.n	80069ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
 8006a18:	ffff0007 	.word	0xffff0007

08006a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a2a:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d101      	bne.n	8006a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e099      	b.n	8006b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a4e      	ldr	r2, [pc, #312]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a46:	f7fa fbcd 	bl	80011e4 <HAL_GetTick>
 8006a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a4c:	e008      	b.n	8006a60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a4e:	f7fa fbc9 	bl	80011e4 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e086      	b.n	8006b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a60:	4b45      	ldr	r3, [pc, #276]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f0      	bne.n	8006a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a6c:	4b42      	ldr	r3, [pc, #264]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	051b      	lsls	r3, r3, #20
 8006a7a:	493f      	ldr	r1, [pc, #252]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	025b      	lsls	r3, r3, #9
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ab0:	4931      	ldr	r1, [pc, #196]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ab6:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ac8:	4b2b      	ldr	r3, [pc, #172]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	4928      	ldr	r1, [pc, #160]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ada:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ae6:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aea:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <RCCEx_PLL3_Config+0x160>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	69d2      	ldr	r2, [r2, #28]
 8006af2:	00d2      	lsls	r2, r2, #3
 8006af4:	4920      	ldr	r1, [pc, #128]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b0c:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b18:	e00f      	b.n	8006b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d106      	bne.n	8006b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b20:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b2c:	e005      	b.n	8006b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b2e:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b46:	f7fa fb4d 	bl	80011e4 <HAL_GetTick>
 8006b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b4c:	e008      	b.n	8006b60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b4e:	f7fa fb49 	bl	80011e4 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e006      	b.n	8006b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	ffff0007 	.word	0xffff0007

08006b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e042      	b.n	8006c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7fa f94d 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2224      	movs	r2, #36	; 0x24
 8006bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8ba 	bl	8006d3c <UART_SetConfig>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e022      	b.n	8006c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fe16 	bl	800780c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fe9d 	bl	8007950 <UART_CheckIdleState>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d17b      	bne.n	8006d32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_UART_Transmit+0x26>
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e074      	b.n	8006d34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2221      	movs	r2, #33	; 0x21
 8006c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5a:	f7fa fac3 	bl	80011e4 <HAL_GetTick>
 8006c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c78:	d108      	bne.n	8006c8c <HAL_UART_Transmit+0x6c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e003      	b.n	8006c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c94:	e030      	b.n	8006cf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 feff 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e03d      	b.n	8006d34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ccc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e007      	b.n	8006ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1c8      	bne.n	8006c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fec8 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e006      	b.n	8006d34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e000      	b.n	8006d34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d32:	2302      	movs	r3, #2
  }
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d40:	b092      	sub	sp, #72	; 0x48
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4bbe      	ldr	r3, [pc, #760]	; (8007064 <UART_SetConfig+0x328>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4ab3      	ldr	r2, [pc, #716]	; (8007068 <UART_SetConfig+0x32c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da4:	4313      	orrs	r3, r2
 8006da6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	4baf      	ldr	r3, [pc, #700]	; (800706c <UART_SetConfig+0x330>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	f023 010f 	bic.w	r1, r3, #15
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4aa6      	ldr	r2, [pc, #664]	; (8007070 <UART_SetConfig+0x334>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d177      	bne.n	8006ecc <UART_SetConfig+0x190>
 8006ddc:	4ba5      	ldr	r3, [pc, #660]	; (8007074 <UART_SetConfig+0x338>)
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de4:	2b28      	cmp	r3, #40	; 0x28
 8006de6:	d86d      	bhi.n	8006ec4 <UART_SetConfig+0x188>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0xb4>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e95 	.word	0x08006e95
 8006df4:	08006ec5 	.word	0x08006ec5
 8006df8:	08006ec5 	.word	0x08006ec5
 8006dfc:	08006ec5 	.word	0x08006ec5
 8006e00:	08006ec5 	.word	0x08006ec5
 8006e04:	08006ec5 	.word	0x08006ec5
 8006e08:	08006ec5 	.word	0x08006ec5
 8006e0c:	08006ec5 	.word	0x08006ec5
 8006e10:	08006e9d 	.word	0x08006e9d
 8006e14:	08006ec5 	.word	0x08006ec5
 8006e18:	08006ec5 	.word	0x08006ec5
 8006e1c:	08006ec5 	.word	0x08006ec5
 8006e20:	08006ec5 	.word	0x08006ec5
 8006e24:	08006ec5 	.word	0x08006ec5
 8006e28:	08006ec5 	.word	0x08006ec5
 8006e2c:	08006ec5 	.word	0x08006ec5
 8006e30:	08006ea5 	.word	0x08006ea5
 8006e34:	08006ec5 	.word	0x08006ec5
 8006e38:	08006ec5 	.word	0x08006ec5
 8006e3c:	08006ec5 	.word	0x08006ec5
 8006e40:	08006ec5 	.word	0x08006ec5
 8006e44:	08006ec5 	.word	0x08006ec5
 8006e48:	08006ec5 	.word	0x08006ec5
 8006e4c:	08006ec5 	.word	0x08006ec5
 8006e50:	08006ead 	.word	0x08006ead
 8006e54:	08006ec5 	.word	0x08006ec5
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006ec5 	.word	0x08006ec5
 8006e64:	08006ec5 	.word	0x08006ec5
 8006e68:	08006ec5 	.word	0x08006ec5
 8006e6c:	08006ec5 	.word	0x08006ec5
 8006e70:	08006eb5 	.word	0x08006eb5
 8006e74:	08006ec5 	.word	0x08006ec5
 8006e78:	08006ec5 	.word	0x08006ec5
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9a:	e222      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e21e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e21a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e216      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e212      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e20e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e20a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a69      	ldr	r2, [pc, #420]	; (8007078 <UART_SetConfig+0x33c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d130      	bne.n	8006f38 <UART_SetConfig+0x1fc>
 8006ed6:	4b67      	ldr	r3, [pc, #412]	; (8007074 <UART_SetConfig+0x338>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d826      	bhi.n	8006f30 <UART_SetConfig+0x1f4>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <UART_SetConfig+0x1ac>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f06:	e1ec      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0e:	e1e8      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f16:	e1e4      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1e:	e1e0      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f20:	2320      	movs	r3, #32
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f26:	e1dc      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2e:	e1d8      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f36:	e1d4      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a4f      	ldr	r2, [pc, #316]	; (800707c <UART_SetConfig+0x340>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d130      	bne.n	8006fa4 <UART_SetConfig+0x268>
 8006f42:	4b4c      	ldr	r3, [pc, #304]	; (8007074 <UART_SetConfig+0x338>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d826      	bhi.n	8006f9c <UART_SetConfig+0x260>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <UART_SetConfig+0x218>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f75 	.word	0x08006f75
 8006f5c:	08006f7d 	.word	0x08006f7d
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e1b6      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e1b2      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e1ae      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e1aa      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e1a6      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e1a2      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e19e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a35      	ldr	r2, [pc, #212]	; (8007080 <UART_SetConfig+0x344>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d130      	bne.n	8007010 <UART_SetConfig+0x2d4>
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <UART_SetConfig+0x338>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	d826      	bhi.n	8007008 <UART_SetConfig+0x2cc>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x284>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006fd9 	.word	0x08006fd9
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006fe9 	.word	0x08006fe9
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08007001 	.word	0x08007001
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e180      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e17c      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006fe8:	2308      	movs	r3, #8
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e178      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ff0:	2310      	movs	r3, #16
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e174      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e170      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e16c      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007008:	2380      	movs	r3, #128	; 0x80
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e168      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <UART_SetConfig+0x348>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d142      	bne.n	80070a0 <UART_SetConfig+0x364>
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <UART_SetConfig+0x338>)
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b05      	cmp	r3, #5
 8007024:	d838      	bhi.n	8007098 <UART_SetConfig+0x35c>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x2f0>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007045 	.word	0x08007045
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007055 	.word	0x08007055
 8007038:	0800705d 	.word	0x0800705d
 800703c:	08007089 	.word	0x08007089
 8007040:	08007091 	.word	0x08007091
 8007044:	2300      	movs	r3, #0
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e14a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e146      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e142      	b.n	80072e2 <UART_SetConfig+0x5a6>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e13e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007064:	cfff69f3 	.word	0xcfff69f3
 8007068:	58000c00 	.word	0x58000c00
 800706c:	11fff4ff 	.word	0x11fff4ff
 8007070:	40011000 	.word	0x40011000
 8007074:	58024400 	.word	0x58024400
 8007078:	40004400 	.word	0x40004400
 800707c:	40004800 	.word	0x40004800
 8007080:	40004c00 	.word	0x40004c00
 8007084:	40005000 	.word	0x40005000
 8007088:	2320      	movs	r3, #32
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e128      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007090:	2340      	movs	r3, #64	; 0x40
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e124      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e120      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4acb      	ldr	r2, [pc, #812]	; (80073d4 <UART_SetConfig+0x698>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d176      	bne.n	8007198 <UART_SetConfig+0x45c>
 80070aa:	4bcb      	ldr	r3, [pc, #812]	; (80073d8 <UART_SetConfig+0x69c>)
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b2:	2b28      	cmp	r3, #40	; 0x28
 80070b4:	d86c      	bhi.n	8007190 <UART_SetConfig+0x454>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x380>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	08007161 	.word	0x08007161
 80070c0:	08007191 	.word	0x08007191
 80070c4:	08007191 	.word	0x08007191
 80070c8:	08007191 	.word	0x08007191
 80070cc:	08007191 	.word	0x08007191
 80070d0:	08007191 	.word	0x08007191
 80070d4:	08007191 	.word	0x08007191
 80070d8:	08007191 	.word	0x08007191
 80070dc:	08007169 	.word	0x08007169
 80070e0:	08007191 	.word	0x08007191
 80070e4:	08007191 	.word	0x08007191
 80070e8:	08007191 	.word	0x08007191
 80070ec:	08007191 	.word	0x08007191
 80070f0:	08007191 	.word	0x08007191
 80070f4:	08007191 	.word	0x08007191
 80070f8:	08007191 	.word	0x08007191
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007191 	.word	0x08007191
 8007104:	08007191 	.word	0x08007191
 8007108:	08007191 	.word	0x08007191
 800710c:	08007191 	.word	0x08007191
 8007110:	08007191 	.word	0x08007191
 8007114:	08007191 	.word	0x08007191
 8007118:	08007191 	.word	0x08007191
 800711c:	08007179 	.word	0x08007179
 8007120:	08007191 	.word	0x08007191
 8007124:	08007191 	.word	0x08007191
 8007128:	08007191 	.word	0x08007191
 800712c:	08007191 	.word	0x08007191
 8007130:	08007191 	.word	0x08007191
 8007134:	08007191 	.word	0x08007191
 8007138:	08007191 	.word	0x08007191
 800713c:	08007181 	.word	0x08007181
 8007140:	08007191 	.word	0x08007191
 8007144:	08007191 	.word	0x08007191
 8007148:	08007191 	.word	0x08007191
 800714c:	08007191 	.word	0x08007191
 8007150:	08007191 	.word	0x08007191
 8007154:	08007191 	.word	0x08007191
 8007158:	08007191 	.word	0x08007191
 800715c:	08007189 	.word	0x08007189
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e0bc      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e0b8      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e0b4      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e0b0      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007180:	2320      	movs	r3, #32
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e0ac      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e0a8      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007190:	2380      	movs	r3, #128	; 0x80
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e0a4      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a8f      	ldr	r2, [pc, #572]	; (80073dc <UART_SetConfig+0x6a0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d130      	bne.n	8007204 <UART_SetConfig+0x4c8>
 80071a2:	4b8d      	ldr	r3, [pc, #564]	; (80073d8 <UART_SetConfig+0x69c>)
 80071a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d826      	bhi.n	80071fc <UART_SetConfig+0x4c0>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x478>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e086      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e082      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e07e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e07a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071ec:	2320      	movs	r3, #32
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e076      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fa:	e072      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007202:	e06e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a75      	ldr	r2, [pc, #468]	; (80073e0 <UART_SetConfig+0x6a4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d130      	bne.n	8007270 <UART_SetConfig+0x534>
 800720e:	4b72      	ldr	r3, [pc, #456]	; (80073d8 <UART_SetConfig+0x69c>)
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b05      	cmp	r3, #5
 8007218:	d826      	bhi.n	8007268 <UART_SetConfig+0x52c>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x4e4>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007239 	.word	0x08007239
 8007224:	08007241 	.word	0x08007241
 8007228:	08007249 	.word	0x08007249
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e050      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007240:	2304      	movs	r3, #4
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e04c      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007248:	2308      	movs	r3, #8
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e048      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007250:	2310      	movs	r3, #16
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e044      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007258:	2320      	movs	r3, #32
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e040      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e03c      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e038      	b.n	80072e2 <UART_SetConfig+0x5a6>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a5b      	ldr	r2, [pc, #364]	; (80073e4 <UART_SetConfig+0x6a8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d130      	bne.n	80072dc <UART_SetConfig+0x5a0>
 800727a:	4b57      	ldr	r3, [pc, #348]	; (80073d8 <UART_SetConfig+0x69c>)
 800727c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	2b05      	cmp	r3, #5
 8007284:	d826      	bhi.n	80072d4 <UART_SetConfig+0x598>
 8007286:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x550>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	080072a5 	.word	0x080072a5
 8007290:	080072ad 	.word	0x080072ad
 8007294:	080072b5 	.word	0x080072b5
 8007298:	080072bd 	.word	0x080072bd
 800729c:	080072c5 	.word	0x080072c5
 80072a0:	080072cd 	.word	0x080072cd
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e01a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e016      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e012      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e00e      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072c4:	2320      	movs	r3, #32
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e00a      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072cc:	2340      	movs	r3, #64	; 0x40
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e006      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072d4:	2380      	movs	r3, #128	; 0x80
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e002      	b.n	80072e2 <UART_SetConfig+0x5a6>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3f      	ldr	r2, [pc, #252]	; (80073e4 <UART_SetConfig+0x6a8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	f040 80f8 	bne.w	80074de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	dc46      	bgt.n	8007384 <UART_SetConfig+0x648>
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	f2c0 8082 	blt.w	8007400 <UART_SetConfig+0x6c4>
 80072fc:	3b02      	subs	r3, #2
 80072fe:	2b1e      	cmp	r3, #30
 8007300:	d87e      	bhi.n	8007400 <UART_SetConfig+0x6c4>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <UART_SetConfig+0x5cc>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	0800738b 	.word	0x0800738b
 800730c:	08007401 	.word	0x08007401
 8007310:	08007393 	.word	0x08007393
 8007314:	08007401 	.word	0x08007401
 8007318:	08007401 	.word	0x08007401
 800731c:	08007401 	.word	0x08007401
 8007320:	080073a3 	.word	0x080073a3
 8007324:	08007401 	.word	0x08007401
 8007328:	08007401 	.word	0x08007401
 800732c:	08007401 	.word	0x08007401
 8007330:	08007401 	.word	0x08007401
 8007334:	08007401 	.word	0x08007401
 8007338:	08007401 	.word	0x08007401
 800733c:	08007401 	.word	0x08007401
 8007340:	080073b3 	.word	0x080073b3
 8007344:	08007401 	.word	0x08007401
 8007348:	08007401 	.word	0x08007401
 800734c:	08007401 	.word	0x08007401
 8007350:	08007401 	.word	0x08007401
 8007354:	08007401 	.word	0x08007401
 8007358:	08007401 	.word	0x08007401
 800735c:	08007401 	.word	0x08007401
 8007360:	08007401 	.word	0x08007401
 8007364:	08007401 	.word	0x08007401
 8007368:	08007401 	.word	0x08007401
 800736c:	08007401 	.word	0x08007401
 8007370:	08007401 	.word	0x08007401
 8007374:	08007401 	.word	0x08007401
 8007378:	08007401 	.word	0x08007401
 800737c:	08007401 	.word	0x08007401
 8007380:	080073f3 	.word	0x080073f3
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d037      	beq.n	80073f8 <UART_SetConfig+0x6bc>
 8007388:	e03a      	b.n	8007400 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800738a:	f7fe fe85 	bl	8006098 <HAL_RCCEx_GetD3PCLK1Freq>
 800738e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007390:	e03c      	b.n	800740c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fe94 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a0:	e034      	b.n	800740c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a2:	f107 0318 	add.w	r3, r7, #24
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe ffe0 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b0:	e02c      	b.n	800740c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <UART_SetConfig+0x69c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d016      	beq.n	80073ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <UART_SetConfig+0x69c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	08db      	lsrs	r3, r3, #3
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <UART_SetConfig+0x6ac>)
 80073ca:	fa22 f303 	lsr.w	r3, r2, r3
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073d0:	e01c      	b.n	800740c <UART_SetConfig+0x6d0>
 80073d2:	bf00      	nop
 80073d4:	40011400 	.word	0x40011400
 80073d8:	58024400 	.word	0x58024400
 80073dc:	40007800 	.word	0x40007800
 80073e0:	40007c00 	.word	0x40007c00
 80073e4:	58000c00 	.word	0x58000c00
 80073e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80073ec:	4b9d      	ldr	r3, [pc, #628]	; (8007664 <UART_SetConfig+0x928>)
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f0:	e00c      	b.n	800740c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073f2:	4b9d      	ldr	r3, [pc, #628]	; (8007668 <UART_SetConfig+0x92c>)
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f6:	e009      	b.n	800740c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073fe:	e005      	b.n	800740c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800740a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800740c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 81de 	beq.w	80077d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	4a94      	ldr	r2, [pc, #592]	; (800766c <UART_SetConfig+0x930>)
 800741a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741e:	461a      	mov	r2, r3
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	fbb3 f3f2 	udiv	r3, r3, r2
 8007426:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	4413      	add	r3, r2
 8007432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007434:	429a      	cmp	r2, r3
 8007436:	d305      	bcc.n	8007444 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	429a      	cmp	r2, r3
 8007442:	d903      	bls.n	800744c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800744a:	e1c1      	b.n	80077d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744e:	2200      	movs	r2, #0
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	60fa      	str	r2, [r7, #12]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	4a84      	ldr	r2, [pc, #528]	; (800766c <UART_SetConfig+0x930>)
 800745a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745e:	b29b      	uxth	r3, r3
 8007460:	2200      	movs	r2, #0
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800746e:	f7f8 ff33 	bl	80002d8 <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4610      	mov	r0, r2
 8007478:	4619      	mov	r1, r3
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	020b      	lsls	r3, r1, #8
 8007484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007488:	0202      	lsls	r2, r0, #8
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	6849      	ldr	r1, [r1, #4]
 800748e:	0849      	lsrs	r1, r1, #1
 8007490:	2000      	movs	r0, #0
 8007492:	460c      	mov	r4, r1
 8007494:	4605      	mov	r5, r0
 8007496:	eb12 0804 	adds.w	r8, r2, r4
 800749a:	eb43 0905 	adc.w	r9, r3, r5
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	469a      	mov	sl, r3
 80074a6:	4693      	mov	fp, r2
 80074a8:	4652      	mov	r2, sl
 80074aa:	465b      	mov	r3, fp
 80074ac:	4640      	mov	r0, r8
 80074ae:	4649      	mov	r1, r9
 80074b0:	f7f8 ff12 	bl	80002d8 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4613      	mov	r3, r2
 80074ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c2:	d308      	bcc.n	80074d6 <UART_SetConfig+0x79a>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ca:	d204      	bcs.n	80074d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	e17c      	b.n	80077d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074dc:	e178      	b.n	80077d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e6:	f040 80c5 	bne.w	8007674 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80074ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	dc48      	bgt.n	8007584 <UART_SetConfig+0x848>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	db7b      	blt.n	80075ee <UART_SetConfig+0x8b2>
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d879      	bhi.n	80075ee <UART_SetConfig+0x8b2>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x7c4>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	0800758b 	.word	0x0800758b
 8007504:	08007593 	.word	0x08007593
 8007508:	080075ef 	.word	0x080075ef
 800750c:	080075ef 	.word	0x080075ef
 8007510:	0800759b 	.word	0x0800759b
 8007514:	080075ef 	.word	0x080075ef
 8007518:	080075ef 	.word	0x080075ef
 800751c:	080075ef 	.word	0x080075ef
 8007520:	080075ab 	.word	0x080075ab
 8007524:	080075ef 	.word	0x080075ef
 8007528:	080075ef 	.word	0x080075ef
 800752c:	080075ef 	.word	0x080075ef
 8007530:	080075ef 	.word	0x080075ef
 8007534:	080075ef 	.word	0x080075ef
 8007538:	080075ef 	.word	0x080075ef
 800753c:	080075ef 	.word	0x080075ef
 8007540:	080075bb 	.word	0x080075bb
 8007544:	080075ef 	.word	0x080075ef
 8007548:	080075ef 	.word	0x080075ef
 800754c:	080075ef 	.word	0x080075ef
 8007550:	080075ef 	.word	0x080075ef
 8007554:	080075ef 	.word	0x080075ef
 8007558:	080075ef 	.word	0x080075ef
 800755c:	080075ef 	.word	0x080075ef
 8007560:	080075ef 	.word	0x080075ef
 8007564:	080075ef 	.word	0x080075ef
 8007568:	080075ef 	.word	0x080075ef
 800756c:	080075ef 	.word	0x080075ef
 8007570:	080075ef 	.word	0x080075ef
 8007574:	080075ef 	.word	0x080075ef
 8007578:	080075ef 	.word	0x080075ef
 800757c:	080075ef 	.word	0x080075ef
 8007580:	080075e1 	.word	0x080075e1
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d02e      	beq.n	80075e6 <UART_SetConfig+0x8aa>
 8007588:	e031      	b.n	80075ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800758a:	f7fc fdcf 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800758e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007590:	e033      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007592:	f7fc fde1 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8007596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007598:	e02f      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd90 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a8:	e027      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075aa:	f107 0318 	add.w	r3, r7, #24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fedc 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b8:	e01f      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ba:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <UART_SetConfig+0x934>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d009      	beq.n	80075da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075c6:	4b2a      	ldr	r3, [pc, #168]	; (8007670 <UART_SetConfig+0x934>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	08db      	lsrs	r3, r3, #3
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <UART_SetConfig+0x928>)
 80075d2:	fa22 f303 	lsr.w	r3, r2, r3
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075d8:	e00f      	b.n	80075fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075da:	4b22      	ldr	r3, [pc, #136]	; (8007664 <UART_SetConfig+0x928>)
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075de:	e00c      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075e0:	4b21      	ldr	r3, [pc, #132]	; (8007668 <UART_SetConfig+0x92c>)
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e4:	e009      	b.n	80075fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ec:	e005      	b.n	80075fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80e7 	beq.w	80077d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	4a19      	ldr	r2, [pc, #100]	; (800766c <UART_SetConfig+0x930>)
 8007608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760c:	461a      	mov	r2, r3
 800760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007610:	fbb3 f3f2 	udiv	r3, r3, r2
 8007614:	005a      	lsls	r2, r3, #1
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	441a      	add	r2, r3
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	fbb2 f3f3 	udiv	r3, r2, r3
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b0f      	cmp	r3, #15
 800762c:	d916      	bls.n	800765c <UART_SetConfig+0x920>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007634:	d212      	bcs.n	800765c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	b29b      	uxth	r3, r3
 800763a:	f023 030f 	bic.w	r3, r3, #15
 800763e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	b29b      	uxth	r3, r3
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	b29a      	uxth	r2, r3
 800764c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800764e:	4313      	orrs	r3, r2
 8007650:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007658:	60da      	str	r2, [r3, #12]
 800765a:	e0b9      	b.n	80077d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007662:	e0b5      	b.n	80077d0 <UART_SetConfig+0xa94>
 8007664:	03d09000 	.word	0x03d09000
 8007668:	003d0900 	.word	0x003d0900
 800766c:	080084dc 	.word	0x080084dc
 8007670:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007678:	2b20      	cmp	r3, #32
 800767a:	dc49      	bgt.n	8007710 <UART_SetConfig+0x9d4>
 800767c:	2b00      	cmp	r3, #0
 800767e:	db7c      	blt.n	800777a <UART_SetConfig+0xa3e>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d87a      	bhi.n	800777a <UART_SetConfig+0xa3e>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <UART_SetConfig+0x950>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	08007717 	.word	0x08007717
 8007690:	0800771f 	.word	0x0800771f
 8007694:	0800777b 	.word	0x0800777b
 8007698:	0800777b 	.word	0x0800777b
 800769c:	08007727 	.word	0x08007727
 80076a0:	0800777b 	.word	0x0800777b
 80076a4:	0800777b 	.word	0x0800777b
 80076a8:	0800777b 	.word	0x0800777b
 80076ac:	08007737 	.word	0x08007737
 80076b0:	0800777b 	.word	0x0800777b
 80076b4:	0800777b 	.word	0x0800777b
 80076b8:	0800777b 	.word	0x0800777b
 80076bc:	0800777b 	.word	0x0800777b
 80076c0:	0800777b 	.word	0x0800777b
 80076c4:	0800777b 	.word	0x0800777b
 80076c8:	0800777b 	.word	0x0800777b
 80076cc:	08007747 	.word	0x08007747
 80076d0:	0800777b 	.word	0x0800777b
 80076d4:	0800777b 	.word	0x0800777b
 80076d8:	0800777b 	.word	0x0800777b
 80076dc:	0800777b 	.word	0x0800777b
 80076e0:	0800777b 	.word	0x0800777b
 80076e4:	0800777b 	.word	0x0800777b
 80076e8:	0800777b 	.word	0x0800777b
 80076ec:	0800777b 	.word	0x0800777b
 80076f0:	0800777b 	.word	0x0800777b
 80076f4:	0800777b 	.word	0x0800777b
 80076f8:	0800777b 	.word	0x0800777b
 80076fc:	0800777b 	.word	0x0800777b
 8007700:	0800777b 	.word	0x0800777b
 8007704:	0800777b 	.word	0x0800777b
 8007708:	0800777b 	.word	0x0800777b
 800770c:	0800776d 	.word	0x0800776d
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d02e      	beq.n	8007772 <UART_SetConfig+0xa36>
 8007714:	e031      	b.n	800777a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007716:	f7fc fd09 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800771a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800771c:	e033      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800771e:	f7fc fd1b 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8007722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007724:	e02f      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fcca 	bl	80060c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007734:	e027      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007736:	f107 0318 	add.w	r3, r7, #24
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fe16 	bl	800636c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e01f      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007746:	4b2d      	ldr	r3, [pc, #180]	; (80077fc <UART_SetConfig+0xac0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007752:	4b2a      	ldr	r3, [pc, #168]	; (80077fc <UART_SetConfig+0xac0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	08db      	lsrs	r3, r3, #3
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	4a28      	ldr	r2, [pc, #160]	; (8007800 <UART_SetConfig+0xac4>)
 800775e:	fa22 f303 	lsr.w	r3, r2, r3
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007764:	e00f      	b.n	8007786 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007766:	4b26      	ldr	r3, [pc, #152]	; (8007800 <UART_SetConfig+0xac4>)
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800776a:	e00c      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800776c:	4b25      	ldr	r3, [pc, #148]	; (8007804 <UART_SetConfig+0xac8>)
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007770:	e009      	b.n	8007786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007778:	e005      	b.n	8007786 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007784:	bf00      	nop
    }

    if (pclk != 0U)
 8007786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d021      	beq.n	80077d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <UART_SetConfig+0xacc>)
 8007792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007796:	461a      	mov	r2, r3
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	fbb3 f2f2 	udiv	r2, r3, r2
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	441a      	add	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	d909      	bls.n	80077ca <UART_SetConfig+0xa8e>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077bc:	d205      	bcs.n	80077ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60da      	str	r2, [r3, #12]
 80077c8:	e002      	b.n	80077d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2200      	movs	r2, #0
 80077e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3748      	adds	r7, #72	; 0x48
 80077f4:	46bd      	mov	sp, r7
 80077f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	03d09000 	.word	0x03d09000
 8007804:	003d0900 	.word	0x003d0900
 8007808:	080084dc 	.word	0x080084dc

0800780c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01a      	beq.n	8007922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790a:	d10a      	bne.n	8007922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b098      	sub	sp, #96	; 0x60
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007960:	f7f9 fc40 	bl	80011e4 <HAL_GetTick>
 8007964:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b08      	cmp	r3, #8
 8007972:	d12f      	bne.n	80079d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797c:	2200      	movs	r2, #0
 800797e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f88e 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d022      	beq.n	80079d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a2:	653b      	str	r3, [r7, #80]	; 0x50
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ac:	647b      	str	r3, [r7, #68]	; 0x44
 80079ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e6      	bne.n	800798e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e063      	b.n	8007a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d149      	bne.n	8007a76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ea:	2200      	movs	r2, #0
 80079ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f857 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d03c      	beq.n	8007a76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	623b      	str	r3, [r7, #32]
   return(result);
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4e:	61fa      	str	r2, [r7, #28]
 8007a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	69b9      	ldr	r1, [r7, #24]
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e012      	b.n	8007a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3758      	adds	r7, #88	; 0x58
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab4:	e049      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d045      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007abe:	f7f9 fb91 	bl	80011e4 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e048      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d031      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d110      	bne.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2208      	movs	r2, #8
 8007afa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f839 	bl	8007b74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2208      	movs	r2, #8
 8007b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e029      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b24:	d111      	bne.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f81f 	bl	8007b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e00f      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4013      	ands	r3, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	bf0c      	ite	eq
 8007b5a:	2301      	moveq	r3, #1
 8007b5c:	2300      	movne	r3, #0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	461a      	mov	r2, r3
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d0a6      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b095      	sub	sp, #84	; 0x54
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e6      	bne.n	8007b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <UART_EndRxTransfer+0xc8>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d118      	bne.n	8007c1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6979      	ldr	r1, [r7, #20]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	613b      	str	r3, [r7, #16]
   return(result);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e6      	bne.n	8007bea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c30:	bf00      	nop
 8007c32:	3754      	adds	r7, #84	; 0x54
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	effffffe 	.word	0xeffffffe

08007c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e027      	b.n	8007ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	; 0x24
 8007c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e02d      	b.n	8007d26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f850 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e02d      	b.n	8007da2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2224      	movs	r2, #36	; 0x24
 8007d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f812 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d108      	bne.n	8007dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dcc:	e031      	b.n	8007e32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dce:	2310      	movs	r3, #16
 8007dd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	0e5b      	lsrs	r3, r3, #25
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	0f5b      	lsrs	r3, r3, #29
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	7b3a      	ldrb	r2, [r7, #12]
 8007dfa:	4911      	ldr	r1, [pc, #68]	; (8007e40 <UARTEx_SetNbDataToProcess+0x94>)
 8007dfc:	5c8a      	ldrb	r2, [r1, r2]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e02:	7b3a      	ldrb	r2, [r7, #12]
 8007e04:	490f      	ldr	r1, [pc, #60]	; (8007e44 <UARTEx_SetNbDataToProcess+0x98>)
 8007e06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	7b7a      	ldrb	r2, [r7, #13]
 8007e18:	4909      	ldr	r1, [pc, #36]	; (8007e40 <UARTEx_SetNbDataToProcess+0x94>)
 8007e1a:	5c8a      	ldrb	r2, [r1, r2]
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e20:	7b7a      	ldrb	r2, [r7, #13]
 8007e22:	4908      	ldr	r1, [pc, #32]	; (8007e44 <UARTEx_SetNbDataToProcess+0x98>)
 8007e24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	080084f4 	.word	0x080084f4
 8007e44:	080084fc 	.word	0x080084fc

08007e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e48:	b084      	sub	sp, #16
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	f107 001c 	add.w	r0, r7, #28
 8007e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d120      	bne.n	8007ea2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <USB_CoreInit+0xd4>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d105      	bne.n	8007e96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 faac 	bl	80083f4 <USB_CoreReset>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]
 8007ea0:	e01a      	b.n	8007ed8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 faa0 	bl	80083f4 <USB_CoreReset>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8007eca:	e005      	b.n	8007ed8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d116      	bne.n	8007f0c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eec:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <USB_CoreInit+0xd8>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f043 0206 	orr.w	r2, r3, #6
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f18:	b004      	add	sp, #16
 8007f1a:	4770      	bx	lr
 8007f1c:	ffbdffbf 	.word	0xffbdffbf
 8007f20:	03ee0000 	.word	0x03ee0000

08007f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f023 0201 	bic.w	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d115      	bne.n	8007f94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f74:	2001      	movs	r0, #1
 8007f76:	f7f9 f941 	bl	80011fc <HAL_Delay>
      ms++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa29 	bl	80083d8 <USB_GetMode>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d01e      	beq.n	8007fca <USB_SetCurrentMode+0x84>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b31      	cmp	r3, #49	; 0x31
 8007f90:	d9f0      	bls.n	8007f74 <USB_SetCurrentMode+0x2e>
 8007f92:	e01a      	b.n	8007fca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d115      	bne.n	8007fc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7f9 f928 	bl	80011fc <HAL_Delay>
      ms++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa10 	bl	80083d8 <USB_GetMode>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <USB_SetCurrentMode+0x84>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b31      	cmp	r3, #49	; 0x31
 8007fc2:	d9f0      	bls.n	8007fa6 <USB_SetCurrentMode+0x60>
 8007fc4:	e001      	b.n	8007fca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e005      	b.n	8007fd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b32      	cmp	r3, #50	; 0x32
 8007fce:	d101      	bne.n	8007fd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e000      	b.n	8007fd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e009      	b.n	8008014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3340      	adds	r3, #64	; 0x40
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	d9f2      	bls.n	8008000 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800801a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11c      	bne.n	800805a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800802e:	f043 0302 	orr.w	r3, r3, #2
 8008032:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e005      	b.n	8008066 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800806c:	461a      	mov	r2, r3
 800806e:	2300      	movs	r3, #0
 8008070:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008078:	4619      	mov	r1, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	461a      	mov	r2, r3
 8008082:	680b      	ldr	r3, [r1, #0]
 8008084:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10c      	bne.n	80080a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	d104      	bne.n	800809c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008092:	2100      	movs	r1, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f965 	bl	8008364 <USB_SetDevSpeed>
 800809a:	e008      	b.n	80080ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800809c:	2101      	movs	r1, #1
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f960 	bl	8008364 <USB_SetDevSpeed>
 80080a4:	e003      	b.n	80080ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080a6:	2103      	movs	r1, #3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f95b 	bl	8008364 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080ae:	2110      	movs	r1, #16
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f8f3 	bl	800829c <USB_FlushTxFifo>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f91f 	bl	8008304 <USB_FlushRxFifo>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e2:	461a      	mov	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f4:	2300      	movs	r3, #0
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	e043      	b.n	8008182 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800810c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008110:	d118      	bne.n	8008144 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	461a      	mov	r2, r3
 8008126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	e013      	b.n	8008156 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	461a      	mov	r2, r3
 800813c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	e008      	b.n	8008156 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	461a      	mov	r2, r3
 8008152:	2300      	movs	r3, #0
 8008154:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008162:	461a      	mov	r2, r3
 8008164:	2300      	movs	r3, #0
 8008166:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	461a      	mov	r2, r3
 8008176:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800817a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	3301      	adds	r3, #1
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d3b7      	bcc.n	80080fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	e043      	b.n	8008218 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081a6:	d118      	bne.n	80081da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ba:	461a      	mov	r2, r3
 80081bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	e013      	b.n	80081ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d0:	461a      	mov	r2, r3
 80081d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e008      	b.n	80081ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	461a      	mov	r2, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	461a      	mov	r2, r3
 80081fa:	2300      	movs	r3, #0
 80081fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820a:	461a      	mov	r2, r3
 800820c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3301      	adds	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	429a      	cmp	r2, r3
 800821e:	d3b7      	bcc.n	8008190 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800822e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008232:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008240:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d105      	bne.n	8008254 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f043 0210 	orr.w	r2, r3, #16
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699a      	ldr	r2, [r3, #24]
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <USB_DevInit+0x2b4>)
 800825a:	4313      	orrs	r3, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f043 0208 	orr.w	r2, r3, #8
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d105      	bne.n	8008284 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699a      	ldr	r2, [r3, #24]
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <USB_DevInit+0x2b8>)
 800827e:	4313      	orrs	r3, r2
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008290:	b004      	add	sp, #16
 8008292:	4770      	bx	lr
 8008294:	803c3800 	.word	0x803c3800
 8008298:	40000004 	.word	0x40000004

0800829c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a13      	ldr	r2, [pc, #76]	; (8008300 <USB_FlushTxFifo+0x64>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d901      	bls.n	80082bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e01b      	b.n	80082f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	daf2      	bge.n	80082aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	019b      	lsls	r3, r3, #6
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a08      	ldr	r2, [pc, #32]	; (8008300 <USB_FlushTxFifo+0x64>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d901      	bls.n	80082e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e006      	b.n	80082f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d0f0      	beq.n	80082d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	00030d40 	.word	0x00030d40

08008304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3301      	adds	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4a11      	ldr	r2, [pc, #68]	; (8008360 <USB_FlushRxFifo+0x5c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d901      	bls.n	8008322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e018      	b.n	8008354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	daf2      	bge.n	8008310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2210      	movs	r2, #16
 8008332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a08      	ldr	r2, [pc, #32]	; (8008360 <USB_FlushRxFifo+0x5c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d901      	bls.n	8008346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e006      	b.n	8008354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0310 	and.w	r3, r3, #16
 800834e:	2b10      	cmp	r3, #16
 8008350:	d0f0      	beq.n	8008334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	00030d40 	.word	0x00030d40

08008364 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c4:	f043 0302 	orr.w	r3, r3, #2
 80083c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	f003 0301 	and.w	r3, r3, #1
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4a13      	ldr	r2, [pc, #76]	; (8008458 <USB_CoreReset+0x64>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d901      	bls.n	8008412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e01b      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	daf2      	bge.n	8008400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f043 0201 	orr.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a09      	ldr	r2, [pc, #36]	; (8008458 <USB_CoreReset+0x64>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d901      	bls.n	800843c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d0f0      	beq.n	800842a <USB_CoreReset+0x36>

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	00030d40 	.word	0x00030d40

0800845c <memset>:
 800845c:	4402      	add	r2, r0
 800845e:	4603      	mov	r3, r0
 8008460:	4293      	cmp	r3, r2
 8008462:	d100      	bne.n	8008466 <memset+0xa>
 8008464:	4770      	bx	lr
 8008466:	f803 1b01 	strb.w	r1, [r3], #1
 800846a:	e7f9      	b.n	8008460 <memset+0x4>

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	4d0d      	ldr	r5, [pc, #52]	; (80084a4 <__libc_init_array+0x38>)
 8008470:	4c0d      	ldr	r4, [pc, #52]	; (80084a8 <__libc_init_array+0x3c>)
 8008472:	1b64      	subs	r4, r4, r5
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	2600      	movs	r6, #0
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	4d0b      	ldr	r5, [pc, #44]	; (80084ac <__libc_init_array+0x40>)
 800847e:	4c0c      	ldr	r4, [pc, #48]	; (80084b0 <__libc_init_array+0x44>)
 8008480:	f000 f818 	bl	80084b4 <_init>
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	2600      	movs	r6, #0
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f855 3b04 	ldr.w	r3, [r5], #4
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f855 3b04 	ldr.w	r3, [r5], #4
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	0800850c 	.word	0x0800850c
 80084a8:	0800850c 	.word	0x0800850c
 80084ac:	0800850c 	.word	0x0800850c
 80084b0:	08008510 	.word	0x08008510

080084b4 <_init>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr

080084c0 <_fini>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr
