
LCD_i2c_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08009f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  08009f3c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08009f9c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005064  240000d4  08009ffc  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24005138  08009ffc  00025138  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002665a  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000045f9  00000000  00000000  0004679f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b90  00000000  00000000  0004ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000155e  00000000  00000000  0004c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c6e5  00000000  00000000  0004de86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022cef  00000000  00000000  0008a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018b992  00000000  00000000  000ad25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000075e0  00000000  00000000  00238bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  002401cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e3c 	.word	0x08009e3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	08009e3c 	.word	0x08009e3c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f023 030f 	bic.w	r3, r3, #15
 8000718:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	f043 030c 	orr.w	r3, r3, #12
 8000726:	b2db      	uxtb	r3, r3
 8000728:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	b2db      	uxtb	r3, r3
 8000732:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	f043 030c 	orr.w	r3, r3, #12
 800073a:	b2db      	uxtb	r3, r3
 800073c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	b2db      	uxtb	r3, r3
 8000746:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000748:	f107 0208 	add.w	r2, r7, #8
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2304      	movs	r3, #4
 8000752:	214e      	movs	r1, #78	; 0x4e
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <lcd_send_cmd+0x5c>)
 8000756:	f001 fe75 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	240001d8 	.word	0x240001d8

08000768 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af02      	add	r7, sp, #8
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f023 030f 	bic.w	r3, r3, #15
 8000778:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f043 030d 	orr.w	r3, r3, #13
 8000786:	b2db      	uxtb	r3, r3
 8000788:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	f043 0309 	orr.w	r3, r3, #9
 8000790:	b2db      	uxtb	r3, r3
 8000792:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	f043 030d 	orr.w	r3, r3, #13
 800079a:	b2db      	uxtb	r3, r3
 800079c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	f043 0309 	orr.w	r3, r3, #9
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007a8:	f107 0208 	add.w	r2, r7, #8
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2304      	movs	r3, #4
 80007b2:	214e      	movs	r1, #78	; 0x4e
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <lcd_send_data+0x5c>)
 80007b6:	f001 fe45 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	240001d8 	.word	0x240001d8

080007c8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    switch (row)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <lcd_put_cur+0x18>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d005      	beq.n	80007ea <lcd_put_cur+0x22>
 80007de:	e009      	b.n	80007f4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	603b      	str	r3, [r7, #0]
            break;
 80007e8:	e004      	b.n	80007f4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007f0:	603b      	str	r3, [r7, #0]
            break;
 80007f2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff85 	bl	8000708 <lcd_send_cmd>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <lcd_init>:


void lcd_init (void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f000 fe60 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000810:	2030      	movs	r0, #48	; 0x30
 8000812:	f7ff ff79 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000816:	2005      	movs	r0, #5
 8000818:	f000 fe5a 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800081c:	2030      	movs	r0, #48	; 0x30
 800081e:	f7ff ff73 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fe54 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000828:	2030      	movs	r0, #48	; 0x30
 800082a:	f7ff ff6d 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(10);
 800082e:	200a      	movs	r0, #10
 8000830:	f000 fe4e 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000834:	2020      	movs	r0, #32
 8000836:	f7ff ff67 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f000 fe48 	bl	80014d0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f7ff ff61 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(1);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 fe42 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800084c:	2008      	movs	r0, #8
 800084e:	f7ff ff5b 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fe3c 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff55 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fe36 	bl	80014d0 <HAL_Delay>
	HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fe33 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800086a:	2006      	movs	r0, #6
 800086c:	f7ff ff4c 	bl	8000708 <lcd_send_cmd>
	HAL_Delay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fe2d 	bl	80014d0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000876:	200c      	movs	r0, #12
 8000878:	f7ff ff46 	bl	8000708 <lcd_send_cmd>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000888:	e006      	b.n	8000898 <lcd_send_string+0x18>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff68 	bl	8000768 <lcd_send_data>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <lcd_send_string+0xa>
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008b8:	bf00      	nop
 80008ba:	4b48      	ldr	r3, [pc, #288]	; (80009dc <main+0x130>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d004      	beq.n	80008d0 <main+0x24>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	60fa      	str	r2, [r7, #12]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	dcf4      	bgt.n	80008ba <main+0xe>
  if ( timeout < 0 )
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	da01      	bge.n	80008da <main+0x2e>
  {
  Error_Handler();
 80008d6:	f000 faa5 	bl	8000e24 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fd67 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f88f 	bl	8000a00 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <main+0x130>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a3c      	ldr	r2, [pc, #240]	; (80009dc <main+0x130>)
 80008ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <main+0x130>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fce1 	bl	80022c8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000906:	2100      	movs	r1, #0
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fcf7 	bl	80022fc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000914:	bf00      	nop
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <main+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d104      	bne.n	800092c <main+0x80>
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	60fa      	str	r2, [r7, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dcf4      	bgt.n	8000916 <main+0x6a>
if ( timeout < 0 )
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	da01      	bge.n	8000936 <main+0x8a>
{
Error_Handler();
 8000932:	f000 fa77 	bl	8000e24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 f9eb 	bl	8000d10 <MX_GPIO_Init>
  MX_ETH_Init();
 800093a:	f000 f8df 	bl	8000afc <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800093e:	f000 f9b5 	bl	8000cac <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000942:	f000 f927 	bl	8000b94 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000946:	f000 f965 	bl	8000c14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800094a:	f006 fcef 	bl	800732c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800094e:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <main+0x134>)
 8000950:	2100      	movs	r1, #0
 8000952:	4824      	ldr	r0, [pc, #144]	; (80009e4 <main+0x138>)
 8000954:	f006 fd34 	bl	80073c0 <osThreadNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <main+0x13c>)
 800095c:	6013      	str	r3, [r2, #0]

  /* creation of taskLCD */
  taskLCDHandle = osThreadNew(startLCD, NULL, &taskLCD_attributes);
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <main+0x140>)
 8000960:	2100      	movs	r1, #0
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <main+0x144>)
 8000964:	f006 fd2c 	bl	80073c0 <osThreadNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <main+0x148>)
 800096c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800096e:	f006 fd01 	bl	8007374 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (int i=0;i<128;i++)
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	e02c      	b.n	80009d2 <main+0x126>
	  {
		  lcd_put_cur(row, col);
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <main+0x14c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <main+0x150>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff20 	bl	80007c8 <lcd_put_cur>

		  lcd_send_data(i+48);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3330      	adds	r3, #48	; 0x30
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fee9 	bl	8000768 <lcd_send_data>

		  col++;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <main+0x150>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <main+0x150>)
 800099e:	6013      	str	r3, [r2, #0]

		  if (col > 15) {row++; col = 0;}
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <main+0x150>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	dd07      	ble.n	80009b8 <main+0x10c>
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x14c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <main+0x14c>)
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x150>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
		  if (row > 1) row=0;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <main+0x14c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	dd02      	ble.n	80009c6 <main+0x11a>
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <main+0x14c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]

		  HAL_Delay(250);
 80009c6:	20fa      	movs	r0, #250	; 0xfa
 80009c8:	f000 fd82 	bl	80014d0 <HAL_Delay>
	  for (int i=0;i<128;i++)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b7f      	cmp	r3, #127	; 0x7f
 80009d6:	ddcf      	ble.n	8000978 <main+0xcc>
 80009d8:	e7cb      	b.n	8000972 <main+0xc6>
 80009da:	bf00      	nop
 80009dc:	58024400 	.word	0x58024400
 80009e0:	08009ea8 	.word	0x08009ea8
 80009e4:	08000ddd 	.word	0x08000ddd
 80009e8:	240007cc 	.word	0x240007cc
 80009ec:	08009ecc 	.word	0x08009ecc
 80009f0:	08000ded 	.word	0x08000ded
 80009f4:	240007d0 	.word	0x240007d0
 80009f8:	240007d4 	.word	0x240007d4
 80009fc:	240007d8 	.word	0x240007d8

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09c      	sub	sp, #112	; 0x70
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	224c      	movs	r2, #76	; 0x4c
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 f9da 	bl	8009dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f009 f9d4 	bl	8009dc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a20:	2004      	movs	r0, #4
 8000a22:	f002 f9f3 	bl	8002e0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <SystemClock_Config+0xf4>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <SystemClock_Config+0xf4>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <SystemClock_Config+0xf4>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <SystemClock_Config+0xf8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <SystemClock_Config+0xf8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <SystemClock_Config+0xf8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5c:	bf00      	nop
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <SystemClock_Config+0xf8>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6a:	d1f8      	bne.n	8000a5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000a82:	2312      	movs	r3, #18
 8000a84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a92:	230c      	movs	r3, #12
 8000a94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a96:	2302      	movs	r3, #2
 8000a98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fa1b 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ab0:	f000 f9b8 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	233f      	movs	r3, #63	; 0x3f
 8000ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad2:	2340      	movs	r3, #64	; 0x40
 8000ad4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fe5a 	bl	8003794 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ae6:	f000 f99d 	bl	8000e24 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3770      	adds	r7, #112	; 0x70
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58000400 	.word	0x58000400
 8000af8:	58024800 	.word	0x58024800

08000afc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_ETH_Init+0x84>)
 8000b04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b14:	22e1      	movs	r2, #225	; 0xe1
 8000b16:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b2c:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <MX_ETH_Init+0x88>)
 8000b2e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <MX_ETH_Init+0x8c>)
 8000b3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_ETH_Init+0x90>)
 8000b40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_ETH_Init+0x80>)
 8000b4c:	f000 fde8 	bl	8001720 <HAL_ETH_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b56:	f000 f965 	bl	8000e24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b5a:	2238      	movs	r2, #56	; 0x38
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_ETH_Init+0x94>)
 8000b60:	f009 f932 	bl	8009dc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_ETH_Init+0x94>)
 8000b66:	2221      	movs	r2, #33	; 0x21
 8000b68:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_ETH_Init+0x94>)
 8000b6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b70:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_ETH_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000128 	.word	0x24000128
 8000b80:	40028000 	.word	0x40028000
 8000b84:	240007dc 	.word	0x240007dc
 8000b88:	24000074 	.word	0x24000074
 8000b8c:	24000014 	.word	0x24000014
 8000b90:	240000f0 	.word	0x240000f0

08000b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bd0:	f001 fba8 	bl	8002324 <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f000 f923 	bl	8000e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000be2:	f001 ff33 	bl	8002a4c <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 f91a 	bl	8000e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C1_Init+0x74>)
 8000bf4:	f001 ff75 	bl	8002ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 f911 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	240001d8 	.word	0x240001d8
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	00909fce 	.word	0x00909fce

08000c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_USART2_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c5e:	f004 ff51 	bl	8005b04 <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f8dc 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c70:	f005 ff53 	bl	8006b1a <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f8d3 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c82:	f005 ff88 	bl	8006b96 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f8ca 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_USART2_UART_Init+0x90>)
 8000c92:	f005 ff09 	bl	8006aa8 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f8c2 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400022c 	.word	0x2400022c
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb8:	2209      	movs	r2, #9
 8000cba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	f001 ff41 	bl	8002b7a <HAL_PCD_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cfe:	f000 f891 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	240002c0 	.word	0x240002c0
 8000d0c:	40080000 	.word	0x40080000

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0xc8>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400

08000ddc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f006 fb7d 	bl	80074e4 <osDelay>
 8000dea:	e7fb      	b.n	8000de4 <StartDefaultTask+0x8>

08000dec <startLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLCD */
void startLCD(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLCD */
  /* Infinite loop */
	lcd_init();
 8000df4:	f7ff fd07 	bl	8000806 <lcd_init>
  for(;;)
  {
	lcd_put_cur(0, 0);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fce4 	bl	80007c8 <lcd_put_cur>
	lcd_send_string ("HELLO WORLD");
 8000e00:	4806      	ldr	r0, [pc, #24]	; (8000e1c <startLCD+0x30>)
 8000e02:	f7ff fd3d 	bl	8000880 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fcdd 	bl	80007c8 <lcd_put_cur>

	lcd_send_string("from VIC");
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <startLCD+0x34>)
 8000e10:	f7ff fd36 	bl	8000880 <lcd_send_string>
    osDelay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f006 fb65 	bl	80074e4 <osDelay>
	lcd_put_cur(0, 0);
 8000e1a:	e7ed      	b.n	8000df8 <startLCD+0xc>
 8000e1c:	08009e68 	.word	0x08009e68
 8000e20:	08009e74 	.word	0x08009e74

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x38>)
 8000e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_MspInit+0x38>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_MspInit+0x38>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	210f      	movs	r1, #15
 8000e58:	f06f 0001 	mvn.w	r0, #1
 8000e5c:	f000 fc39 	bl	80016d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58024400 	.word	0x58024400

08000e6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	; 0x38
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a59      	ldr	r2, [pc, #356]	; (8000ff0 <HAL_ETH_MspInit+0x184>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 80ab 	bne.w	8000fe6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e90:	4b58      	ldr	r3, [pc, #352]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e96:	4a57      	ldr	r2, [pc, #348]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eae:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb4:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ecc:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed2:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a31      	ldr	r2, [pc, #196]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f62:	2332      	movs	r3, #50	; 0x32
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f72:	230b      	movs	r3, #11
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <HAL_ETH_MspInit+0x18c>)
 8000f7e:	f000 fff3 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f82:	2386      	movs	r3, #134	; 0x86
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <HAL_ETH_MspInit+0x190>)
 8000f9e:	f000 ffe3 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb4:	230b      	movs	r3, #11
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <HAL_ETH_MspInit+0x194>)
 8000fc0:	f000 ffd2 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fc4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_ETH_MspInit+0x198>)
 8000fe2:	f000 ffc1 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3738      	adds	r7, #56	; 0x38
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40028000 	.word	0x40028000
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020800 	.word	0x58020800
 8000ffc:	58020000 	.word	0x58020000
 8001000:	58020400 	.word	0x58020400
 8001004:	58021800 	.word	0x58021800

08001008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ba      	sub	sp, #232	; 0xe8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	22c0      	movs	r2, #192	; 0xc0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fecd 	bl	8009dc8 <memset>
  if(hi2c->Instance==I2C1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_I2C_MspInit+0xc8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d146      	bne.n	80010c6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001038:	f04f 0208 	mov.w	r2, #8
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ff2c 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800105a:	f7ff fee3 	bl	8000e24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001084:	2312      	movs	r3, #18
 8001086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001096:	2304      	movs	r3, #4
 8001098:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <HAL_I2C_MspInit+0xd0>)
 80010a4:	f000 ff60 	bl	8001f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 80010aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_I2C_MspInit+0xcc>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	37e8      	adds	r7, #232	; 0xe8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40005400 	.word	0x40005400
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020400 	.word	0x58020400

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0bc      	sub	sp, #240	; 0xf0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f008 fe63 	bl	8009dc8 <memset>
  if(huart->Instance==USART2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d169      	bne.n	80011e0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800110c:	f04f 0202 	mov.w	r2, #2
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fec2 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800112e:	f7ff fe79 	bl	8000e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001138:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <HAL_UART_MspInit+0x110>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800118c:	2308      	movs	r3, #8
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ae:	4619      	mov	r1, r3
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <HAL_UART_MspInit+0x114>)
 80011b2:	f000 fed9 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b6:	2320      	movs	r3, #32
 80011b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ce:	2307      	movs	r3, #7
 80011d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <HAL_UART_MspInit+0x118>)
 80011dc:	f000 fec4 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	37f0      	adds	r7, #240	; 0xf0
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004400 	.word	0x40004400
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	58020c00 	.word	0x58020c00

080011f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ba      	sub	sp, #232	; 0xe8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	22c0      	movs	r2, #192	; 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f008 fdd5 	bl	8009dc8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a38      	ldr	r2, [pc, #224]	; (8001304 <HAL_PCD_MspInit+0x10c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d169      	bne.n	80012fc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001228:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001238:	2312      	movs	r3, #18
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001240:	2303      	movs	r3, #3
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800124e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fe23 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800126c:	f7ff fdda 	bl	8000e24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001270:	f001 fe26 	bl	8002ec0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_PCD_MspInit+0x110>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <HAL_PCD_MspInit+0x110>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_PCD_MspInit+0x110>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001292:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012ac:	230a      	movs	r3, #10
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <HAL_PCD_MspInit+0x114>)
 80012ba:	f000 fe55 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_PCD_MspInit+0x114>)
 80012da:	f000 fe45 	bl	8001f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_PCD_MspInit+0x110>)
 80012e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_PCD_MspInit+0x110>)
 80012e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_PCD_MspInit+0x110>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	37e8      	adds	r7, #232	; 0xe8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40080000 	.word	0x40080000
 8001308:	58024400 	.word	0x58024400
 800130c:	58020000 	.word	0x58020000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f8a6 	bl	8001490 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001344:	f008 f912 	bl	800956c <xTaskGetSchedulerState>
 8001348:	4603      	mov	r3, r0
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800134e:	f006 fd73 	bl	8007e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800135c:	f7ff f93e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001362:	490d      	ldr	r1, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001378:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001386:	f008 fd27 	bl	8009dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff fa8f 	bl	80008ac <main>
  bx  lr
 800138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001394:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001398:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800139c:	08009f28 	.word	0x08009f28
  ldr r2, =_sbss
 80013a0:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80013a4:	24005138 	.word	0x24005138

080013a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC3_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f982 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013b8:	f002 fba2 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_Init+0x68>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	4913      	ldr	r1, [pc, #76]	; (8001418 <HAL_Init+0x6c>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_Init+0x68>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_Init+0x6c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_Init+0x70>)
 80013ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <HAL_Init+0x74>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f814 	bl	8001424 <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e002      	b.n	800140c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001406:	f7ff fd13 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	58024400 	.word	0x58024400
 8001418:	08009e98 	.word	0x08009e98
 800141c:	24000004 	.word	0x24000004
 8001420:	24000000 	.word	0x24000000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_InitTick+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e021      	b.n	800147c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_InitTick+0x64>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_InitTick+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f959 	bl	8001706 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f931 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x68>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2400000c 	.word	0x2400000c
 8001488:	24000000 	.word	0x24000000
 800148c:	24000008 	.word	0x24000008

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2400000c 	.word	0x2400000c
 80014b4:	240007e4 	.word	0x240007e4

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	240007e4 	.word	0x240007e4

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2400000c 	.word	0x2400000c

08001518 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetREVID+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1b      	lsrs	r3, r3, #16
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	5c001000 	.word	0x5c001000

08001530 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001540:	4904      	ldr	r1, [pc, #16]	; (8001554 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	58000400 	.word	0x58000400

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	05fa0000 	.word	0x05fa0000

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff47 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff5e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffb2 	bl	8001678 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0cf      	b.n	80018d2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2223      	movs	r2, #35	; 0x23
 8001740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fb91 	bl	8000e6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <HAL_ETH_Init+0x1bc>)
 800174c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001750:	4a62      	ldr	r2, [pc, #392]	; (80018dc <HAL_ETH_Init+0x1bc>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800175a:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_ETH_Init+0x1bc>)
 800175c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7a1b      	ldrb	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fedd 	bl	8001530 <HAL_SYSCFG_ETHInterfaceSelect>
 8001776:	e003      	b.n	8001780 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001778:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800177c:	f7ff fed8 	bl	8001530 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001780:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <HAL_ETH_Init+0x1c0>)
 8001782:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800179a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800179c:	f7ff fe8c 	bl	80014b8 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a2:	e011      	b.n	80017c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017a4:	f7ff fe88 	bl	80014b8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b2:	d909      	bls.n	80017c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	22e0      	movs	r2, #224	; 0xe0
 80017c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e084      	b.n	80018d2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e4      	bne.n	80017a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f886 	bl	80018ec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017e0:	f002 fb08 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_ETH_Init+0x1c4>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa71 	bl	8001ce0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001806:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800180a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001816:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	22e0      	movs	r2, #224	; 0xe0
 8001836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e049      	b.n	80018d2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_ETH_Init+0x1c8>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6952      	ldr	r2, [r2, #20]
 8001852:	0051      	lsls	r1, r2, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800185e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fad9 	bl	8001e1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fb1f 	bl	8001eac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	3305      	adds	r3, #5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	021a      	lsls	r2, r3, #8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	3303      	adds	r3, #3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	061a      	lsls	r2, r3, #24
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	3302      	adds	r3, #2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2210      	movs	r2, #16
 80018cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58000400 	.word	0x58000400
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	ffff8001 	.word	0xffff8001

080018ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001904:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001906:	f002 fa75 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 800190a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d908      	bls.n	8001926 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d804      	bhi.n	8001926 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e027      	b.n	8001976 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d908      	bls.n	8001940 <HAL_ETH_SetMDIOClockRange+0x54>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d204      	bcs.n	8001940 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e01a      	b.n	8001976 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d303      	bcc.n	8001950 <HAL_ETH_SetMDIOClockRange+0x64>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d911      	bls.n	8001974 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d908      	bls.n	800196a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_ETH_SetMDIOClockRange+0xac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d804      	bhi.n	800196a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e005      	b.n	8001976 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e000      	b.n	8001976 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001974:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	01312cff 	.word	0x01312cff
 800198c:	02160ebf 	.word	0x02160ebf
 8001990:	03938700 	.word	0x03938700
 8001994:	05f5e0ff 	.word	0x05f5e0ff
 8001998:	08f0d17f 	.word	0x08f0d17f

0800199c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	7b1b      	ldrb	r3, [r3, #12]
 80019bc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7b5b      	ldrb	r3, [r3, #13]
 80019c4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7b9b      	ldrb	r3, [r3, #14]
 80019cc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7bdb      	ldrb	r3, [r3, #15]
 80019d4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	7c12      	ldrb	r2, [r2, #16]
 80019dc:	2a00      	cmp	r2, #0
 80019de:	d102      	bne.n	80019e6 <ETH_SetMACConfig+0x4a>
 80019e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019e4:	e000      	b.n	80019e8 <ETH_SetMACConfig+0x4c>
 80019e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	7c52      	ldrb	r2, [r2, #17]
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d102      	bne.n	80019f8 <ETH_SetMACConfig+0x5c>
 80019f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f6:	e000      	b.n	80019fa <ETH_SetMACConfig+0x5e>
 80019f8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	7c9b      	ldrb	r3, [r3, #18]
 8001a00:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a02:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a08:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	7f1b      	ldrb	r3, [r3, #28]
 8001a14:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	7f5b      	ldrb	r3, [r3, #29]
 8001a1c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	7f92      	ldrb	r2, [r2, #30]
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	d102      	bne.n	8001a2e <ETH_SetMACConfig+0x92>
 8001a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2c:	e000      	b.n	8001a30 <ETH_SetMACConfig+0x94>
 8001a2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	7fdb      	ldrb	r3, [r3, #31]
 8001a36:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	d102      	bne.n	8001a4a <ETH_SetMACConfig+0xae>
 8001a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a48:	e000      	b.n	8001a4c <ETH_SetMACConfig+0xb0>
 8001a4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a4c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a5a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a5c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <ETH_SetMACConfig+0x22c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	430b      	orrs	r3, r1
 8001a78:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a86:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a90:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a9a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d102      	bne.n	8001aae <ETH_SetMACConfig+0x112>
 8001aa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aac:	e000      	b.n	8001ab0 <ETH_SetMACConfig+0x114>
 8001aae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ab0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <ETH_SetMACConfig+0x230>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	430b      	orrs	r3, r1
 8001acc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <ETH_SetMACConfig+0x234>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001af8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001afe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d101      	bne.n	8001b0e <ETH_SetMACConfig+0x172>
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	e000      	b.n	8001b10 <ETH_SetMACConfig+0x174>
 8001b0e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b10:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b22:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b38:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b40:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	f023 0103 	bic.w	r1, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b66:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d101      	bne.n	8001b8a <ETH_SetMACConfig+0x1ee>
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	e000      	b.n	8001b8c <ETH_SetMACConfig+0x1f0>
 8001b8a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b94:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b9e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001bac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	00048083 	.word	0x00048083
 8001bcc:	c0f88000 	.word	0xc0f88000
 8001bd0:	fffffef0 	.word	0xfffffef0

08001bd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <ETH_SetDMAConfig+0xf8>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6811      	ldr	r1, [r2, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bfa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7b1b      	ldrb	r3, [r3, #12]
 8001c0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <ETH_SetDMAConfig+0xfc>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c2c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7b5b      	ldrb	r3, [r3, #13]
 8001c32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <ETH_SetDMAConfig+0x100>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	430b      	orrs	r3, r1
 8001c54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	7d1b      	ldrb	r3, [r3, #20]
 8001c64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	7f5b      	ldrb	r3, [r3, #29]
 8001c6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <ETH_SetDMAConfig+0x104>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c8e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	7f1b      	ldrb	r3, [r3, #28]
 8001c96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <ETH_SetDMAConfig+0x108>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	ffff87fd 	.word	0xffff87fd
 8001cd0:	ffff2ffe 	.word	0xffff2ffe
 8001cd4:	fffec000 	.word	0xfffec000
 8001cd8:	ffc0efef 	.word	0xffc0efef
 8001cdc:	7fc0ffff 	.word	0x7fc0ffff

08001ce0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0a4      	sub	sp, #144	; 0x90
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d62:	2300      	movs	r3, #0
 8001d64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fde6 	bl	800199c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fee1 	bl	8001bd4 <ETH_SetDMAConfig>
}
 8001e12:	bf00      	nop
 8001e14:	3790      	adds	r7, #144	; 0x90
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e01d      	b.n	8001e64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	3206      	adds	r2, #6
 8001e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d9de      	bls.n	8001e28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e023      	b.n	8001f02 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	3212      	adds	r2, #18
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d9d8      	bls.n	8001eba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2303      	movs	r3, #3
 8001f32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_GPIO_Init+0x234>)
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f7a:	e194      	b.n	80022a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8186 	beq.w	80022a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x44>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	69b9      	ldr	r1, [r7, #24]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80e0 	beq.w	80022a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x238>)
 80020e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e6:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_GPIO_Init+0x238>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_GPIO_Init+0x238>)
 80020f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fe:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_GPIO_Init+0x23c>)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_GPIO_Init+0x240>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d052      	beq.n	80021d0 <HAL_GPIO_Init+0x268>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_GPIO_Init+0x244>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d031      	beq.n	8002196 <HAL_GPIO_Init+0x22e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_GPIO_Init+0x248>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <HAL_GPIO_Init+0x22a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_GPIO_Init+0x24c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d025      	beq.n	800218e <HAL_GPIO_Init+0x226>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_GPIO_Init+0x250>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <HAL_GPIO_Init+0x222>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_GPIO_Init+0x254>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x21e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_GPIO_Init+0x258>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_GPIO_Init+0x25c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x216>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_GPIO_Init+0x260>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x212>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_GPIO_Init+0x264>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x20e>
 8002172:	2309      	movs	r3, #9
 8002174:	e02d      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 8002176:	230a      	movs	r3, #10
 8002178:	e02b      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 800217a:	2308      	movs	r3, #8
 800217c:	e029      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 800217e:	2307      	movs	r3, #7
 8002180:	e027      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 8002182:	2306      	movs	r3, #6
 8002184:	e025      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 8002186:	2305      	movs	r3, #5
 8002188:	e023      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 800218a:	2304      	movs	r3, #4
 800218c:	e021      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 800218e:	2303      	movs	r3, #3
 8002190:	e01f      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 8002192:	2302      	movs	r3, #2
 8002194:	e01d      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 8002196:	2301      	movs	r3, #1
 8002198:	e01b      	b.n	80021d2 <HAL_GPIO_Init+0x26a>
 800219a:	bf00      	nop
 800219c:	58000080 	.word	0x58000080
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58000400 	.word	0x58000400
 80021a8:	58020000 	.word	0x58020000
 80021ac:	58020400 	.word	0x58020400
 80021b0:	58020800 	.word	0x58020800
 80021b4:	58020c00 	.word	0x58020c00
 80021b8:	58021000 	.word	0x58021000
 80021bc:	58021400 	.word	0x58021400
 80021c0:	58021800 	.word	0x58021800
 80021c4:	58021c00 	.word	0x58021c00
 80021c8:	58022000 	.word	0x58022000
 80021cc:	58022400 	.word	0x58022400
 80021d0:	2300      	movs	r3, #0
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e2:	4938      	ldr	r1, [pc, #224]	; (80022c4 <HAL_GPIO_Init+0x35c>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3301      	adds	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f ae63 	bne.w	8001f7c <HAL_GPIO_Init+0x14>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3724      	adds	r7, #36	; 0x24
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	58000400 	.word	0x58000400

080022c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_HSEM_FastTake+0x2c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3320      	adds	r3, #32
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_HSEM_FastTake+0x30>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	58026400 	.word	0x58026400
 80022f8:	80000300 	.word	0x80000300

080022fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <HAL_HSEM_Release+0x24>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58026400 	.word	0x58026400

08002324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07f      	b.n	8002436 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fe5c 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e006      	b.n	80023ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d104      	bne.n	80023be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_I2C_Init+0x11c>)
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	02008000 	.word	0x02008000

08002444 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 80da 	bne.w	800261a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_I2C_Master_Transmit+0x30>
 8002470:	2302      	movs	r3, #2
 8002472:	e0d3      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800247c:	f7ff f81c 	bl	80014b8 <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2319      	movs	r3, #25
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8f0 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0be      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2221      	movs	r2, #33	; 0x21
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2210      	movs	r2, #16
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	893a      	ldrh	r2, [r7, #8]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	d90e      	bls.n	80024ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_I2C_Master_Transmit+0x1e0>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fa7e 	bl	80029e8 <I2C_TransferConfig>
 80024ec:	e06c      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_I2C_Master_Transmit+0x1e0>)
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fa6d 	bl	80029e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800250e:	e05b      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6a39      	ldr	r1, [r7, #32]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8fc 	bl	8002712 <I2C_WaitOnTXISFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e07b      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d034      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b00      	cmp	r3, #0
 8002564:	d130      	bne.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f87f 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e04d      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d90e      	bls.n	80025a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa21 	bl	80029e8 <I2C_TransferConfig>
 80025a6:	e00f      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa10 	bl	80029e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d19e      	bne.n	8002510 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f8e2 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01a      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_I2C_Master_Transmit+0x1e4>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	80002000 	.word	0x80002000
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d007      	beq.n	8002668 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	619a      	str	r2, [r3, #24]
  }
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002684:	e031      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d02d      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe ff13 	bl	80014b8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d122      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d113      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d0be      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271e:	e033      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f87f 	bl	8002828 <I2C_IsErrorOccurred>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e031      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d025      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7fe febc 	bl	80014b8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11a      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d013      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1c4      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e02f      	b.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f838 	bl	8002828 <I2C_IsErrorOccurred>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e02d      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7fe fe79 	bl	80014b8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11a      	bne.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d013      	beq.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e007      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d1c8      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d068      	beq.n	8002926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800285c:	e049      	b.n	80028f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d045      	beq.n	80028f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7fe fe27 	bl	80014b8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_IsErrorOccurred+0x54>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d13a      	bne.n	80028f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800288e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289e:	d121      	bne.n	80028e4 <I2C_IsErrorOccurred+0xbc>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a6:	d01d      	beq.n	80028e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d01a      	beq.n	80028e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028be:	f7fe fdfb 	bl	80014b8 <HAL_GetTick>
 80028c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c4:	e00e      	b.n	80028e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028c6:	f7fe fdf7 	bl	80014b8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b19      	cmp	r3, #25
 80028d2:	d907      	bls.n	80028e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80028e2:	e006      	b.n	80028f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d1e9      	bne.n	80028c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <I2C_IsErrorOccurred+0xe0>
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0aa      	beq.n	800285e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2220      	movs	r2, #32
 8002916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fe45 	bl	800262c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <I2C_IsErrorOccurred+0x1bc>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	4613      	mov	r3, r2
 80029f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	0d5b      	lsrs	r3, r3, #21
 8002a22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <I2C_TransferConfig+0x60>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	ea02 0103 	and.w	r1, r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	03ff63ff 	.word	0x03ff63ff

08002a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d138      	bne.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e032      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d139      	bne.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e033      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7c:	b08f      	sub	sp, #60	; 0x3c
 8002b7e:	af0a      	add	r7, sp, #40	; 0x28
 8002b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e116      	b.n	8002dba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fb26 	bl	80011f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 f8de 	bl	8006d8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	687e      	ldr	r6, [r7, #4]
 8002bd8:	466d      	mov	r5, sp
 8002bda:	f106 0410 	add.w	r4, r6, #16
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bee:	1d33      	adds	r3, r6, #4
 8002bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f004 f85c 	bl	8006cb0 <USB_CoreInit>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0d7      	b.n	8002dba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 f8cc 	bl	8006dae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e04a      	b.n	8002cb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	333d      	adds	r3, #61	; 0x3d
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	333c      	adds	r3, #60	; 0x3c
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	b298      	uxth	r0, r3
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3356      	adds	r3, #86	; 0x56
 8002c58:	4602      	mov	r2, r0
 8002c5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3340      	adds	r3, #64	; 0x40
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3348      	adds	r3, #72	; 0x48
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334c      	adds	r3, #76	; 0x4c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3af      	bcc.n	8002c1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e044      	b.n	8002d4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3b5      	bcc.n	8002cc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	687e      	ldr	r6, [r7, #4]
 8002d5e:	466d      	mov	r5, sp
 8002d60:	f106 0410 	add.w	r4, r6, #16
 8002d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d74:	1d33      	adds	r3, r6, #4
 8002d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	f004 f865 	bl	8006e48 <USB_DevInit>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e014      	b.n	8002dba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f80b 	bl	8002dc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 fa23 	bl	80071fe <USB_DevDisconnect>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_PCDEx_ActivateLPM+0x44>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	10000003 	.word	0x10000003

08002e0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d00a      	beq.n	8002e36 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e040      	b.n	8002eb4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e03e      	b.n	8002eb4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e36:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e3e:	491f      	ldr	r1, [pc, #124]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e46:	f7fe fb37 	bl	80014b8 <HAL_GetTick>
 8002e4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e4c:	e009      	b.n	8002e62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e4e:	f7fe fb33 	bl	80014b8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e5c:	d901      	bls.n	8002e62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e028      	b.n	8002eb4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b1e      	cmp	r3, #30
 8002e74:	d008      	beq.n	8002e88 <HAL_PWREx_ConfigSupply+0x7c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b2e      	cmp	r3, #46	; 0x2e
 8002e7a:	d005      	beq.n	8002e88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b1d      	cmp	r3, #29
 8002e80:	d002      	beq.n	8002e88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b2d      	cmp	r3, #45	; 0x2d
 8002e86:	d114      	bne.n	8002eb2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e88:	f7fe fb16 	bl	80014b8 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e8e:	e009      	b.n	8002ea4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e90:	f7fe fb12 	bl	80014b8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9e:	d901      	bls.n	8002ea4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e007      	b.n	8002eb4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	58024800 	.word	0x58024800

08002ec0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	58024800 	.word	0x58024800

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f000 bc48 	b.w	8003784 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8088 	beq.w	8003012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b99      	ldr	r3, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f0c:	4b96      	ldr	r3, [pc, #600]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d007      	beq.n	8002f28 <HAL_RCC_OscConfig+0x48>
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	d111      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06d      	beq.n	8003010 <HAL_RCC_OscConfig+0x130>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d169      	bne.n	8003010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f000 bc21 	b.w	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x7a>
 8002f4c:	4b86      	ldr	r3, [pc, #536]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a85      	ldr	r2, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x9c>
 8002f62:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a74      	ldr	r2, [pc, #464]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd8>
 8002fa0:	4b71      	ldr	r3, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a70      	ldr	r2, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b6e      	ldr	r3, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa7a 	bl	80014b8 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fa76 	bl	80014b8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e3d4      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fa66 	bl	80014b8 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fa62 	bl	80014b8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e3c0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003002:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x110>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80ca 	beq.w	80031b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003020:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003028:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_RCC_OscConfig+0x166>
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2b18      	cmp	r3, #24
 800303a:	d156      	bne.n	80030ea <HAL_RCC_OscConfig+0x20a>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d151      	bne.n	80030ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003046:	4b48      	ldr	r3, [pc, #288]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e392      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0219 	bic.w	r2, r3, #25
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	493f      	ldr	r1, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fa22 	bl	80014b8 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fa1e 	bl	80014b8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e37c      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	f7fe fa3f 	bl	8001518 <HAL_GetREVID>
 800309a:	4603      	mov	r3, r0
 800309c:	f241 0203 	movw	r2, #4099	; 0x1003
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d817      	bhi.n	80030d4 <HAL_RCC_OscConfig+0x1f4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d108      	bne.n	80030be <HAL_RCC_OscConfig+0x1de>
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	e07a      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	031b      	lsls	r3, r3, #12
 80030cc:	4926      	ldr	r1, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d2:	e06f      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	4921      	ldr	r1, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	e064      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d047      	beq.n	8003182 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0219 	bic.w	r2, r3, #25
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	491a      	ldr	r1, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f9d8 	bl	80014b8 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310c:	f7fe f9d4 	bl	80014b8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e332      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	f7fe f9f5 	bl	8001518 <HAL_GetREVID>
 800312e:	4603      	mov	r3, r0
 8003130:	f241 0203 	movw	r2, #4099	; 0x1003
 8003134:	4293      	cmp	r3, r2
 8003136:	d819      	bhi.n	800316c <HAL_RCC_OscConfig+0x28c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d108      	bne.n	8003152 <HAL_RCC_OscConfig+0x272>
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 800314a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314e:	6053      	str	r3, [r2, #4]
 8003150:	e030      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	4901      	ldr	r1, [pc, #4]	; (8003168 <HAL_RCC_OscConfig+0x288>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
 8003166:	e025      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
 8003168:	58024400 	.word	0x58024400
 800316c:	4b9a      	ldr	r3, [pc, #616]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4997      	ldr	r1, [pc, #604]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	e018      	b.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a94      	ldr	r2, [pc, #592]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f993 	bl	80014b8 <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe f98f 	bl	80014b8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e2ed      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031a8:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a9 	beq.w	8003314 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031cc:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d007      	beq.n	80031e8 <HAL_RCC_OscConfig+0x308>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b18      	cmp	r3, #24
 80031dc:	d13a      	bne.n	8003254 <HAL_RCC_OscConfig+0x374>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d135      	bne.n	8003254 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x320>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e2c1      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003200:	f7fe f98a 	bl	8001518 <HAL_GetREVID>
 8003204:	4603      	mov	r3, r0
 8003206:	f241 0203 	movw	r2, #4099	; 0x1003
 800320a:	4293      	cmp	r3, r2
 800320c:	d817      	bhi.n	800323e <HAL_RCC_OscConfig+0x35e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	2b20      	cmp	r3, #32
 8003214:	d108      	bne.n	8003228 <HAL_RCC_OscConfig+0x348>
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003224:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003226:	e075      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003228:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	069b      	lsls	r3, r3, #26
 8003236:	4968      	ldr	r1, [pc, #416]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800323c:	e06a      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800323e:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	4962      	ldr	r1, [pc, #392]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003252:	e05f      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d042      	beq.n	80032e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe f926 	bl	80014b8 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003270:	f7fe f922 	bl	80014b8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e280      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800328e:	f7fe f943 	bl	8001518 <HAL_GetREVID>
 8003292:	4603      	mov	r3, r0
 8003294:	f241 0203 	movw	r2, #4099	; 0x1003
 8003298:	4293      	cmp	r3, r2
 800329a:	d817      	bhi.n	80032cc <HAL_RCC_OscConfig+0x3ec>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d108      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3d6>
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	4944      	ldr	r1, [pc, #272]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
 80032ca:	e023      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	493f      	ldr	r1, [pc, #252]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
 80032e0:	e018      	b.n	8003314 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80032e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe f8e3 	bl	80014b8 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032f6:	f7fe f8df 	bl	80014b8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e23d      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d036      	beq.n	800338e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe f8c0 	bl	80014b8 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fe f8bc 	bl	80014b8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e21a      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x45c>
 800335a:	e018      	b.n	800338e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fe f8a6 	bl	80014b8 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003370:	f7fe f8a2 	bl	80014b8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e200      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d039      	beq.n	800340e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01c      	beq.n	80033dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033ae:	f7fe f883 	bl	80014b8 <HAL_GetTick>
 80033b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b6:	f7fe f87f 	bl	80014b8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1dd      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
 80033d4:	e01b      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033dc:	4b9b      	ldr	r3, [pc, #620]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a9a      	ldr	r2, [pc, #616]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80033e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e8:	f7fe f866 	bl	80014b8 <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f0:	f7fe f862 	bl	80014b8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1c0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003402:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8081 	beq.w	800351e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800341c:	4b8c      	ldr	r3, [pc, #560]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a8b      	ldr	r2, [pc, #556]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fe f846 	bl	80014b8 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fe f842 	bl	80014b8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1a0      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003442:	4b83      	ldr	r3, [pc, #524]	; (8003650 <HAL_RCC_OscConfig+0x770>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x584>
 8003456:	4b7d      	ldr	r3, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a7c      	ldr	r2, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	e02d      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10c      	bne.n	8003486 <HAL_RCC_OscConfig+0x5a6>
 800346c:	4b77      	ldr	r3, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a76      	ldr	r2, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	e01c      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5c8>
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a6b      	ldr	r2, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x5e0>
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a64      	ldr	r2, [pc, #400]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fd fff6 	bl	80014b8 <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fd fff2 	bl	80014b8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e14e      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034e6:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RCC_OscConfig+0x5f0>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd ffe0 	bl	80014b8 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd ffdc 	bl	80014b8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e138      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 812d 	beq.w	8003782 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003528:	4b48      	ldr	r3, [pc, #288]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003530:	2b18      	cmp	r3, #24
 8003532:	f000 80bd 	beq.w	80036b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 809e 	bne.w	800367c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ffb4 	bl	80014b8 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd ffb0 	bl	80014b8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e10e      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003576:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_RCC_OscConfig+0x774>)
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	430a      	orrs	r2, r1
 8003586:	4931      	ldr	r1, [pc, #196]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	628b      	str	r3, [r1, #40]	; 0x28
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	3b01      	subs	r3, #1
 8003592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	3b01      	subs	r3, #1
 800359c:	025b      	lsls	r3, r3, #9
 800359e:	b29b      	uxth	r3, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	3b01      	subs	r3, #1
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035bc:	4923      	ldr	r1, [pc, #140]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCC_OscConfig+0x778>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	491b      	ldr	r1, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f023 020c 	bic.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4917      	ldr	r1, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f023 0202 	bic.w	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	4912      	ldr	r1, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCC_OscConfig+0x76c>)
 800363c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fd ff39 	bl	80014b8 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003648:	e011      	b.n	800366e <HAL_RCC_OscConfig+0x78e>
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	58024800 	.word	0x58024800
 8003654:	fffffc0c 	.word	0xfffffc0c
 8003658:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd ff2c 	bl	80014b8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e08a      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x77c>
 800367a:	e082      	b.n	8003782 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd ff16 	bl	80014b8 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd ff12 	bl	80014b8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e070      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x7b0>
 80036ae:	e068      	b.n	8003782 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036b6:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d031      	beq.n	8003728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d12a      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d122      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d11a      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0a5b      	lsrs	r3, r3, #9
 80036f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d111      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0e1b      	lsrs	r3, r3, #24
 800371a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e02b      	b.n	8003784 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003736:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d01f      	beq.n	8003782 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800374e:	f7fd feb3 	bl	80014b8 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003754:	bf00      	nop
 8003756:	f7fd feaf 	bl	80014b8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	4293      	cmp	r3, r2
 8003760:	d0f9      	beq.n	8003756 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_OscConfig+0x8b0>)
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800376e:	00d2      	lsls	r2, r2, #3
 8003770:	4906      	ldr	r1, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003772:	4313      	orrs	r3, r2
 8003774:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_RCC_OscConfig+0x8ac>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3730      	adds	r7, #48	; 0x30
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	58024400 	.word	0x58024400
 8003790:	ffff0007 	.word	0xffff0007

08003794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e19c      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b8a      	ldr	r3, [pc, #552]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d910      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b87      	ldr	r3, [pc, #540]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 020f 	bic.w	r2, r3, #15
 80037be:	4985      	ldr	r1, [pc, #532]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b83      	ldr	r3, [pc, #524]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e184      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d908      	bls.n	8003806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037f4:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	4975      	ldr	r1, [pc, #468]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003802:	4313      	orrs	r3, r2
 8003804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381e:	429a      	cmp	r2, r3
 8003820:	d908      	bls.n	8003834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	496a      	ldr	r1, [pc, #424]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800384c:	429a      	cmp	r2, r3
 800384e:	d908      	bls.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	495e      	ldr	r1, [pc, #376]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 800385e:	4313      	orrs	r3, r2
 8003860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800387a:	429a      	cmp	r2, r3
 800387c:	d908      	bls.n	8003890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4953      	ldr	r1, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 800388c:	4313      	orrs	r3, r2
 800388e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d908      	bls.n	80038be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f023 020f 	bic.w	r2, r3, #15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4947      	ldr	r1, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d055      	beq.n	8003976 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038e4:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d121      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0f6      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d115      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0ea      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0de      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d6      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4925      	ldr	r1, [pc, #148]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003942:	4313      	orrs	r3, r2
 8003944:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003946:	f7fd fdb7 	bl	80014b8 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394c:	e00a      	b.n	8003964 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394e:	f7fd fdb3 	bl	80014b8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0be      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	429a      	cmp	r2, r3
 8003974:	d1eb      	bne.n	800394e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	429a      	cmp	r2, r3
 8003990:	d208      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f023 020f 	bic.w	r2, r3, #15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d214      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 020f 	bic.w	r2, r3, #15
 80039ba:	4906      	ldr	r1, [pc, #24]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_RCC_ClockConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e086      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x34e>
 80039d4:	52002000 	.word	0x52002000
 80039d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d208      	bcs.n	8003a0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039f8:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4939      	ldr	r1, [pc, #228]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d208      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	492e      	ldr	r1, [pc, #184]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d208      	bcs.n	8003a66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4922      	ldr	r1, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d208      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4917      	ldr	r1, [pc, #92]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a94:	f000 f834 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x35c>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x358>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_RCC_ClockConfig+0x35c>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x360>)
 8003aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x364>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x368>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fca4 	bl	8001424 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	08009e98 	.word	0x08009e98
 8003af4:	24000004 	.word	0x24000004
 8003af8:	24000000 	.word	0x24000000
 8003afc:	24000008 	.word	0x24000008

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b06:	4bb3      	ldr	r3, [pc, #716]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0e:	2b18      	cmp	r3, #24
 8003b10:	f200 8155 	bhi.w	8003dbe <HAL_RCC_GetSysClockFreq+0x2be>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003dbf 	.word	0x08003dbf
 8003b24:	08003dbf 	.word	0x08003dbf
 8003b28:	08003dbf 	.word	0x08003dbf
 8003b2c:	08003dbf 	.word	0x08003dbf
 8003b30:	08003dbf 	.word	0x08003dbf
 8003b34:	08003dbf 	.word	0x08003dbf
 8003b38:	08003dbf 	.word	0x08003dbf
 8003b3c:	08003ba7 	.word	0x08003ba7
 8003b40:	08003dbf 	.word	0x08003dbf
 8003b44:	08003dbf 	.word	0x08003dbf
 8003b48:	08003dbf 	.word	0x08003dbf
 8003b4c:	08003dbf 	.word	0x08003dbf
 8003b50:	08003dbf 	.word	0x08003dbf
 8003b54:	08003dbf 	.word	0x08003dbf
 8003b58:	08003dbf 	.word	0x08003dbf
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003dbf 	.word	0x08003dbf
 8003b64:	08003dbf 	.word	0x08003dbf
 8003b68:	08003dbf 	.word	0x08003dbf
 8003b6c:	08003dbf 	.word	0x08003dbf
 8003b70:	08003dbf 	.word	0x08003dbf
 8003b74:	08003dbf 	.word	0x08003dbf
 8003b78:	08003dbf 	.word	0x08003dbf
 8003b7c:	08003bb3 	.word	0x08003bb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b80:	4b94      	ldr	r3, [pc, #592]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	4a90      	ldr	r2, [pc, #576]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b9e:	e111      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ba0:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ba2:	61bb      	str	r3, [r7, #24]
      break;
 8003ba4:	e10e      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ba8:	61bb      	str	r3, [r7, #24]
      break;
 8003baa:	e10b      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bac:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bae:	61bb      	str	r3, [r7, #24]
      break;
 8003bb0:	e108      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bc8:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003bd2:	4b80      	ldr	r3, [pc, #512]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80e1 	beq.w	8003db8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f000 8083 	beq.w	8003d04 <HAL_RCC_GetSysClockFreq+0x204>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f200 80a1 	bhi.w	8003d48 <HAL_RCC_GetSysClockFreq+0x248>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x114>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d056      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c12:	e099      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	4a6b      	ldr	r2, [pc, #428]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c7a:	e087      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003de8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cbe:	e065      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d02:	e043      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003df0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d46:	e021      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	0a5b      	lsrs	r3, r3, #9
 8003d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d96:	3301      	adds	r3, #1
 8003d98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db0:	ee17 3a90 	vmov	r3, s15
 8003db4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
      break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc0:	61bb      	str	r3, [r7, #24]
      break;
 8003dc2:	bf00      	nop
  }

  return sysclockfreq;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	03d09000 	.word	0x03d09000
 8003ddc:	003d0900 	.word	0x003d0900
 8003de0:	007a1200 	.word	0x007a1200
 8003de4:	46000000 	.word	0x46000000
 8003de8:	4c742400 	.word	0x4c742400
 8003dec:	4a742400 	.word	0x4a742400
 8003df0:	4af42400 	.word	0x4af42400

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003dfa:	f7ff fe81 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e0c:	5ccb      	ldrb	r3, [r1, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	08009e98 	.word	0x08009e98
 8003e4c:	24000004 	.word	0x24000004
 8003e50:	24000000 	.word	0x24000000

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e58:	f7ff ffcc 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	08009e98 	.word	0x08009e98

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e84:	f7ff ffb6 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	08009e98 	.word	0x08009e98

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b0ca      	sub	sp, #296	; 0x128
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ed6:	d049      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee8:	d828      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eee:	d01a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef4:	d822      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d007      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f00:	e01c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4bb8      	ldr	r3, [pc, #736]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4ab7      	ldr	r2, [pc, #732]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f0e:	e01a      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f14:	3308      	adds	r3, #8
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fc8f 	bl	800583c <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	3328      	adds	r3, #40	; 0x28
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fd36 	bl	80059a0 <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f4e:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5c:	4aa1      	ldr	r2, [pc, #644]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6513      	str	r3, [r2, #80]	; 0x50
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003f78:	f04f 0900 	mov.w	r9, #0
 8003f7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003f80:	d047      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d82a      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	08003fb7 	.word	0x08003fb7
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003feb 	.word	0x08003feb
 8003fa4:	08003feb 	.word	0x08003feb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b8e      	ldr	r3, [pc, #568]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a8d      	ldr	r2, [pc, #564]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e01a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	3308      	adds	r3, #8
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fc3c 	bl	800583c <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fca:	e00f      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3328      	adds	r3, #40	; 0x28
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fce3 	bl	80059a0 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff4:	4b7b      	ldr	r3, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	f023 0107 	bic.w	r1, r3, #7
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4a78      	ldr	r2, [pc, #480]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6513      	str	r3, [r2, #80]	; 0x50
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800401e:	f04f 0b00 	mov.w	fp, #0
 8004022:	ea5a 030b 	orrs.w	r3, sl, fp
 8004026:	d04c      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d030      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d829      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800403a:	2bc0      	cmp	r3, #192	; 0xc0
 800403c:	d02d      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800403e:	2bc0      	cmp	r3, #192	; 0xc0
 8004040:	d825      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d018      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d821      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d007      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004052:	e01c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a62      	ldr	r2, [pc, #392]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800405a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004060:	e01c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004066:	3308      	adds	r3, #8
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f001 fbe6 	bl	800583c <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fc8d 	bl	80059a0 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4a4c      	ldr	r2, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6513      	str	r3, [r2, #80]	; 0x50
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80040ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d053      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ee:	d035      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040f4:	d82e      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80040f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fa:	d031      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004100:	d828      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004106:	d01a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410c:	d822      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004116:	d007      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004118:	e01c      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411a:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4a31      	ldr	r2, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004126:	e01c      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	3308      	adds	r3, #8
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fb83 	bl	800583c <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800413c:	e011      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	3328      	adds	r3, #40	; 0x28
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fc2a 	bl	80059a0 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004152:	e006      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415a:	e002      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800417a:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004196:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d056      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b6:	d038      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041bc:	d831      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c2:	d034      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c8:	d82b      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ce:	d01d      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80041d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041d4:	d825      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80041da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041e0:	e01f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4ba2      	ldr	r3, [pc, #648]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4aa1      	ldr	r2, [pc, #644]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f4:	e01c      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fb1c 	bl	800583c <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3328      	adds	r3, #40	; 0x28
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fbc3 	bl	80059a0 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004238:	4b8e      	ldr	r3, [pc, #568]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004248:	4a8a      	ldr	r2, [pc, #552]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800424a:	430b      	orrs	r3, r1
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800426e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d03a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d01f      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d819      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004286:	2b20      	cmp	r3, #32
 8004288:	d00c      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800428a:	2b20      	cmp	r3, #32
 800428c:	d815      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004292:	2b10      	cmp	r3, #16
 8004294:	d111      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4b77      	ldr	r3, [pc, #476]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042a2:	e011      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a8:	3308      	adds	r3, #8
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fac5 	bl	800583c <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042d0:	4b68      	ldr	r3, [pc, #416]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042e4:	e003      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004304:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d051      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d035      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d82e      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004324:	d031      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800432a:	d828      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004330:	d01a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d822      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004340:	d007      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004342:	e01c      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004350:	e01c      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	3308      	adds	r3, #8
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fa6e 	bl	800583c <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	3328      	adds	r3, #40	; 0x28
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fb15 	bl	80059a0 <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004394:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6513      	str	r3, [r2, #80]	; 0x50
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80043be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043dc:	d033      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e2:	d82c      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043e8:	d02f      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80043ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ee:	d826      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043f4:	d02b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80043f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043fa:	d820      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80043fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004400:	d012      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004406:	d81a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d115      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	3308      	adds	r3, #8
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fa0e 	bl	800583c <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	3328      	adds	r3, #40	; 0x28
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f001 fab5 	bl	80059a0 <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446a:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6513      	str	r3, [r2, #80]	; 0x50
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004496:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d055      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ac:	d033      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b2:	d82c      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d02f      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d826      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044c4:	d02b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80044c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ca:	d820      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d012      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80044d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d6:	d81a      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d022      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80044dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e0:	d115      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	3308      	adds	r3, #8
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 f9a6 	bl	800583c <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044f6:	e015      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fc:	3328      	adds	r3, #40	; 0x28
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fa4d 	bl	80059a0 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004514:	e006      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800452c:	4ba3      	ldr	r3, [pc, #652]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800453c:	4a9f      	ldr	r2, [pc, #636]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d037      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004576:	d00e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457c:	d816      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004586:	d111      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004588:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4a8b      	ldr	r2, [pc, #556]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800458e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	3308      	adds	r3, #8
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f94c 	bl	800583c <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045be:	4b7f      	ldr	r3, [pc, #508]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a7b      	ldr	r2, [pc, #492]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6513      	str	r3, [r2, #80]	; 0x50
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d039      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004602:	2b03      	cmp	r3, #3
 8004604:	d81c      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004649 	.word	0x08004649
 8004610:	0800461d 	.word	0x0800461d
 8004614:	0800462b 	.word	0x0800462b
 8004618:	08004649 	.word	0x08004649
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a66      	ldr	r2, [pc, #408]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f902 	bl	800583c <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004652:	4b5a      	ldr	r3, [pc, #360]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	f023 0103 	bic.w	r1, r3, #3
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	4a56      	ldr	r2, [pc, #344]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004662:	430b      	orrs	r3, r1
 8004664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800467c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004686:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	f000 809f 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004692:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4a      	ldr	r2, [pc, #296]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800469e:	f7fc ff0b 	bl	80014b8 <HAL_GetTick>
 80046a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046a6:	e00b      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a8:	f7fc ff06 	bl	80014b8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b64      	cmp	r3, #100	; 0x64
 80046b6:	d903      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046be:	e005      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ed      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80046cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d179      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046e0:	4053      	eors	r3, r2
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d015      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a30      	ldr	r2, [pc, #192]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800470e:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800471e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004722:	d118      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fec8 	bl	80014b8 <HAL_GetTick>
 8004728:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800472c:	e00d      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fc fec3 	bl	80014b8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004738:	1ad2      	subs	r2, r2, r3
 800473a:	f241 3388 	movw	r3, #5000	; 0x1388
 800473e:	429a      	cmp	r2, r3
 8004740:	d903      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004748:	e005      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0eb      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	2b00      	cmp	r3, #0
 800475c:	d129      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d10e      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004780:	091a      	lsrs	r2, r3, #4
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004784:	4013      	ands	r3, r2
 8004786:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004788:	430b      	orrs	r3, r1
 800478a:	6113      	str	r3, [r2, #16]
 800478c:	e005      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004798:	6113      	str	r3, [r2, #16]
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e00e      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80047ba:	e009      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80047bc:	58024400 	.word	0x58024400
 80047c0:	58024800 	.word	0x58024800
 80047c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 0301 	and.w	r3, r2, #1
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f000 8089 	beq.w	8004904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	2b28      	cmp	r3, #40	; 0x28
 80047fa:	d86b      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	080048dd 	.word	0x080048dd
 8004808:	080048d5 	.word	0x080048d5
 800480c:	080048d5 	.word	0x080048d5
 8004810:	080048d5 	.word	0x080048d5
 8004814:	080048d5 	.word	0x080048d5
 8004818:	080048d5 	.word	0x080048d5
 800481c:	080048d5 	.word	0x080048d5
 8004820:	080048d5 	.word	0x080048d5
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080048d5 	.word	0x080048d5
 800482c:	080048d5 	.word	0x080048d5
 8004830:	080048d5 	.word	0x080048d5
 8004834:	080048d5 	.word	0x080048d5
 8004838:	080048d5 	.word	0x080048d5
 800483c:	080048d5 	.word	0x080048d5
 8004840:	080048d5 	.word	0x080048d5
 8004844:	080048bf 	.word	0x080048bf
 8004848:	080048d5 	.word	0x080048d5
 800484c:	080048d5 	.word	0x080048d5
 8004850:	080048d5 	.word	0x080048d5
 8004854:	080048d5 	.word	0x080048d5
 8004858:	080048d5 	.word	0x080048d5
 800485c:	080048d5 	.word	0x080048d5
 8004860:	080048d5 	.word	0x080048d5
 8004864:	080048dd 	.word	0x080048dd
 8004868:	080048d5 	.word	0x080048d5
 800486c:	080048d5 	.word	0x080048d5
 8004870:	080048d5 	.word	0x080048d5
 8004874:	080048d5 	.word	0x080048d5
 8004878:	080048d5 	.word	0x080048d5
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048d5 	.word	0x080048d5
 8004884:	080048dd 	.word	0x080048dd
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048d5 	.word	0x080048d5
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048dd 	.word	0x080048dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	3308      	adds	r3, #8
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 ffc3 	bl	800583c <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048bc:	e00f      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 f86a 	bl	80059a0 <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048e6:	4bbf      	ldr	r3, [pc, #764]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	4abb      	ldr	r2, [pc, #748]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6553      	str	r3, [r2, #84]	; 0x54
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f002 0302 	and.w	r3, r2, #2
 8004910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800491a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d041      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	2b05      	cmp	r3, #5
 800492c:	d824      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004981 	.word	0x08004981
 8004938:	0800494d 	.word	0x0800494d
 800493c:	08004963 	.word	0x08004963
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f000 ff71 	bl	800583c <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f818 	bl	80059a0 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800498a:	4b96      	ldr	r3, [pc, #600]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f023 0107 	bic.w	r1, r3, #7
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004998:	4a92      	ldr	r2, [pc, #584]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499a:	430b      	orrs	r3, r1
 800499c:	6553      	str	r3, [r2, #84]	; 0x54
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 0304 	and.w	r3, r2, #4
 80049b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d044      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d825      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a29 	.word	0x08004a29
 80049e0:	080049f5 	.word	0x080049f5
 80049e4:	08004a0b 	.word	0x08004a0b
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a29 	.word	0x08004a29
 80049f0:	08004a29 	.word	0x08004a29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	3308      	adds	r3, #8
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 ff1d 	bl	800583c <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a08:	e00f      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	3328      	adds	r3, #40	; 0x28
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 ffc4 	bl	80059a0 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e004      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a32:	4b6c      	ldr	r3, [pc, #432]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f023 0107 	bic.w	r1, r3, #7
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	4a68      	ldr	r2, [pc, #416]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f002 0320 	and.w	r3, r2, #32
 8004a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d055      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d033      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d82c      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d826      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9c:	d820      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d012      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d81a      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d115      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 febd 	bl	800583c <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	3328      	adds	r3, #40	; 0x28
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff64 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00a      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae6:	e006      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6553      	str	r3, [r2, #84]	; 0x54
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d058      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b4a:	d033      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b50:	d82c      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d02f      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d826      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b62:	d02b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b68:	d820      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	d012      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d81a      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d022      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d115      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	3308      	adds	r3, #8
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe57 	bl	800583c <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b94:	e015      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	3328      	adds	r3, #40	; 0x28
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fefe 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bb4:	bf00      	nop
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bda:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6593      	str	r3, [r2, #88]	; 0x58
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c00:	2300      	movs	r3, #0
 8004c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d055      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c1c:	d033      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c22:	d82c      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c28:	d02f      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d826      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c34:	d02b      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c3a:	d820      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d012      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c46:	d81a      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d022      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c50:	d115      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c56:	3308      	adds	r3, #8
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fdee 	bl	800583c <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c66:	e015      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6c:	3328      	adds	r3, #40	; 0x28
 8004c6e:	2102      	movs	r1, #2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fe95 	bl	80059a0 <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c86:	bf00      	nop
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c9c:	4ba1      	ldr	r3, [pc, #644]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cac:	4a9d      	ldr	r2, [pc, #628]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f002 0308 	and.w	r3, r2, #8
 8004cc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d01e      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cee:	3328      	adds	r3, #40	; 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fe54 	bl	80059a0 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d04:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	4a83      	ldr	r2, [pc, #524]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	f002 0310 	and.w	r3, r2, #16
 8004d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d34:	460b      	mov	r3, r1
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d01e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4c:	3328      	adds	r3, #40	; 0x28
 8004d4e:	2102      	movs	r1, #2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fe25 	bl	80059a0 <RCCEx_PLL3_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d62:	4b70      	ldr	r3, [pc, #448]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d72:	4a6c      	ldr	r2, [pc, #432]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d03e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da4:	d022      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004daa:	d81b      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d00b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004db6:	e015      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd3b 	bl	800583c <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00f      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	3328      	adds	r3, #40	; 0x28
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fde2 	bl	80059a0 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df6:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e06:	4a47      	ldr	r2, [pc, #284]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e24:	2300      	movs	r3, #0
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e3e:	d01f      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e44:	d818      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e50:	d007      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e52:	e011      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e66:	3328      	adds	r3, #40	; 0x28
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fd98 	bl	80059a0 <RCCEx_PLL3_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6553      	str	r3, [r2, #84]	; 0x54
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004eb8:	2300      	movs	r3, #0
 8004eba:	677b      	str	r3, [r7, #116]	; 0x74
 8004ebc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d034      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d007      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ed6:	e011      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ee4:	e00e      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eea:	3308      	adds	r3, #8
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fca4 	bl	800583c <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	4a02      	ldr	r2, [pc, #8]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f20:	e006      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3e:	2300      	movs	r3, #0
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d00c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f50:	3328      	adds	r3, #40	; 0x28
 8004f52:	2102      	movs	r1, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fd23 	bl	80059a0 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	2300      	movs	r3, #0
 8004f76:	667b      	str	r3, [r7, #100]	; 0x64
 8004f78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d038      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d018      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d811      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d014      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d80b      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4bc3      	ldr	r3, [pc, #780]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4ac2      	ldr	r2, [pc, #776]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fd4:	4bb9      	ldr	r3, [pc, #740]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe4:	4ab5      	ldr	r2, [pc, #724]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6553      	str	r3, [r2, #84]	; 0x54
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005000:	65bb      	str	r3, [r7, #88]	; 0x58
 8005002:	2300      	movs	r3, #0
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005006:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800500a:	460b      	mov	r3, r1
 800500c:	4313      	orrs	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005010:	4baa      	ldr	r3, [pc, #680]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	4aa7      	ldr	r2, [pc, #668]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
 8005032:	2300      	movs	r3, #0
 8005034:	657b      	str	r3, [r7, #84]	; 0x54
 8005036:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005040:	4b9e      	ldr	r3, [pc, #632]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005050:	4a9a      	ldr	r2, [pc, #616]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005052:	430b      	orrs	r3, r1
 8005054:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	2300      	movs	r3, #0
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005068:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005072:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005080:	4a8e      	ldr	r2, [pc, #568]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
 8005094:	2300      	movs	r3, #0
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050a2:	4b86      	ldr	r3, [pc, #536]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a85      	ldr	r2, [pc, #532]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	4b83      	ldr	r3, [pc, #524]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b0:	6919      	ldr	r1, [r3, #16]
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050ba:	4a80      	ldr	r2, [pc, #512]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050dc:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	4a74      	ldr	r2, [pc, #464]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
 80050fe:	2300      	movs	r3, #0
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800510c:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511c:	4a67      	ldr	r2, [pc, #412]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	2100      	movs	r1, #0
 800512c:	62b9      	str	r1, [r7, #40]	; 0x28
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005134:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005138:	460b      	mov	r3, r1
 800513a:	4313      	orrs	r3, r2
 800513c:	d011      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	3308      	adds	r3, #8
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb78 	bl	800583c <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	2100      	movs	r1, #0
 800516c:	6239      	str	r1, [r7, #32]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
 8005174:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d011      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	3308      	adds	r3, #8
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fb58 	bl	800583c <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800519e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	2100      	movs	r1, #0
 80051ac:	61b9      	str	r1, [r7, #24]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051b8:	460b      	mov	r3, r1
 80051ba:	4313      	orrs	r3, r2
 80051bc:	d011      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	3308      	adds	r3, #8
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb38 	bl	800583c <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80051d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	2100      	movs	r1, #0
 80051ec:	6139      	str	r1, [r7, #16]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d011      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	3328      	adds	r3, #40	; 0x28
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fbca 	bl	80059a0 <RCCEx_PLL3_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	2100      	movs	r1, #0
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d011      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	3328      	adds	r3, #40	; 0x28
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fbaa 	bl	80059a0 <RCCEx_PLL3_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	2100      	movs	r1, #0
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d011      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	3328      	adds	r3, #40	; 0x28
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb8a 	bl	80059a0 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80052a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052bc:	58024400 	.word	0x58024400

080052c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052c4:	f7fe fd96 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4904      	ldr	r1, [pc, #16]	; (80052e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58024400 	.word	0x58024400
 80052e8:	08009e98 	.word	0x08009e98

080052ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052f4:	4ba1      	ldr	r3, [pc, #644]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052fe:	4b9f      	ldr	r3, [pc, #636]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	0b1b      	lsrs	r3, r3, #12
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800530a:	4b9c      	ldr	r3, [pc, #624]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005316:	4b99      	ldr	r3, [pc, #612]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8111 	beq.w	800555c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b02      	cmp	r3, #2
 800533e:	f000 8083 	beq.w	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b02      	cmp	r3, #2
 8005346:	f200 80a1 	bhi.w	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d056      	beq.n	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005356:	e099      	b.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005358:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02d      	beq.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005364:	4b85      	ldr	r3, [pc, #532]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	4a84      	ldr	r2, [pc, #528]	; (8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
 8005374:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b7b      	ldr	r3, [pc, #492]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053be:	e087      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005588 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b6a      	ldr	r3, [pc, #424]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005402:	e065      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800558c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005446:	e043      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b48      	ldr	r3, [pc, #288]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a03 	vldr	s12, [r7, #12]
 800546e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	e021      	b.n	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800558c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b37      	ldr	r3, [pc, #220]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054d0:	4b2a      	ldr	r3, [pc, #168]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	0a5b      	lsrs	r3, r3, #9
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f6:	ee17 2a90 	vmov	r2, s15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054fe:	4b1f      	ldr	r3, [pc, #124]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005518:	edd7 6a07 	vldr	s13, [r7, #28]
 800551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005524:	ee17 2a90 	vmov	r2, s15
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800552c:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005546:	edd7 6a07 	vldr	s13, [r7, #28]
 800554a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005552:	ee17 2a90 	vmov	r2, s15
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800555a:	e008      	b.n	800556e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
}
 800556e:	bf00      	nop
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
 8005580:	03d09000 	.word	0x03d09000
 8005584:	46000000 	.word	0x46000000
 8005588:	4c742400 	.word	0x4c742400
 800558c:	4a742400 	.word	0x4a742400
 8005590:	4af42400 	.word	0x4af42400

08005594 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559c:	4ba1      	ldr	r3, [pc, #644]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055a6:	4b9f      	ldr	r3, [pc, #636]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	0d1b      	lsrs	r3, r3, #20
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055b2:	4b9c      	ldr	r3, [pc, #624]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055be:	4b99      	ldr	r3, [pc, #612]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8111 	beq.w	8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055fe:	e099      	b.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800560c:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a84      	ldr	r2, [pc, #528]	; (8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005666:	e087      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056aa:	e065      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b59      	ldr	r3, [pc, #356]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ee:	e043      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b48      	ldr	r3, [pc, #288]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	e021      	b.n	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a03 	vldr	s12, [r7, #12]
 800575a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005778:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	0c1b      	lsrs	r3, r3, #16
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005802:	e008      	b.n	8005816 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
}
 8005816:	bf00      	nop
 8005818:	3724      	adds	r7, #36	; 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	46000000 	.word	0x46000000
 8005830:	4c742400 	.word	0x4c742400
 8005834:	4a742400 	.word	0x4a742400
 8005838:	4af42400 	.word	0x4af42400

0800583c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800584a:	4b53      	ldr	r3, [pc, #332]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b03      	cmp	r3, #3
 8005854:	d101      	bne.n	800585a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e099      	b.n	800598e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800585a:	4b4f      	ldr	r3, [pc, #316]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fb fe27 	bl	80014b8 <HAL_GetTick>
 800586a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800586c:	e008      	b.n	8005880 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800586e:	f7fb fe23 	bl	80014b8 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e086      	b.n	800598e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005880:	4b45      	ldr	r3, [pc, #276]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	493f      	ldr	r1, [pc, #252]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	628b      	str	r3, [r1, #40]	; 0x28
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	025b      	lsls	r3, r3, #9
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d0:	4931      	ldr	r1, [pc, #196]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	492d      	ldr	r1, [pc, #180]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f023 0220 	bic.w	r2, r3, #32
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4928      	ldr	r1, [pc, #160]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <RCCEx_PLL2_Config+0x160>)
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	69d2      	ldr	r2, [r2, #28]
 8005912:	00d2      	lsls	r2, r2, #3
 8005914:	4920      	ldr	r1, [pc, #128]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f043 0310 	orr.w	r3, r3, #16
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a19      	ldr	r2, [pc, #100]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005938:	e00f      	b.n	800595a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800594c:	e005      	b.n	800595a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a11      	ldr	r2, [pc, #68]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005966:	f7fb fda7 	bl	80014b8 <HAL_GetTick>
 800596a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800596c:	e008      	b.n	8005980 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800596e:	f7fb fda3 	bl	80014b8 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <RCCEx_PLL2_Config+0x15c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
 800599c:	ffff0007 	.word	0xffff0007

080059a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d101      	bne.n	80059be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e099      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059be:	4b4f      	ldr	r3, [pc, #316]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4e      	ldr	r2, [pc, #312]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ca:	f7fb fd75 	bl	80014b8 <HAL_GetTick>
 80059ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059d0:	e008      	b.n	80059e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059d2:	f7fb fd71 	bl	80014b8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e086      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f0      	bne.n	80059d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059f0:	4b42      	ldr	r3, [pc, #264]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	051b      	lsls	r3, r3, #20
 80059fe:	493f      	ldr	r1, [pc, #252]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	628b      	str	r3, [r1, #40]	; 0x28
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	025b      	lsls	r3, r3, #9
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a34:	4931      	ldr	r1, [pc, #196]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	492d      	ldr	r1, [pc, #180]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	4928      	ldr	r1, [pc, #160]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a26      	ldr	r2, [pc, #152]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <RCCEx_PLL3_Config+0x160>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	69d2      	ldr	r2, [r2, #28]
 8005a76:	00d2      	lsls	r2, r2, #3
 8005a78:	4920      	ldr	r1, [pc, #128]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a7e:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a9c:	e00f      	b.n	8005abe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005aa4:	4b15      	ldr	r3, [pc, #84]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ab0:	e005      	b.n	8005abe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	4a11      	ldr	r2, [pc, #68]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005abc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aca:	f7fb fcf5 	bl	80014b8 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ad0:	e008      	b.n	8005ae4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ad2:	f7fb fcf1 	bl	80014b8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e006      	b.n	8005af2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
 8005b00:	ffff0007 	.word	0xffff0007

08005b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e042      	b.n	8005b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7fb fad7 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2224      	movs	r2, #36	; 0x24
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f82c 	bl	8005ba4 <UART_SetConfig>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e022      	b.n	8005b9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fd88 	bl	8006674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fe0f 	bl	80067b8 <UART_CheckIdleState>
 8005b9a:	4603      	mov	r3, r0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba8:	b092      	sub	sp, #72	; 0x48
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4bbe      	ldr	r3, [pc, #760]	; (8005ecc <UART_SetConfig+0x328>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4ab3      	ldr	r2, [pc, #716]	; (8005ed0 <UART_SetConfig+0x32c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4baf      	ldr	r3, [pc, #700]	; (8005ed4 <UART_SetConfig+0x330>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f023 010f 	bic.w	r1, r3, #15
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4aa6      	ldr	r2, [pc, #664]	; (8005ed8 <UART_SetConfig+0x334>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d177      	bne.n	8005d34 <UART_SetConfig+0x190>
 8005c44:	4ba5      	ldr	r3, [pc, #660]	; (8005edc <UART_SetConfig+0x338>)
 8005c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c4c:	2b28      	cmp	r3, #40	; 0x28
 8005c4e:	d86d      	bhi.n	8005d2c <UART_SetConfig+0x188>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0xb4>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005cfd 	.word	0x08005cfd
 8005c5c:	08005d2d 	.word	0x08005d2d
 8005c60:	08005d2d 	.word	0x08005d2d
 8005c64:	08005d2d 	.word	0x08005d2d
 8005c68:	08005d2d 	.word	0x08005d2d
 8005c6c:	08005d2d 	.word	0x08005d2d
 8005c70:	08005d2d 	.word	0x08005d2d
 8005c74:	08005d2d 	.word	0x08005d2d
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d2d 	.word	0x08005d2d
 8005c80:	08005d2d 	.word	0x08005d2d
 8005c84:	08005d2d 	.word	0x08005d2d
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d2d 	.word	0x08005d2d
 8005c90:	08005d2d 	.word	0x08005d2d
 8005c94:	08005d2d 	.word	0x08005d2d
 8005c98:	08005d0d 	.word	0x08005d0d
 8005c9c:	08005d2d 	.word	0x08005d2d
 8005ca0:	08005d2d 	.word	0x08005d2d
 8005ca4:	08005d2d 	.word	0x08005d2d
 8005ca8:	08005d2d 	.word	0x08005d2d
 8005cac:	08005d2d 	.word	0x08005d2d
 8005cb0:	08005d2d 	.word	0x08005d2d
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d15 	.word	0x08005d15
 8005cbc:	08005d2d 	.word	0x08005d2d
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d2d 	.word	0x08005d2d
 8005cd0:	08005d2d 	.word	0x08005d2d
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d1d 	.word	0x08005d1d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e222      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e21e      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e21a      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e216      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e212      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d24:	2340      	movs	r3, #64	; 0x40
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2a:	e20e      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e20a      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a69      	ldr	r2, [pc, #420]	; (8005ee0 <UART_SetConfig+0x33c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d130      	bne.n	8005da0 <UART_SetConfig+0x1fc>
 8005d3e:	4b67      	ldr	r3, [pc, #412]	; (8005edc <UART_SetConfig+0x338>)
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b05      	cmp	r3, #5
 8005d48:	d826      	bhi.n	8005d98 <UART_SetConfig+0x1f4>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0x1ac>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d69 	.word	0x08005d69
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	08005d79 	.word	0x08005d79
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e1ec      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e1e8      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e1e4      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e1e0      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8e:	e1dc      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d96:	e1d8      	b.n	800614a <UART_SetConfig+0x5a6>
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9e:	e1d4      	b.n	800614a <UART_SetConfig+0x5a6>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a4f      	ldr	r2, [pc, #316]	; (8005ee4 <UART_SetConfig+0x340>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d130      	bne.n	8005e0c <UART_SetConfig+0x268>
 8005daa:	4b4c      	ldr	r3, [pc, #304]	; (8005edc <UART_SetConfig+0x338>)
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d826      	bhi.n	8005e04 <UART_SetConfig+0x260>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x218>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005dd5 	.word	0x08005dd5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e1b6      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e1b2      	b.n	800614a <UART_SetConfig+0x5a6>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e1ae      	b.n	800614a <UART_SetConfig+0x5a6>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e1aa      	b.n	800614a <UART_SetConfig+0x5a6>
 8005df4:	2320      	movs	r3, #32
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e1a6      	b.n	800614a <UART_SetConfig+0x5a6>
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e02:	e1a2      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0a:	e19e      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <UART_SetConfig+0x344>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d130      	bne.n	8005e78 <UART_SetConfig+0x2d4>
 8005e16:	4b31      	ldr	r3, [pc, #196]	; (8005edc <UART_SetConfig+0x338>)
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d826      	bhi.n	8005e70 <UART_SetConfig+0x2cc>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x284>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e41 	.word	0x08005e41
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	08005e51 	.word	0x08005e51
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e180      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e17c      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e178      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e174      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e60:	2320      	movs	r3, #32
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e170      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e16c      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e76:	e168      	b.n	800614a <UART_SetConfig+0x5a6>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <UART_SetConfig+0x348>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d142      	bne.n	8005f08 <UART_SetConfig+0x364>
 8005e82:	4b16      	ldr	r3, [pc, #88]	; (8005edc <UART_SetConfig+0x338>)
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d838      	bhi.n	8005f00 <UART_SetConfig+0x35c>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0x2f0>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ead 	.word	0x08005ead
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	08005ebd 	.word	0x08005ebd
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef9 	.word	0x08005ef9
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e14a      	b.n	800614a <UART_SetConfig+0x5a6>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e146      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e142      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e13e      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ecc:	cfff69f3 	.word	0xcfff69f3
 8005ed0:	58000c00 	.word	0x58000c00
 8005ed4:	11fff4ff 	.word	0x11fff4ff
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	40004400 	.word	0x40004400
 8005ee4:	40004800 	.word	0x40004800
 8005ee8:	40004c00 	.word	0x40004c00
 8005eec:	40005000 	.word	0x40005000
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e128      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e124      	b.n	800614a <UART_SetConfig+0x5a6>
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e120      	b.n	800614a <UART_SetConfig+0x5a6>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4acb      	ldr	r2, [pc, #812]	; (800623c <UART_SetConfig+0x698>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d176      	bne.n	8006000 <UART_SetConfig+0x45c>
 8005f12:	4bcb      	ldr	r3, [pc, #812]	; (8006240 <UART_SetConfig+0x69c>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1a:	2b28      	cmp	r3, #40	; 0x28
 8005f1c:	d86c      	bhi.n	8005ff8 <UART_SetConfig+0x454>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x380>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005fc9 	.word	0x08005fc9
 8005f28:	08005ff9 	.word	0x08005ff9
 8005f2c:	08005ff9 	.word	0x08005ff9
 8005f30:	08005ff9 	.word	0x08005ff9
 8005f34:	08005ff9 	.word	0x08005ff9
 8005f38:	08005ff9 	.word	0x08005ff9
 8005f3c:	08005ff9 	.word	0x08005ff9
 8005f40:	08005ff9 	.word	0x08005ff9
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005ff9 	.word	0x08005ff9
 8005f4c:	08005ff9 	.word	0x08005ff9
 8005f50:	08005ff9 	.word	0x08005ff9
 8005f54:	08005ff9 	.word	0x08005ff9
 8005f58:	08005ff9 	.word	0x08005ff9
 8005f5c:	08005ff9 	.word	0x08005ff9
 8005f60:	08005ff9 	.word	0x08005ff9
 8005f64:	08005fd9 	.word	0x08005fd9
 8005f68:	08005ff9 	.word	0x08005ff9
 8005f6c:	08005ff9 	.word	0x08005ff9
 8005f70:	08005ff9 	.word	0x08005ff9
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	08005ff9 	.word	0x08005ff9
 8005f7c:	08005ff9 	.word	0x08005ff9
 8005f80:	08005ff9 	.word	0x08005ff9
 8005f84:	08005fe1 	.word	0x08005fe1
 8005f88:	08005ff9 	.word	0x08005ff9
 8005f8c:	08005ff9 	.word	0x08005ff9
 8005f90:	08005ff9 	.word	0x08005ff9
 8005f94:	08005ff9 	.word	0x08005ff9
 8005f98:	08005ff9 	.word	0x08005ff9
 8005f9c:	08005ff9 	.word	0x08005ff9
 8005fa0:	08005ff9 	.word	0x08005ff9
 8005fa4:	08005fe9 	.word	0x08005fe9
 8005fa8:	08005ff9 	.word	0x08005ff9
 8005fac:	08005ff9 	.word	0x08005ff9
 8005fb0:	08005ff9 	.word	0x08005ff9
 8005fb4:	08005ff9 	.word	0x08005ff9
 8005fb8:	08005ff9 	.word	0x08005ff9
 8005fbc:	08005ff9 	.word	0x08005ff9
 8005fc0:	08005ff9 	.word	0x08005ff9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e0bc      	b.n	800614a <UART_SetConfig+0x5a6>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd6:	e0b8      	b.n	800614a <UART_SetConfig+0x5a6>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fde:	e0b4      	b.n	800614a <UART_SetConfig+0x5a6>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe6:	e0b0      	b.n	800614a <UART_SetConfig+0x5a6>
 8005fe8:	2320      	movs	r3, #32
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fee:	e0ac      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff6:	e0a8      	b.n	800614a <UART_SetConfig+0x5a6>
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffe:	e0a4      	b.n	800614a <UART_SetConfig+0x5a6>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a8f      	ldr	r2, [pc, #572]	; (8006244 <UART_SetConfig+0x6a0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d130      	bne.n	800606c <UART_SetConfig+0x4c8>
 800600a:	4b8d      	ldr	r3, [pc, #564]	; (8006240 <UART_SetConfig+0x69c>)
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b05      	cmp	r3, #5
 8006014:	d826      	bhi.n	8006064 <UART_SetConfig+0x4c0>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x478>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006035 	.word	0x08006035
 8006020:	0800603d 	.word	0x0800603d
 8006024:	08006045 	.word	0x08006045
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e086      	b.n	800614a <UART_SetConfig+0x5a6>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e082      	b.n	800614a <UART_SetConfig+0x5a6>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e07e      	b.n	800614a <UART_SetConfig+0x5a6>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e07a      	b.n	800614a <UART_SetConfig+0x5a6>
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605a:	e076      	b.n	800614a <UART_SetConfig+0x5a6>
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006062:	e072      	b.n	800614a <UART_SetConfig+0x5a6>
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606a:	e06e      	b.n	800614a <UART_SetConfig+0x5a6>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a75      	ldr	r2, [pc, #468]	; (8006248 <UART_SetConfig+0x6a4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d130      	bne.n	80060d8 <UART_SetConfig+0x534>
 8006076:	4b72      	ldr	r3, [pc, #456]	; (8006240 <UART_SetConfig+0x69c>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b05      	cmp	r3, #5
 8006080:	d826      	bhi.n	80060d0 <UART_SetConfig+0x52c>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x4e4>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e050      	b.n	800614a <UART_SetConfig+0x5a6>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e04c      	b.n	800614a <UART_SetConfig+0x5a6>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e048      	b.n	800614a <UART_SetConfig+0x5a6>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e044      	b.n	800614a <UART_SetConfig+0x5a6>
 80060c0:	2320      	movs	r3, #32
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e040      	b.n	800614a <UART_SetConfig+0x5a6>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e03c      	b.n	800614a <UART_SetConfig+0x5a6>
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e038      	b.n	800614a <UART_SetConfig+0x5a6>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5b      	ldr	r2, [pc, #364]	; (800624c <UART_SetConfig+0x6a8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d130      	bne.n	8006144 <UART_SetConfig+0x5a0>
 80060e2:	4b57      	ldr	r3, [pc, #348]	; (8006240 <UART_SetConfig+0x69c>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d826      	bhi.n	800613c <UART_SetConfig+0x598>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x550>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	0800610d 	.word	0x0800610d
 80060f8:	08006115 	.word	0x08006115
 80060fc:	0800611d 	.word	0x0800611d
 8006100:	08006125 	.word	0x08006125
 8006104:	0800612d 	.word	0x0800612d
 8006108:	08006135 	.word	0x08006135
 800610c:	2302      	movs	r3, #2
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e01a      	b.n	800614a <UART_SetConfig+0x5a6>
 8006114:	2304      	movs	r3, #4
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e016      	b.n	800614a <UART_SetConfig+0x5a6>
 800611c:	2308      	movs	r3, #8
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e012      	b.n	800614a <UART_SetConfig+0x5a6>
 8006124:	2310      	movs	r3, #16
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e00e      	b.n	800614a <UART_SetConfig+0x5a6>
 800612c:	2320      	movs	r3, #32
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e00a      	b.n	800614a <UART_SetConfig+0x5a6>
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e006      	b.n	800614a <UART_SetConfig+0x5a6>
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006142:	e002      	b.n	800614a <UART_SetConfig+0x5a6>
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a3f      	ldr	r2, [pc, #252]	; (800624c <UART_SetConfig+0x6a8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	f040 80f8 	bne.w	8006346 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006156:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800615a:	2b20      	cmp	r3, #32
 800615c:	dc46      	bgt.n	80061ec <UART_SetConfig+0x648>
 800615e:	2b02      	cmp	r3, #2
 8006160:	f2c0 8082 	blt.w	8006268 <UART_SetConfig+0x6c4>
 8006164:	3b02      	subs	r3, #2
 8006166:	2b1e      	cmp	r3, #30
 8006168:	d87e      	bhi.n	8006268 <UART_SetConfig+0x6c4>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x5cc>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061f3 	.word	0x080061f3
 8006174:	08006269 	.word	0x08006269
 8006178:	080061fb 	.word	0x080061fb
 800617c:	08006269 	.word	0x08006269
 8006180:	08006269 	.word	0x08006269
 8006184:	08006269 	.word	0x08006269
 8006188:	0800620b 	.word	0x0800620b
 800618c:	08006269 	.word	0x08006269
 8006190:	08006269 	.word	0x08006269
 8006194:	08006269 	.word	0x08006269
 8006198:	08006269 	.word	0x08006269
 800619c:	08006269 	.word	0x08006269
 80061a0:	08006269 	.word	0x08006269
 80061a4:	08006269 	.word	0x08006269
 80061a8:	0800621b 	.word	0x0800621b
 80061ac:	08006269 	.word	0x08006269
 80061b0:	08006269 	.word	0x08006269
 80061b4:	08006269 	.word	0x08006269
 80061b8:	08006269 	.word	0x08006269
 80061bc:	08006269 	.word	0x08006269
 80061c0:	08006269 	.word	0x08006269
 80061c4:	08006269 	.word	0x08006269
 80061c8:	08006269 	.word	0x08006269
 80061cc:	08006269 	.word	0x08006269
 80061d0:	08006269 	.word	0x08006269
 80061d4:	08006269 	.word	0x08006269
 80061d8:	08006269 	.word	0x08006269
 80061dc:	08006269 	.word	0x08006269
 80061e0:	08006269 	.word	0x08006269
 80061e4:	08006269 	.word	0x08006269
 80061e8:	0800625b 	.word	0x0800625b
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d037      	beq.n	8006260 <UART_SetConfig+0x6bc>
 80061f0:	e03a      	b.n	8006268 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061f2:	f7ff f865 	bl	80052c0 <HAL_RCCEx_GetD3PCLK1Freq>
 80061f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061f8:	e03c      	b.n	8006274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f874 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006208:	e034      	b.n	8006274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800620a:	f107 0318 	add.w	r3, r7, #24
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff f9c0 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006218:	e02c      	b.n	8006274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <UART_SetConfig+0x69c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <UART_SetConfig+0x69c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	08db      	lsrs	r3, r3, #3
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	4a07      	ldr	r2, [pc, #28]	; (8006250 <UART_SetConfig+0x6ac>)
 8006232:	fa22 f303 	lsr.w	r3, r2, r3
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006238:	e01c      	b.n	8006274 <UART_SetConfig+0x6d0>
 800623a:	bf00      	nop
 800623c:	40011400 	.word	0x40011400
 8006240:	58024400 	.word	0x58024400
 8006244:	40007800 	.word	0x40007800
 8006248:	40007c00 	.word	0x40007c00
 800624c:	58000c00 	.word	0x58000c00
 8006250:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006254:	4b9d      	ldr	r3, [pc, #628]	; (80064cc <UART_SetConfig+0x928>)
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006258:	e00c      	b.n	8006274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800625a:	4b9d      	ldr	r3, [pc, #628]	; (80064d0 <UART_SetConfig+0x92c>)
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800625e:	e009      	b.n	8006274 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006266:	e005      	b.n	8006274 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 81de 	beq.w	8006638 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	4a94      	ldr	r2, [pc, #592]	; (80064d4 <UART_SetConfig+0x930>)
 8006282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006286:	461a      	mov	r2, r3
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	fbb3 f3f2 	udiv	r3, r3, r2
 800628e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629c:	429a      	cmp	r2, r3
 800629e:	d305      	bcc.n	80062ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d903      	bls.n	80062b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062b2:	e1c1      	b.n	8006638 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	2200      	movs	r2, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	60fa      	str	r2, [r7, #12]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	4a84      	ldr	r2, [pc, #528]	; (80064d4 <UART_SetConfig+0x930>)
 80062c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2200      	movs	r2, #0
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062d6:	f7fa f803 	bl	80002e0 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4610      	mov	r0, r2
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	020b      	lsls	r3, r1, #8
 80062ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062f0:	0202      	lsls	r2, r0, #8
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	6849      	ldr	r1, [r1, #4]
 80062f6:	0849      	lsrs	r1, r1, #1
 80062f8:	2000      	movs	r0, #0
 80062fa:	460c      	mov	r4, r1
 80062fc:	4605      	mov	r5, r0
 80062fe:	eb12 0804 	adds.w	r8, r2, r4
 8006302:	eb43 0905 	adc.w	r9, r3, r5
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	469a      	mov	sl, r3
 800630e:	4693      	mov	fp, r2
 8006310:	4652      	mov	r2, sl
 8006312:	465b      	mov	r3, fp
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7f9 ffe2 	bl	80002e0 <__aeabi_uldivmod>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4613      	mov	r3, r2
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632a:	d308      	bcc.n	800633e <UART_SetConfig+0x79a>
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006332:	d204      	bcs.n	800633e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	e17c      	b.n	8006638 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006344:	e178      	b.n	8006638 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	f040 80c5 	bne.w	80064dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006352:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006356:	2b20      	cmp	r3, #32
 8006358:	dc48      	bgt.n	80063ec <UART_SetConfig+0x848>
 800635a:	2b00      	cmp	r3, #0
 800635c:	db7b      	blt.n	8006456 <UART_SetConfig+0x8b2>
 800635e:	2b20      	cmp	r3, #32
 8006360:	d879      	bhi.n	8006456 <UART_SetConfig+0x8b2>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x7c4>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063f3 	.word	0x080063f3
 800636c:	080063fb 	.word	0x080063fb
 8006370:	08006457 	.word	0x08006457
 8006374:	08006457 	.word	0x08006457
 8006378:	08006403 	.word	0x08006403
 800637c:	08006457 	.word	0x08006457
 8006380:	08006457 	.word	0x08006457
 8006384:	08006457 	.word	0x08006457
 8006388:	08006413 	.word	0x08006413
 800638c:	08006457 	.word	0x08006457
 8006390:	08006457 	.word	0x08006457
 8006394:	08006457 	.word	0x08006457
 8006398:	08006457 	.word	0x08006457
 800639c:	08006457 	.word	0x08006457
 80063a0:	08006457 	.word	0x08006457
 80063a4:	08006457 	.word	0x08006457
 80063a8:	08006423 	.word	0x08006423
 80063ac:	08006457 	.word	0x08006457
 80063b0:	08006457 	.word	0x08006457
 80063b4:	08006457 	.word	0x08006457
 80063b8:	08006457 	.word	0x08006457
 80063bc:	08006457 	.word	0x08006457
 80063c0:	08006457 	.word	0x08006457
 80063c4:	08006457 	.word	0x08006457
 80063c8:	08006457 	.word	0x08006457
 80063cc:	08006457 	.word	0x08006457
 80063d0:	08006457 	.word	0x08006457
 80063d4:	08006457 	.word	0x08006457
 80063d8:	08006457 	.word	0x08006457
 80063dc:	08006457 	.word	0x08006457
 80063e0:	08006457 	.word	0x08006457
 80063e4:	08006457 	.word	0x08006457
 80063e8:	08006449 	.word	0x08006449
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d02e      	beq.n	800644e <UART_SetConfig+0x8aa>
 80063f0:	e031      	b.n	8006456 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f2:	f7fd fd2f 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 80063f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f8:	e033      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063fa:	f7fd fd41 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 80063fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006400:	e02f      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe ff70 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006410:	e027      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006412:	f107 0318 	add.w	r3, r7, #24
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff f8bc 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006420:	e01f      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006422:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <UART_SetConfig+0x934>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800642e:	4b2a      	ldr	r3, [pc, #168]	; (80064d8 <UART_SetConfig+0x934>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <UART_SetConfig+0x928>)
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006440:	e00f      	b.n	8006462 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006442:	4b22      	ldr	r3, [pc, #136]	; (80064cc <UART_SetConfig+0x928>)
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006446:	e00c      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006448:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <UART_SetConfig+0x92c>)
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644c:	e009      	b.n	8006462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006454:	e005      	b.n	8006462 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80e7 	beq.w	8006638 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	4a19      	ldr	r2, [pc, #100]	; (80064d4 <UART_SetConfig+0x930>)
 8006470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006474:	461a      	mov	r2, r3
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	fbb3 f3f2 	udiv	r3, r3, r2
 800647c:	005a      	lsls	r2, r3, #1
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	441a      	add	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d916      	bls.n	80064c4 <UART_SetConfig+0x920>
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d212      	bcs.n	80064c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f023 030f 	bic.w	r3, r3, #15
 80064a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064b6:	4313      	orrs	r3, r2
 80064b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	e0b9      	b.n	8006638 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064ca:	e0b5      	b.n	8006638 <UART_SetConfig+0xa94>
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	08009ef0 	.word	0x08009ef0
 80064d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80064dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	dc49      	bgt.n	8006578 <UART_SetConfig+0x9d4>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	db7c      	blt.n	80065e2 <UART_SetConfig+0xa3e>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d87a      	bhi.n	80065e2 <UART_SetConfig+0xa3e>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x950>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	0800657f 	.word	0x0800657f
 80064f8:	08006587 	.word	0x08006587
 80064fc:	080065e3 	.word	0x080065e3
 8006500:	080065e3 	.word	0x080065e3
 8006504:	0800658f 	.word	0x0800658f
 8006508:	080065e3 	.word	0x080065e3
 800650c:	080065e3 	.word	0x080065e3
 8006510:	080065e3 	.word	0x080065e3
 8006514:	0800659f 	.word	0x0800659f
 8006518:	080065e3 	.word	0x080065e3
 800651c:	080065e3 	.word	0x080065e3
 8006520:	080065e3 	.word	0x080065e3
 8006524:	080065e3 	.word	0x080065e3
 8006528:	080065e3 	.word	0x080065e3
 800652c:	080065e3 	.word	0x080065e3
 8006530:	080065e3 	.word	0x080065e3
 8006534:	080065af 	.word	0x080065af
 8006538:	080065e3 	.word	0x080065e3
 800653c:	080065e3 	.word	0x080065e3
 8006540:	080065e3 	.word	0x080065e3
 8006544:	080065e3 	.word	0x080065e3
 8006548:	080065e3 	.word	0x080065e3
 800654c:	080065e3 	.word	0x080065e3
 8006550:	080065e3 	.word	0x080065e3
 8006554:	080065e3 	.word	0x080065e3
 8006558:	080065e3 	.word	0x080065e3
 800655c:	080065e3 	.word	0x080065e3
 8006560:	080065e3 	.word	0x080065e3
 8006564:	080065e3 	.word	0x080065e3
 8006568:	080065e3 	.word	0x080065e3
 800656c:	080065e3 	.word	0x080065e3
 8006570:	080065e3 	.word	0x080065e3
 8006574:	080065d5 	.word	0x080065d5
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d02e      	beq.n	80065da <UART_SetConfig+0xa36>
 800657c:	e031      	b.n	80065e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fd fc69 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8006582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006584:	e033      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006586:	f7fd fc7b 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 800658a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800658c:	e02f      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe feaa 	bl	80052ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659c:	e027      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800659e:	f107 0318 	add.w	r3, r7, #24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fff6 	bl	8005594 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ac:	e01f      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ae:	4b2d      	ldr	r3, [pc, #180]	; (8006664 <UART_SetConfig+0xac0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ba:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <UART_SetConfig+0xac0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <UART_SetConfig+0xac4>)
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065cc:	e00f      	b.n	80065ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065ce:	4b26      	ldr	r3, [pc, #152]	; (8006668 <UART_SetConfig+0xac4>)
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d2:	e00c      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <UART_SetConfig+0xac8>)
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d8:	e009      	b.n	80065ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065e0:	e005      	b.n	80065ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065ec:	bf00      	nop
    }

    if (pclk != 0U)
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d021      	beq.n	8006638 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <UART_SetConfig+0xacc>)
 80065fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fe:	461a      	mov	r2, r3
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006602:	fbb3 f2f2 	udiv	r2, r3, r2
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	441a      	add	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d909      	bls.n	8006632 <UART_SetConfig+0xa8e>
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006624:	d205      	bcs.n	8006632 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	b29a      	uxth	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
 8006630:	e002      	b.n	8006638 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2201      	movs	r2, #1
 800663c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2201      	movs	r2, #1
 8006644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006654:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006658:	4618      	mov	r0, r3
 800665a:	3748      	adds	r7, #72	; 0x48
 800665c:	46bd      	mov	sp, r7
 800665e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006662:	bf00      	nop
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	003d0900 	.word	0x003d0900
 8006670:	08009ef0 	.word	0x08009ef0

08006674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01a      	beq.n	800678a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006772:	d10a      	bne.n	800678a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b098      	sub	sp, #96	; 0x60
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c8:	f7fa fe76 	bl	80014b8 <HAL_GetTick>
 80067cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d12f      	bne.n	800683c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f88e 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d022      	beq.n	800683c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800680a:	653b      	str	r3, [r7, #80]	; 0x50
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e6      	bne.n	80067f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e063      	b.n	8006904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b04      	cmp	r3, #4
 8006848:	d149      	bne.n	80068de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	2200      	movs	r2, #0
 8006854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f857 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d03c      	beq.n	80068de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	623b      	str	r3, [r7, #32]
   return(result);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
 8006884:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b6:	61fa      	str	r2, [r7, #28]
 80068b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	69b9      	ldr	r1, [r7, #24]
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	617b      	str	r3, [r7, #20]
   return(result);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e012      	b.n	8006904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3758      	adds	r7, #88	; 0x58
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691c:	e049      	b.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d045      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fa fdc7 	bl	80014b8 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <UART_WaitOnFlagUntilTimeout+0x30>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e048      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d031      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b08      	cmp	r3, #8
 800695a:	d110      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2208      	movs	r2, #8
 8006962:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f839 	bl	80069dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2208      	movs	r2, #8
 800696e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e029      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698c:	d111      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f81f 	bl	80069dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e00f      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4013      	ands	r3, r2
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	bf0c      	ite	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	2300      	movne	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d0a6      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b095      	sub	sp, #84	; 0x54
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a02:	643b      	str	r3, [r7, #64]	; 0x40
 8006a04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <UART_EndRxTransfer+0xc8>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e5      	bne.n	8006a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d118      	bne.n	8006a84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6979      	ldr	r1, [r7, #20]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a98:	bf00      	nop
 8006a9a:	3754      	adds	r7, #84	; 0x54
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	effffffe 	.word	0xeffffffe

08006aa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UARTEx_DisableFifoMode+0x16>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e027      	b.n	8006b0e <HAL_UARTEx_DisableFifoMode+0x66>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2224      	movs	r2, #36	; 0x24
 8006aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006aec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e02d      	b.n	8006b8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2224      	movs	r2, #36	; 0x24
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f850 	bl	8006c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e02d      	b.n	8006c0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	; 0x24
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f812 	bl	8006c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d108      	bne.n	8006c36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c34:	e031      	b.n	8006c9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c36:	2310      	movs	r3, #16
 8006c38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	0e5b      	lsrs	r3, r3, #25
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	0f5b      	lsrs	r3, r3, #29
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	7b3a      	ldrb	r2, [r7, #12]
 8006c62:	4911      	ldr	r1, [pc, #68]	; (8006ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8006c64:	5c8a      	ldrb	r2, [r1, r2]
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c6a:	7b3a      	ldrb	r2, [r7, #12]
 8006c6c:	490f      	ldr	r1, [pc, #60]	; (8006cac <UARTEx_SetNbDataToProcess+0x98>)
 8006c6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	7b7a      	ldrb	r2, [r7, #13]
 8006c80:	4909      	ldr	r1, [pc, #36]	; (8006ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8006c82:	5c8a      	ldrb	r2, [r1, r2]
 8006c84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c88:	7b7a      	ldrb	r2, [r7, #13]
 8006c8a:	4908      	ldr	r1, [pc, #32]	; (8006cac <UARTEx_SetNbDataToProcess+0x98>)
 8006c8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	08009f08 	.word	0x08009f08
 8006cac:	08009f10 	.word	0x08009f10

08006cb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	f107 001c 	add.w	r0, r7, #28
 8006cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d120      	bne.n	8006d0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <USB_CoreInit+0xd4>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d105      	bne.n	8006cfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 faac 	bl	800725c <USB_CoreReset>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	e01a      	b.n	8006d40 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 faa0 	bl	800725c <USB_CoreReset>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
 8006d32:	e005      	b.n	8006d40 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d116      	bne.n	8006d74 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <USB_CoreInit+0xd8>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f043 0206 	orr.w	r2, r3, #6
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	ffbdffbf 	.word	0xffbdffbf
 8006d88:	03ee0000 	.word	0x03ee0000

08006d8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f023 0201 	bic.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d115      	bne.n	8006dfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f7fa fb77 	bl	80014d0 <HAL_Delay>
      ms++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fa29 	bl	8007240 <USB_GetMode>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d01e      	beq.n	8006e32 <USB_SetCurrentMode+0x84>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b31      	cmp	r3, #49	; 0x31
 8006df8:	d9f0      	bls.n	8006ddc <USB_SetCurrentMode+0x2e>
 8006dfa:	e01a      	b.n	8006e32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d115      	bne.n	8006e2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f7fa fb5e 	bl	80014d0 <HAL_Delay>
      ms++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa10 	bl	8007240 <USB_GetMode>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <USB_SetCurrentMode+0x84>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b31      	cmp	r3, #49	; 0x31
 8006e2a:	d9f0      	bls.n	8006e0e <USB_SetCurrentMode+0x60>
 8006e2c:	e001      	b.n	8006e32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e005      	b.n	8006e3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b32      	cmp	r3, #50	; 0x32
 8006e36:	d101      	bne.n	8006e3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e48:	b084      	sub	sp, #16
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	e009      	b.n	8006e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3340      	adds	r3, #64	; 0x40
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	2200      	movs	r2, #0
 8006e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b0e      	cmp	r3, #14
 8006e80:	d9f2      	bls.n	8006e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11c      	bne.n	8006ec2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e96:	f043 0302 	orr.w	r3, r3, #2
 8006e9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	e005      	b.n	8006ece <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee8:	461a      	mov	r2, r3
 8006eea:	680b      	ldr	r3, [r1, #0]
 8006eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10c      	bne.n	8006f0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006efa:	2100      	movs	r1, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f965 	bl	80071cc <USB_SetDevSpeed>
 8006f02:	e008      	b.n	8006f16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f04:	2101      	movs	r1, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f960 	bl	80071cc <USB_SetDevSpeed>
 8006f0c:	e003      	b.n	8006f16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f0e:	2103      	movs	r1, #3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f95b 	bl	80071cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f16:	2110      	movs	r1, #16
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8f3 	bl	8007104 <USB_FlushTxFifo>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f91f 	bl	800716c <USB_FlushRxFifo>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3e:	461a      	mov	r2, r3
 8006f40:	2300      	movs	r3, #0
 8006f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	461a      	mov	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	e043      	b.n	8006fea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f78:	d118      	bne.n	8006fac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e013      	b.n	8006fbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	e008      	b.n	8006fbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d3b7      	bcc.n	8006f62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	e043      	b.n	8007080 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700e:	d118      	bne.n	8007042 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e013      	b.n	8007054 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	461a      	mov	r2, r3
 800703a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	e008      	b.n	8007054 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d3b7      	bcc.n	8006ff8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d105      	bne.n	80070bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f043 0210 	orr.w	r2, r3, #16
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <USB_DevInit+0x2b4>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f043 0208 	orr.w	r2, r3, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <USB_DevInit+0x2b8>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f8:	b004      	add	sp, #16
 80070fa:	4770      	bx	lr
 80070fc:	803c3800 	.word	0x803c3800
 8007100:	40000004 	.word	0x40000004

08007104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a13      	ldr	r2, [pc, #76]	; (8007168 <USB_FlushTxFifo+0x64>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d901      	bls.n	8007124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e01b      	b.n	800715c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	daf2      	bge.n	8007112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	019b      	lsls	r3, r3, #6
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a08      	ldr	r2, [pc, #32]	; (8007168 <USB_FlushTxFifo+0x64>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e006      	b.n	800715c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d0f0      	beq.n	800713c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	00030d40 	.word	0x00030d40

0800716c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <USB_FlushRxFifo+0x5c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d901      	bls.n	800718a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e018      	b.n	80071bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	daf2      	bge.n	8007178 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2210      	movs	r2, #16
 800719a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <USB_FlushRxFifo+0x5c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e006      	b.n	80071bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d0f0      	beq.n	800719c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	00030d40 	.word	0x00030d40

080071cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ec:	4313      	orrs	r3, r2
 80071ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722c:	f043 0302 	orr.w	r3, r3, #2
 8007230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f003 0301 	and.w	r3, r3, #1
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <USB_CoreReset+0x64>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e01b      	b.n	80072b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	daf2      	bge.n	8007268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f043 0201 	orr.w	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <USB_CoreReset+0x64>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d901      	bls.n	80072a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e006      	b.n	80072b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d0f0      	beq.n	8007292 <USB_CoreReset+0x36>

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	00030d40 	.word	0x00030d40

080072c4 <__NVIC_SetPriority>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	db0a      	blt.n	80072ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	490c      	ldr	r1, [pc, #48]	; (8007310 <__NVIC_SetPriority+0x4c>)
 80072de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e2:	0112      	lsls	r2, r2, #4
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	440b      	add	r3, r1
 80072e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072ec:	e00a      	b.n	8007304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4908      	ldr	r1, [pc, #32]	; (8007314 <__NVIC_SetPriority+0x50>)
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	3b04      	subs	r3, #4
 80072fc:	0112      	lsls	r2, r2, #4
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	440b      	add	r3, r1
 8007302:	761a      	strb	r2, [r3, #24]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	e000e100 	.word	0xe000e100
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800731c:	2100      	movs	r1, #0
 800731e:	f06f 0004 	mvn.w	r0, #4
 8007322:	f7ff ffcf 	bl	80072c4 <__NVIC_SetPriority>
#endif
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007332:	f3ef 8305 	mrs	r3, IPSR
 8007336:	603b      	str	r3, [r7, #0]
  return(result);
 8007338:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800733e:	f06f 0305 	mvn.w	r3, #5
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	e00c      	b.n	8007360 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <osKernelInitialize+0x44>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d105      	bne.n	800735a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <osKernelInitialize+0x44>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007354:	2300      	movs	r3, #0
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	e002      	b.n	8007360 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
 800735e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007360:	687b      	ldr	r3, [r7, #4]
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	240007e8 	.word	0x240007e8

08007374 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737a:	f3ef 8305 	mrs	r3, IPSR
 800737e:	603b      	str	r3, [r7, #0]
  return(result);
 8007380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007386:	f06f 0305 	mvn.w	r3, #5
 800738a:	607b      	str	r3, [r7, #4]
 800738c:	e010      	b.n	80073b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <osKernelStart+0x48>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d109      	bne.n	80073aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007396:	f7ff ffbf 	bl	8007318 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <osKernelStart+0x48>)
 800739c:	2202      	movs	r2, #2
 800739e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073a0:	f001 fc9c 	bl	8008cdc <vTaskStartScheduler>
      stat = osOK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e002      	b.n	80073b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295
 80073ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073b0:	687b      	ldr	r3, [r7, #4]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	240007e8 	.word	0x240007e8

080073c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d0:	f3ef 8305 	mrs	r3, IPSR
 80073d4:	617b      	str	r3, [r7, #20]
  return(result);
 80073d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d17e      	bne.n	80074da <osThreadNew+0x11a>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d07b      	beq.n	80074da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073e2:	2380      	movs	r3, #128	; 0x80
 80073e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073e6:	2318      	movs	r3, #24
 80073e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295
 80073f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d045      	beq.n	8007486 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <osThreadNew+0x48>
        name = attr->name;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <osThreadNew+0x6e>
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b38      	cmp	r3, #56	; 0x38
 8007420:	d805      	bhi.n	800742e <osThreadNew+0x6e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <osThreadNew+0x72>
        return (NULL);
 800742e:	2300      	movs	r3, #0
 8007430:	e054      	b.n	80074dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	089b      	lsrs	r3, r3, #2
 8007440:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <osThreadNew+0xa8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b5b      	cmp	r3, #91	; 0x5b
 8007450:	d90a      	bls.n	8007468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <osThreadNew+0xa8>
        mem = 1;
 8007462:	2301      	movs	r3, #1
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e010      	b.n	800748a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10c      	bne.n	800748a <osThreadNew+0xca>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d108      	bne.n	800748a <osThreadNew+0xca>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <osThreadNew+0xca>
          mem = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e001      	b.n	800748a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d110      	bne.n	80074b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f001 fa42 	bl	8008930 <xTaskCreateStatic>
 80074ac:	4603      	mov	r3, r0
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	e013      	b.n	80074da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f107 0310 	add.w	r3, r7, #16
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f001 fa8d 	bl	80089ea <xTaskCreate>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d001      	beq.n	80074da <osThreadNew+0x11a>
            hTask = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074da:	693b      	ldr	r3, [r7, #16]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	; 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ec:	f3ef 8305 	mrs	r3, IPSR
 80074f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80074f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <osDelay+0x1c>
    stat = osErrorISR;
 80074f8:	f06f 0305 	mvn.w	r3, #5
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e007      	b.n	8007510 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <osDelay+0x2c>
      vTaskDelay(ticks);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fbb2 	bl	8008c74 <vTaskDelay>
    }
  }

  return (stat);
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <vApplicationGetIdleTaskMemory+0x2c>)
 800752c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4a06      	ldr	r2, [pc, #24]	; (800754c <vApplicationGetIdleTaskMemory+0x30>)
 8007532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2280      	movs	r2, #128	; 0x80
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	240007ec 	.word	0x240007ec
 800754c:	24000848 	.word	0x24000848

08007550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a07      	ldr	r2, [pc, #28]	; (800757c <vApplicationGetTimerTaskMemory+0x2c>)
 8007560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	4a06      	ldr	r2, [pc, #24]	; (8007580 <vApplicationGetTimerTaskMemory+0x30>)
 8007566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800756e:	601a      	str	r2, [r3, #0]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	24000a48 	.word	0x24000a48
 8007580:	24000aa4 	.word	0x24000aa4

08007584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007590:	f001 fc0a 	bl	8008da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007594:	4b5b      	ldr	r3, [pc, #364]	; (8007704 <pvPortMalloc+0x180>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800759c:	f000 f920 	bl	80077e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a0:	4b59      	ldr	r3, [pc, #356]	; (8007708 <pvPortMalloc+0x184>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f040 8093 	bne.w	80076d4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01d      	beq.n	80075f0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075b4:	2208      	movs	r2, #8
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d014      	beq.n	80075f0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f023 0307 	bic.w	r3, r3, #7
 80075cc:	3308      	adds	r3, #8
 80075ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d06e      	beq.n	80076d4 <pvPortMalloc+0x150>
 80075f6:	4b45      	ldr	r3, [pc, #276]	; (800770c <pvPortMalloc+0x188>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d869      	bhi.n	80076d4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007600:	4b43      	ldr	r3, [pc, #268]	; (8007710 <pvPortMalloc+0x18c>)
 8007602:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007604:	4b42      	ldr	r3, [pc, #264]	; (8007710 <pvPortMalloc+0x18c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760a:	e004      	b.n	8007616 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d903      	bls.n	8007628 <pvPortMalloc+0xa4>
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f1      	bne.n	800760c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <pvPortMalloc+0x180>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	429a      	cmp	r2, r3
 8007630:	d050      	beq.n	80076d4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2208      	movs	r2, #8
 8007638:	4413      	add	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	2308      	movs	r3, #8
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	429a      	cmp	r2, r3
 8007652:	d91f      	bls.n	8007694 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <pvPortMalloc+0xf8>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	613b      	str	r3, [r7, #16]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800768e:	69b8      	ldr	r0, [r7, #24]
 8007690:	f000 f908 	bl	80078a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007694:	4b1d      	ldr	r3, [pc, #116]	; (800770c <pvPortMalloc+0x188>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	4a1b      	ldr	r2, [pc, #108]	; (800770c <pvPortMalloc+0x188>)
 80076a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076a2:	4b1a      	ldr	r3, [pc, #104]	; (800770c <pvPortMalloc+0x188>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <pvPortMalloc+0x190>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d203      	bcs.n	80076b6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076ae:	4b17      	ldr	r3, [pc, #92]	; (800770c <pvPortMalloc+0x188>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a18      	ldr	r2, [pc, #96]	; (8007714 <pvPortMalloc+0x190>)
 80076b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <pvPortMalloc+0x184>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	431a      	orrs	r2, r3
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <pvPortMalloc+0x194>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	4a11      	ldr	r2, [pc, #68]	; (8007718 <pvPortMalloc+0x194>)
 80076d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076d4:	f001 fb76 	bl	8008dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <pvPortMalloc+0x174>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
}
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <pvPortMalloc+0x172>
	return pvReturn;
 80076f8:	69fb      	ldr	r3, [r7, #28]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	24004aac 	.word	0x24004aac
 8007708:	24004ac0 	.word	0x24004ac0
 800770c:	24004ab0 	.word	0x24004ab0
 8007710:	24004aa4 	.word	0x24004aa4
 8007714:	24004ab4 	.word	0x24004ab4
 8007718:	24004ab8 	.word	0x24004ab8

0800771c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d04d      	beq.n	80077ca <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800772e:	2308      	movs	r3, #8
 8007730:	425b      	negs	r3, r3
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4413      	add	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <vPortFree+0xb8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <vPortFree+0x44>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60fb      	str	r3, [r7, #12]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <vPortFree+0x62>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	60bb      	str	r3, [r7, #8]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <vPortFree+0xb8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01e      	beq.n	80077ca <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11a      	bne.n	80077ca <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <vPortFree+0xb8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	43db      	mvns	r3, r3
 800779e:	401a      	ands	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077a4:	f001 fb00 	bl	8008da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <vPortFree+0xbc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4413      	add	r3, r2
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <vPortFree+0xbc>)
 80077b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077b6:	6938      	ldr	r0, [r7, #16]
 80077b8:	f000 f874 	bl	80078a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077bc:	4b07      	ldr	r3, [pc, #28]	; (80077dc <vPortFree+0xc0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	4a06      	ldr	r2, [pc, #24]	; (80077dc <vPortFree+0xc0>)
 80077c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077c6:	f001 fafd 	bl	8008dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ca:	bf00      	nop
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	24004ac0 	.word	0x24004ac0
 80077d8:	24004ab0 	.word	0x24004ab0
 80077dc:	24004abc 	.word	0x24004abc

080077e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077ec:	4b27      	ldr	r3, [pc, #156]	; (800788c <prvHeapInit+0xac>)
 80077ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3307      	adds	r3, #7
 80077fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0307 	bic.w	r3, r3, #7
 8007806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	4a1f      	ldr	r2, [pc, #124]	; (800788c <prvHeapInit+0xac>)
 8007810:	4413      	add	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007818:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <prvHeapInit+0xb0>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800781e:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <prvHeapInit+0xb0>)
 8007820:	2200      	movs	r2, #0
 8007822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	4413      	add	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800782c:	2208      	movs	r2, #8
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a15      	ldr	r2, [pc, #84]	; (8007894 <prvHeapInit+0xb4>)
 8007840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <prvHeapInit+0xb4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2200      	movs	r2, #0
 8007848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <prvHeapInit+0xb4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007860:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <prvHeapInit+0xb4>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <prvHeapInit+0xb8>)
 800786e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4a09      	ldr	r2, [pc, #36]	; (800789c <prvHeapInit+0xbc>)
 8007876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007878:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <prvHeapInit+0xc0>)
 800787a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	24000ea4 	.word	0x24000ea4
 8007890:	24004aa4 	.word	0x24004aa4
 8007894:	24004aac 	.word	0x24004aac
 8007898:	24004ab4 	.word	0x24004ab4
 800789c:	24004ab0 	.word	0x24004ab0
 80078a0:	24004ac0 	.word	0x24004ac0

080078a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <prvInsertBlockIntoFreeList+0xac>)
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e002      	b.n	80078b8 <prvInsertBlockIntoFreeList+0x14>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d8f7      	bhi.n	80078b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4413      	add	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d108      	bne.n	80078e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d118      	bne.n	800792c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b15      	ldr	r3, [pc, #84]	; (8007954 <prvInsertBlockIntoFreeList+0xb0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d00d      	beq.n	8007922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	441a      	add	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e008      	b.n	8007934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <prvInsertBlockIntoFreeList+0xb0>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e003      	b.n	8007934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	429a      	cmp	r2, r3
 800793a:	d002      	beq.n	8007942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	24004aa4 	.word	0x24004aa4
 8007954:	24004aac 	.word	0x24004aac

08007958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f103 0208 	add.w	r2, r3, #8
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f103 0208 	add.w	r2, r3, #8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f103 0208 	add.w	r2, r3, #8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d103      	bne.n	8007a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e00c      	b.n	8007a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e002      	b.n	8007a28 <vListInsert+0x2e>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d2f6      	bcs.n	8007a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	601a      	str	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6892      	ldr	r2, [r2, #8]
 8007a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6852      	ldr	r2, [r2, #4]
 8007a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d103      	bne.n	8007aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	1e5a      	subs	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3b04      	subs	r3, #4
 8007ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007af0:	4a0c      	ldr	r2, [pc, #48]	; (8007b24 <pxPortInitialiseStack+0x64>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3b14      	subs	r3, #20
 8007afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f06f 0202 	mvn.w	r2, #2
 8007b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3b20      	subs	r3, #32
 8007b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	08007b29 	.word	0x08007b29

08007b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <prvTaskExitError+0x54>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d00a      	beq.n	8007b52 <prvTaskExitError+0x2a>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <prvTaskExitError+0x28>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60bb      	str	r3, [r7, #8]
}
 8007b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b66:	bf00      	nop
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0fc      	beq.n	8007b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	24000010 	.word	0x24000010

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	24004b0c 	.word	0x24004b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ba8:	4808      	ldr	r0, [pc, #32]	; (8007bcc <prvPortStartFirstTask+0x24>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8814 	msr	CONTROL, r0
 8007bba:	b662      	cpsie	i
 8007bbc:	b661      	cpsie	f
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	df00      	svc	0
 8007bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bca:	bf00      	nop
 8007bcc:	e000ed08 	.word	0xe000ed08

08007bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bd6:	4b46      	ldr	r3, [pc, #280]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a46      	ldr	r2, [pc, #280]	; (8007cf4 <xPortStartScheduler+0x124>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10a      	bne.n	8007bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bf6:	4b3e      	ldr	r3, [pc, #248]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a3f      	ldr	r2, [pc, #252]	; (8007cf8 <xPortStartScheduler+0x128>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x46>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c16:	4b39      	ldr	r3, [pc, #228]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <xPortStartScheduler+0x130>)
 8007c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c40:	2207      	movs	r2, #7
 8007c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c44:	e009      	b.n	8007c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c46:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d0ef      	beq.n	8007c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1c3 0307 	rsb	r3, r3, #7
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d00a      	beq.n	8007c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c92:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ca6:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <xPortStartScheduler+0x138>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cbe:	f000 f8dd 	bl	8007e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <xPortStartScheduler+0x13c>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cc8:	f000 f8fc 	bl	8007ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ccc:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <xPortStartScheduler+0x140>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <xPortStartScheduler+0x140>)
 8007cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd8:	f7ff ff66 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cdc:	f001 f9da 	bl	8009094 <vTaskSwitchContext>
	prvTaskExitError();
 8007ce0:	f7ff ff22 	bl	8007b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	e000ed00 	.word	0xe000ed00
 8007cf4:	410fc271 	.word	0x410fc271
 8007cf8:	410fc270 	.word	0x410fc270
 8007cfc:	e000e400 	.word	0xe000e400
 8007d00:	24004ac4 	.word	0x24004ac4
 8007d04:	24004ac8 	.word	0x24004ac8
 8007d08:	e000ed20 	.word	0xe000ed20
 8007d0c:	24000010 	.word	0x24000010
 8007d10:	e000ef34 	.word	0xe000ef34

08007d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3301      	adds	r3, #1
 8007d34:	4a0d      	ldr	r2, [pc, #52]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10f      	bne.n	8007d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <vPortEnterCritical+0x5c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	603b      	str	r3, [r7, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vPortEnterCritical+0x4a>
	}
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	24000010 	.word	0x24000010
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <vPortExitCritical+0x50>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <vPortExitCritical+0x24>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	607b      	str	r3, [r7, #4]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <vPortExitCritical+0x50>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <vPortExitCritical+0x50>)
 8007da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <vPortExitCritical+0x50>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d105      	bne.n	8007db6 <vPortExitCritical+0x42>
 8007daa:	2300      	movs	r3, #0
 8007dac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	24000010 	.word	0x24000010
	...

08007dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dd0:	f3ef 8009 	mrs	r0, PSP
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <pxCurrentTCBConst>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f01e 0f10 	tst.w	lr, #16
 8007de0:	bf08      	it	eq
 8007de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	6010      	str	r0, [r2, #0]
 8007dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007df4:	f380 8811 	msr	BASEPRI, r0
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f001 f948 	bl	8009094 <vTaskSwitchContext>
 8007e04:	f04f 0000 	mov.w	r0, #0
 8007e08:	f380 8811 	msr	BASEPRI, r0
 8007e0c:	bc09      	pop	{r0, r3}
 8007e0e:	6819      	ldr	r1, [r3, #0]
 8007e10:	6808      	ldr	r0, [r1, #0]
 8007e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e16:	f01e 0f10 	tst.w	lr, #16
 8007e1a:	bf08      	it	eq
 8007e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e20:	f380 8809 	msr	PSP, r0
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	f3af 8000 	nop.w

08007e30 <pxCurrentTCBConst>:
 8007e30:	24004b0c 	.word	0x24004b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
}
 8007e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e52:	f001 f865 	bl	8008f20 <xTaskIncrementTick>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <xPortSysTickHandler+0x40>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f383 8811 	msr	BASEPRI, r3
}
 8007e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e80:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <vPortSetupTimerInterrupt+0x34>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <vPortSetupTimerInterrupt+0x38>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <vPortSetupTimerInterrupt+0x3c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <vPortSetupTimerInterrupt+0x40>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	099b      	lsrs	r3, r3, #6
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <vPortSetupTimerInterrupt+0x44>)
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e9e:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <vPortSetupTimerInterrupt+0x34>)
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	e000e010 	.word	0xe000e010
 8007eb4:	e000e018 	.word	0xe000e018
 8007eb8:	24000000 	.word	0x24000000
 8007ebc:	10624dd3 	.word	0x10624dd3
 8007ec0:	e000e014 	.word	0xe000e014

08007ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ed4 <vPortEnableVFP+0x10>
 8007ec8:	6801      	ldr	r1, [r0, #0]
 8007eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ece:	6001      	str	r1, [r0, #0]
 8007ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ed2:	bf00      	nop
 8007ed4:	e000ed88 	.word	0xe000ed88

08007ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d914      	bls.n	8007f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <vPortValidateInterruptPriority+0x70>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ef4:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <vPortValidateInterruptPriority+0x74>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	7afa      	ldrb	r2, [r7, #11]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d20a      	bcs.n	8007f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	607b      	str	r3, [r7, #4]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f14:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <vPortValidateInterruptPriority+0x78>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <vPortValidateInterruptPriority+0x7c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d90a      	bls.n	8007f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	603b      	str	r3, [r7, #0]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <vPortValidateInterruptPriority+0x60>
	}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	e000e3f0 	.word	0xe000e3f0
 8007f4c:	24004ac4 	.word	0x24004ac4
 8007f50:	e000ed0c 	.word	0xe000ed0c
 8007f54:	24004ac8 	.word	0x24004ac8

08007f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGenericReset+0x2a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f82:	f7ff fec7 	bl	8007d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	441a      	add	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	68f9      	ldr	r1, [r7, #12]
 8007fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22ff      	movs	r2, #255	; 0xff
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d114      	bne.n	8008002 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01a      	beq.n	8008016 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3310      	adds	r3, #16
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 f903 	bl	80091f0 <xTaskRemoveFromEventList>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d012      	beq.n	8008016 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <xQueueGenericReset+0xcc>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	e009      	b.n	8008016 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3310      	adds	r3, #16
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fca6 	bl	8007958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fca1 	bl	8007958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008016:	f7ff fead 	bl	8007d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800801a:	2301      	movs	r3, #1
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <xQueueGenericCreateStatic+0x52>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <xQueueGenericCreateStatic+0x56>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <xQueueGenericCreateStatic+0x58>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	623b      	str	r3, [r7, #32]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <xQueueGenericCreateStatic+0x7e>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <xQueueGenericCreateStatic+0x82>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericCreateStatic+0x84>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	61fb      	str	r3, [r7, #28]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080c6:	2350      	movs	r3, #80	; 0x50
 80080c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b50      	cmp	r3, #80	; 0x50
 80080ce:	d00a      	beq.n	80080e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61bb      	str	r3, [r7, #24]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00d      	beq.n	800810e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f805 	bl	8008118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008110:	4618      	mov	r0, r3
 8008112:	3730      	adds	r7, #48	; 0x30
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e002      	b.n	800813a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008146:	2101      	movs	r1, #1
 8008148:	69b8      	ldr	r0, [r7, #24]
 800814a:	f7ff ff05 	bl	8007f58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08e      	sub	sp, #56	; 0x38
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800816e:	2300      	movs	r3, #0
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xQueueGenericSend+0x32>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <xQueueGenericSend+0x40>
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <xQueueGenericSend+0x44>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <xQueueGenericSend+0x46>
 80081a4:	2300      	movs	r3, #0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xQueueGenericSend+0x60>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d103      	bne.n	80081ce <xQueueGenericSend+0x6e>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <xQueueGenericSend+0x72>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <xQueueGenericSend+0x74>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xQueueGenericSend+0x8e>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	623b      	str	r3, [r7, #32]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ee:	f001 f9bd 	bl	800956c <xTaskGetSchedulerState>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <xQueueGenericSend+0x9e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <xQueueGenericSend+0xa2>
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <xQueueGenericSend+0xa4>
 8008202:	2300      	movs	r3, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xQueueGenericSend+0xbe>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61fb      	str	r3, [r7, #28]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800821e:	f7ff fd79 	bl	8007d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822a:	429a      	cmp	r2, r3
 800822c:	d302      	bcc.n	8008234 <xQueueGenericSend+0xd4>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d129      	bne.n	8008288 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823a:	f000 fa0b 	bl	8008654 <prvCopyDataToQueue>
 800823e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d010      	beq.n	800826a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 ffcf 	bl	80091f0 <xTaskRemoveFromEventList>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d013      	beq.n	8008280 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008258:	4b3f      	ldr	r3, [pc, #252]	; (8008358 <xQueueGenericSend+0x1f8>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	e00a      	b.n	8008280 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008270:	4b39      	ldr	r3, [pc, #228]	; (8008358 <xQueueGenericSend+0x1f8>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008280:	f7ff fd78 	bl	8007d74 <vPortExitCritical>
				return pdPASS;
 8008284:	2301      	movs	r3, #1
 8008286:	e063      	b.n	8008350 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800828e:	f7ff fd71 	bl	8007d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008292:	2300      	movs	r3, #0
 8008294:	e05c      	b.n	8008350 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 f809 	bl	80092b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082aa:	f7ff fd63 	bl	8007d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082ae:	f000 fd7b 	bl	8008da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082b2:	f7ff fd2f 	bl	8007d14 <vPortEnterCritical>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d103      	bne.n	80082cc <xQueueGenericSend+0x16c>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d8:	d103      	bne.n	80082e2 <xQueueGenericSend+0x182>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082e2:	f7ff fd47 	bl	8007d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082e6:	1d3a      	adds	r2, r7, #4
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fff8 	bl	80092e4 <xTaskCheckForTimeOut>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d124      	bne.n	8008344 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082fc:	f000 faa2 	bl	8008844 <prvIsQueueFull>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d018      	beq.n	8008338 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	3310      	adds	r3, #16
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f000 ff1e 	bl	8009150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008316:	f000 fa2d 	bl	8008774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800831a:	f000 fd53 	bl	8008dc4 <xTaskResumeAll>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f47f af7c 	bne.w	800821e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <xQueueGenericSend+0x1f8>)
 8008328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	e772      	b.n	800821e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833a:	f000 fa1b 	bl	8008774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800833e:	f000 fd41 	bl	8008dc4 <xTaskResumeAll>
 8008342:	e76c      	b.n	800821e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008346:	f000 fa15 	bl	8008774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800834a:	f000 fd3b 	bl	8008dc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800834e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008350:	4618      	mov	r0, r3
 8008352:	3738      	adds	r7, #56	; 0x38
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b090      	sub	sp, #64	; 0x40
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <xQueueGenericSendFromISR+0x3c>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <xQueueGenericSendFromISR+0x40>
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <xQueueGenericSendFromISR+0x42>
 800839c:	2300      	movs	r3, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d103      	bne.n	80083c6 <xQueueGenericSendFromISR+0x6a>
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <xQueueGenericSendFromISR+0x6e>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <xQueueGenericSendFromISR+0x70>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	623b      	str	r3, [r7, #32]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083e6:	f7ff fd77 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 80083ea:	f3ef 8211 	mrs	r2, BASEPRI
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61fa      	str	r2, [r7, #28]
 8008400:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008402:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <xQueueGenericSendFromISR+0xbc>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d12f      	bne.n	8008478 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800842e:	f000 f911 	bl	8008654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008432:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d112      	bne.n	8008462 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b00      	cmp	r3, #0
 8008442:	d016      	beq.n	8008472 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	3324      	adds	r3, #36	; 0x24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fed1 	bl	80091f0 <xTaskRemoveFromEventList>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00e      	beq.n	8008472 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	e007      	b.n	8008472 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008466:	3301      	adds	r3, #1
 8008468:	b2db      	uxtb	r3, r3
 800846a:	b25a      	sxtb	r2, r3
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008472:	2301      	movs	r3, #1
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008476:	e001      	b.n	800847c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f383 8811 	msr	BASEPRI, r3
}
 8008486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800848a:	4618      	mov	r0, r3
 800848c:	3740      	adds	r7, #64	; 0x40
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <xQueueReceive+0x30>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	623b      	str	r3, [r7, #32]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d103      	bne.n	80084d2 <xQueueReceive+0x3e>
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <xQueueReceive+0x42>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueReceive+0x44>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueReceive+0x5e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f2:	f001 f83b 	bl	800956c <xTaskGetSchedulerState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <xQueueReceive+0x6e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueReceive+0x72>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <xQueueReceive+0x74>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <xQueueReceive+0x8e>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	61bb      	str	r3, [r7, #24]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008522:	f7ff fbf7 	bl	8007d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01f      	beq.n	8008572 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008536:	f000 f8f7 	bl	8008728 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	1e5a      	subs	r2, r3, #1
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00f      	beq.n	800856a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	3310      	adds	r3, #16
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fe4e 	bl	80091f0 <xTaskRemoveFromEventList>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800855a:	4b3d      	ldr	r3, [pc, #244]	; (8008650 <xQueueReceive+0x1bc>)
 800855c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800856a:	f7ff fc03 	bl	8007d74 <vPortExitCritical>
				return pdPASS;
 800856e:	2301      	movs	r3, #1
 8008570:	e069      	b.n	8008646 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008578:	f7ff fbfc 	bl	8007d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800857c:	2300      	movs	r3, #0
 800857e:	e062      	b.n	8008646 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008586:	f107 0310 	add.w	r3, r7, #16
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fe94 	bl	80092b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008594:	f7ff fbee 	bl	8007d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008598:	f000 fc06 	bl	8008da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800859c:	f7ff fbba 	bl	8007d14 <vPortEnterCritical>
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d103      	bne.n	80085b6 <xQueueReceive+0x122>
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085bc:	b25b      	sxtb	r3, r3
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d103      	bne.n	80085cc <xQueueReceive+0x138>
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085cc:	f7ff fbd2 	bl	8007d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085d0:	1d3a      	adds	r2, r7, #4
 80085d2:	f107 0310 	add.w	r3, r7, #16
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fe83 	bl	80092e4 <xTaskCheckForTimeOut>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d123      	bne.n	800862c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e6:	f000 f917 	bl	8008818 <prvIsQueueEmpty>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d017      	beq.n	8008620 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	3324      	adds	r3, #36	; 0x24
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fda9 	bl	8009150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008600:	f000 f8b8 	bl	8008774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008604:	f000 fbde 	bl	8008dc4 <xTaskResumeAll>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d189      	bne.n	8008522 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <xQueueReceive+0x1bc>)
 8008610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	e780      	b.n	8008522 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008622:	f000 f8a7 	bl	8008774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008626:	f000 fbcd 	bl	8008dc4 <xTaskResumeAll>
 800862a:	e77a      	b.n	8008522 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800862c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800862e:	f000 f8a1 	bl	8008774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008632:	f000 fbc7 	bl	8008dc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008638:	f000 f8ee 	bl	8008818 <prvIsQueueEmpty>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	f43f af6f 	beq.w	8008522 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008646:	4618      	mov	r0, r3
 8008648:	3730      	adds	r7, #48	; 0x30
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10d      	bne.n	800868e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d14d      	bne.n	8008716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 ff92 	bl	80095a8 <xTaskPriorityDisinherit>
 8008684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	609a      	str	r2, [r3, #8]
 800868c:	e043      	b.n	8008716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d119      	bne.n	80086c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6858      	ldr	r0, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	461a      	mov	r2, r3
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	f001 fbbe 	bl	8009e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d32b      	bcc.n	8008716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	e026      	b.n	8008716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68d8      	ldr	r0, [r3, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	461a      	mov	r2, r3
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	f001 fba4 	bl	8009e20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	425b      	negs	r3, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d207      	bcs.n	8008704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	425b      	negs	r3, r3
 80086fe:	441a      	add	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d105      	bne.n	8008716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800871e:	697b      	ldr	r3, [r7, #20]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d018      	beq.n	800876c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	441a      	add	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d303      	bcc.n	800875c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68d9      	ldr	r1, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	461a      	mov	r2, r3
 8008766:	6838      	ldr	r0, [r7, #0]
 8008768:	f001 fb5a 	bl	8009e20 <memcpy>
	}
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800877c:	f7ff faca 	bl	8007d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008788:	e011      	b.n	80087ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d012      	beq.n	80087b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3324      	adds	r3, #36	; 0x24
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fd2a 	bl	80091f0 <xTaskRemoveFromEventList>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087a2:	f000 fe01 	bl	80093a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dce9      	bgt.n	800878a <prvUnlockQueue+0x16>
 80087b6:	e000      	b.n	80087ba <prvUnlockQueue+0x46>
					break;
 80087b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087c2:	f7ff fad7 	bl	8007d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087c6:	f7ff faa5 	bl	8007d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087d2:	e011      	b.n	80087f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d012      	beq.n	8008802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3310      	adds	r3, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fd05 	bl	80091f0 <xTaskRemoveFromEventList>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087ec:	f000 fddc 	bl	80093a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dce9      	bgt.n	80087d4 <prvUnlockQueue+0x60>
 8008800:	e000      	b.n	8008804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	22ff      	movs	r2, #255	; 0xff
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800880c:	f7ff fab2 	bl	8007d74 <vPortExitCritical>
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008820:	f7ff fa78 	bl	8007d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e001      	b.n	8008836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f7ff fa9d 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 800883a:	68fb      	ldr	r3, [r7, #12]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800884c:	f7ff fa62 	bl	8007d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	429a      	cmp	r2, r3
 800885a:	d102      	bne.n	8008862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800885c:	2301      	movs	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e001      	b.n	8008866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008866:	f7ff fa85 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 800886a:	68fb      	ldr	r3, [r7, #12]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e014      	b.n	80088ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008884:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <vQueueAddToRegistry+0x50>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10b      	bne.n	80088a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008890:	490c      	ldr	r1, [pc, #48]	; (80088c4 <vQueueAddToRegistry+0x50>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800889a:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <vQueueAddToRegistry+0x50>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088a6:	e006      	b.n	80088b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b07      	cmp	r3, #7
 80088b2:	d9e7      	bls.n	8008884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	24004acc 	.word	0x24004acc

080088c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088d8:	f7ff fa1c 	bl	8007d14 <vPortEnterCritical>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e2:	b25b      	sxtb	r3, r3
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d103      	bne.n	80088f2 <vQueueWaitForMessageRestricted+0x2a>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d103      	bne.n	8008908 <vQueueWaitForMessageRestricted+0x40>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008908:	f7ff fa34 	bl	8007d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fc3b 	bl	8009198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f7ff ff26 	bl	8008774 <prvUnlockQueue>
	}
 8008928:	bf00      	nop
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08e      	sub	sp, #56	; 0x38
 8008934:	af04      	add	r7, sp, #16
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	623b      	str	r3, [r7, #32]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTaskCreateStatic+0x46>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	61fb      	str	r3, [r7, #28]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008976:	235c      	movs	r3, #92	; 0x5c
 8008978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b5c      	cmp	r3, #92	; 0x5c
 800897e:	d00a      	beq.n	8008996 <xTaskCreateStatic+0x66>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61bb      	str	r3, [r7, #24]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01e      	beq.n	80089dc <xTaskCreateStatic+0xac>
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01b      	beq.n	80089dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b6:	2300      	movs	r3, #0
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	9302      	str	r3, [sp, #8]
 80089be:	f107 0314 	add.w	r3, r7, #20
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f850 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d6:	f000 f8dd 	bl	8008b94 <prvAddNewTaskToReadyList>
 80089da:	e001      	b.n	80089e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089e0:	697b      	ldr	r3, [r7, #20]
	}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	; 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b08c      	sub	sp, #48	; 0x30
 80089ee:	af04      	add	r7, sp, #16
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fdc0 	bl	8007584 <pvPortMalloc>
 8008a04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00e      	beq.n	8008a2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a0c:	205c      	movs	r0, #92	; 0x5c
 8008a0e:	f7fe fdb9 	bl	8007584 <pvPortMalloc>
 8008a12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a20:	e005      	b.n	8008a2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f7fe fe7a 	bl	800771c <vPortFree>
 8008a28:	e001      	b.n	8008a2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a3c:	88fa      	ldrh	r2, [r7, #6]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f80e 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a58:	69f8      	ldr	r0, [r7, #28]
 8008a5a:	f000 f89b 	bl	8008b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e002      	b.n	8008a6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	21a5      	movs	r1, #165	; 0xa5
 8008a8e:	f001 f99b 	bl	8009dc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008a9c:	440b      	add	r3, r1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f023 0307 	bic.w	r3, r3, #7
 8008aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	617b      	str	r3, [r7, #20]
}
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01f      	beq.n	8008b12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	e012      	b.n	8008afe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3334      	adds	r3, #52	; 0x34
 8008ae8:	460a      	mov	r2, r1
 8008aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b0f      	cmp	r3, #15
 8008b02:	d9e9      	bls.n	8008ad8 <prvInitialiseNewTask+0x64>
 8008b04:	e000      	b.n	8008b08 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b10:	e003      	b.n	8008b1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	2b37      	cmp	r3, #55	; 0x37
 8008b1e:	d901      	bls.n	8008b24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b20:	2337      	movs	r3, #55	; 0x37
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff2c 	bl	8007998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3318      	adds	r3, #24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff27 	bl	8007998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2200      	movs	r2, #0
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	69b8      	ldr	r0, [r7, #24]
 8008b74:	f7fe ffa4 	bl	8007ac0 <pxPortInitialiseStack>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b8a:	bf00      	nop
 8008b8c:	3720      	adds	r7, #32
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b9c:	f7ff f8ba 	bl	8007d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008baa:	4b2c      	ldr	r3, [pc, #176]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bb2:	4a2a      	ldr	r2, [pc, #168]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bb8:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d110      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bc0:	f000 fc16 	bl	80093f0 <prvInitialiseTaskLists>
 8008bc4:	e00d      	b.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bc6:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d109      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d802      	bhi.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bdc:	4a1f      	ldr	r2, [pc, #124]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008be2:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bec:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d903      	bls.n	8008c08 <prvAddNewTaskToReadyList+0x74>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4a15      	ldr	r2, [pc, #84]	; (8008c6c <prvAddNewTaskToReadyList+0xd8>)
 8008c16:	441a      	add	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fe fec7 	bl	80079b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c24:	f7ff f8a6 	bl	8007d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c28:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d207      	bcs.n	8008c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <prvAddNewTaskToReadyList+0xdc>)
 8008c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	24004fe0 	.word	0x24004fe0
 8008c5c:	24004b0c 	.word	0x24004b0c
 8008c60:	24004fec 	.word	0x24004fec
 8008c64:	24004ffc 	.word	0x24004ffc
 8008c68:	24004fe8 	.word	0x24004fe8
 8008c6c:	24004b10 	.word	0x24004b10
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d017      	beq.n	8008cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c86:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <vTaskDelay+0x60>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <vTaskDelay+0x30>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60bb      	str	r3, [r7, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ca4:	f000 f880 	bl	8008da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ca8:	2100      	movs	r1, #0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fcea 	bl	8009684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cb0:	f000 f888 	bl	8008dc4 <xTaskResumeAll>
 8008cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d107      	bne.n	8008ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <vTaskDelay+0x64>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	24005008 	.word	0x24005008
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08a      	sub	sp, #40	; 0x28
 8008ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cea:	463a      	mov	r2, r7
 8008cec:	1d39      	adds	r1, r7, #4
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fc12 	bl	800751c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	9202      	str	r2, [sp, #8]
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2300      	movs	r3, #0
 8008d08:	460a      	mov	r2, r1
 8008d0a:	4921      	ldr	r1, [pc, #132]	; (8008d90 <vTaskStartScheduler+0xb4>)
 8008d0c:	4821      	ldr	r0, [pc, #132]	; (8008d94 <vTaskStartScheduler+0xb8>)
 8008d0e:	f7ff fe0f 	bl	8008930 <xTaskCreateStatic>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4a20      	ldr	r2, [pc, #128]	; (8008d98 <vTaskStartScheduler+0xbc>)
 8008d16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d18:	4b1f      	ldr	r3, [pc, #124]	; (8008d98 <vTaskStartScheduler+0xbc>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e001      	b.n	8008d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d30:	f000 fcfc 	bl	800972c <xTimerCreateTimerTask>
 8008d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d116      	bne.n	8008d6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	613b      	str	r3, [r7, #16]
}
 8008d4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <vTaskStartScheduler+0xc0>)
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d58:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <vTaskStartScheduler+0xc4>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <vTaskStartScheduler+0xc8>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d64:	f7fe ff34 	bl	8007bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d68:	e00e      	b.n	8008d88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d10a      	bne.n	8008d88 <vTaskStartScheduler+0xac>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60fb      	str	r3, [r7, #12]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <vTaskStartScheduler+0xaa>
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08009e80 	.word	0x08009e80
 8008d94:	080093c1 	.word	0x080093c1
 8008d98:	24005004 	.word	0x24005004
 8008d9c:	24005000 	.word	0x24005000
 8008da0:	24004fec 	.word	0x24004fec
 8008da4:	24004fe4 	.word	0x24004fe4

08008da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008dac:	4b04      	ldr	r3, [pc, #16]	; (8008dc0 <vTaskSuspendAll+0x18>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3301      	adds	r3, #1
 8008db2:	4a03      	ldr	r2, [pc, #12]	; (8008dc0 <vTaskSuspendAll+0x18>)
 8008db4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008db6:	bf00      	nop
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	24005008 	.word	0x24005008

08008dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dd2:	4b42      	ldr	r3, [pc, #264]	; (8008edc <xTaskResumeAll+0x118>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	603b      	str	r3, [r7, #0]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008df0:	f7fe ff90 	bl	8007d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008df4:	4b39      	ldr	r3, [pc, #228]	; (8008edc <xTaskResumeAll+0x118>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	4a38      	ldr	r2, [pc, #224]	; (8008edc <xTaskResumeAll+0x118>)
 8008dfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dfe:	4b37      	ldr	r3, [pc, #220]	; (8008edc <xTaskResumeAll+0x118>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d162      	bne.n	8008ecc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e06:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <xTaskResumeAll+0x11c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05e      	beq.n	8008ecc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e0e:	e02f      	b.n	8008e70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e10:	4b34      	ldr	r3, [pc, #208]	; (8008ee4 <xTaskResumeAll+0x120>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3318      	adds	r3, #24
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fe25 	bl	8007a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fe20 	bl	8007a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4b2d      	ldr	r3, [pc, #180]	; (8008ee8 <xTaskResumeAll+0x124>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d903      	bls.n	8008e40 <xTaskResumeAll+0x7c>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4a2a      	ldr	r2, [pc, #168]	; (8008ee8 <xTaskResumeAll+0x124>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a27      	ldr	r2, [pc, #156]	; (8008eec <xTaskResumeAll+0x128>)
 8008e4e:	441a      	add	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fe fdab 	bl	80079b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e60:	4b23      	ldr	r3, [pc, #140]	; (8008ef0 <xTaskResumeAll+0x12c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e6a:	4b22      	ldr	r3, [pc, #136]	; (8008ef4 <xTaskResumeAll+0x130>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <xTaskResumeAll+0x120>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1cb      	bne.n	8008e10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e7e:	f000 fb55 	bl	800952c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e82:	4b1d      	ldr	r3, [pc, #116]	; (8008ef8 <xTaskResumeAll+0x134>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d010      	beq.n	8008eb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e8e:	f000 f847 	bl	8008f20 <xTaskIncrementTick>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e98:	4b16      	ldr	r3, [pc, #88]	; (8008ef4 <xTaskResumeAll+0x130>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f1      	bne.n	8008e8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <xTaskResumeAll+0x134>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008eb0:	4b10      	ldr	r3, [pc, #64]	; (8008ef4 <xTaskResumeAll+0x130>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <xTaskResumeAll+0x138>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ecc:	f7fe ff52 	bl	8007d74 <vPortExitCritical>

	return xAlreadyYielded;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	24005008 	.word	0x24005008
 8008ee0:	24004fe0 	.word	0x24004fe0
 8008ee4:	24004fa0 	.word	0x24004fa0
 8008ee8:	24004fe8 	.word	0x24004fe8
 8008eec:	24004b10 	.word	0x24004b10
 8008ef0:	24004b0c 	.word	0x24004b0c
 8008ef4:	24004ff4 	.word	0x24004ff4
 8008ef8:	24004ff0 	.word	0x24004ff0
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <xTaskGetTickCount+0x1c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f0c:	687b      	ldr	r3, [r7, #4]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	24004fe4 	.word	0x24004fe4

08008f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2a:	4b4f      	ldr	r3, [pc, #316]	; (8009068 <xTaskIncrementTick+0x148>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f040 808f 	bne.w	8009052 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f34:	4b4d      	ldr	r3, [pc, #308]	; (800906c <xTaskIncrementTick+0x14c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f3c:	4a4b      	ldr	r2, [pc, #300]	; (800906c <xTaskIncrementTick+0x14c>)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d120      	bne.n	8008f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f48:	4b49      	ldr	r3, [pc, #292]	; (8009070 <xTaskIncrementTick+0x150>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	603b      	str	r3, [r7, #0]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <xTaskIncrementTick+0x46>
 8008f68:	4b41      	ldr	r3, [pc, #260]	; (8009070 <xTaskIncrementTick+0x150>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	4b41      	ldr	r3, [pc, #260]	; (8009074 <xTaskIncrementTick+0x154>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a3f      	ldr	r2, [pc, #252]	; (8009070 <xTaskIncrementTick+0x150>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4a3f      	ldr	r2, [pc, #252]	; (8009074 <xTaskIncrementTick+0x154>)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	4b3e      	ldr	r3, [pc, #248]	; (8009078 <xTaskIncrementTick+0x158>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	4a3d      	ldr	r2, [pc, #244]	; (8009078 <xTaskIncrementTick+0x158>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	f000 fad1 	bl	800952c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f8a:	4b3c      	ldr	r3, [pc, #240]	; (800907c <xTaskIncrementTick+0x15c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d349      	bcc.n	8009028 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f94:	4b36      	ldr	r3, [pc, #216]	; (8009070 <xTaskIncrementTick+0x150>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9e:	4b37      	ldr	r3, [pc, #220]	; (800907c <xTaskIncrementTick+0x15c>)
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	601a      	str	r2, [r3, #0]
					break;
 8008fa6:	e03f      	b.n	8009028 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa8:	4b31      	ldr	r3, [pc, #196]	; (8009070 <xTaskIncrementTick+0x150>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d203      	bcs.n	8008fc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fc0:	4a2e      	ldr	r2, [pc, #184]	; (800907c <xTaskIncrementTick+0x15c>)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fc6:	e02f      	b.n	8009028 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fd4d 	bl	8007a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	3318      	adds	r3, #24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fd44 	bl	8007a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <xTaskIncrementTick+0x160>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d903      	bls.n	8008ff8 <xTaskIncrementTick+0xd8>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a22      	ldr	r2, [pc, #136]	; (8009080 <xTaskIncrementTick+0x160>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a1f      	ldr	r2, [pc, #124]	; (8009084 <xTaskIncrementTick+0x164>)
 8009006:	441a      	add	r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fccf 	bl	80079b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <xTaskIncrementTick+0x168>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901e:	429a      	cmp	r2, r3
 8009020:	d3b8      	bcc.n	8008f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009026:	e7b5      	b.n	8008f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009028:	4b17      	ldr	r3, [pc, #92]	; (8009088 <xTaskIncrementTick+0x168>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	4915      	ldr	r1, [pc, #84]	; (8009084 <xTaskIncrementTick+0x164>)
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d901      	bls.n	8009044 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009044:	4b11      	ldr	r3, [pc, #68]	; (800908c <xTaskIncrementTick+0x16c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e004      	b.n	800905c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <xTaskIncrementTick+0x170>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	4a0d      	ldr	r2, [pc, #52]	; (8009090 <xTaskIncrementTick+0x170>)
 800905a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800905c:	697b      	ldr	r3, [r7, #20]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	24005008 	.word	0x24005008
 800906c:	24004fe4 	.word	0x24004fe4
 8009070:	24004f98 	.word	0x24004f98
 8009074:	24004f9c 	.word	0x24004f9c
 8009078:	24004ff8 	.word	0x24004ff8
 800907c:	24005000 	.word	0x24005000
 8009080:	24004fe8 	.word	0x24004fe8
 8009084:	24004b10 	.word	0x24004b10
 8009088:	24004b0c 	.word	0x24004b0c
 800908c:	24004ff4 	.word	0x24004ff4
 8009090:	24004ff0 	.word	0x24004ff0

08009094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800909a:	4b28      	ldr	r3, [pc, #160]	; (800913c <vTaskSwitchContext+0xa8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090a2:	4b27      	ldr	r3, [pc, #156]	; (8009140 <vTaskSwitchContext+0xac>)
 80090a4:	2201      	movs	r2, #1
 80090a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090a8:	e041      	b.n	800912e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80090aa:	4b25      	ldr	r3, [pc, #148]	; (8009140 <vTaskSwitchContext+0xac>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b0:	4b24      	ldr	r3, [pc, #144]	; (8009144 <vTaskSwitchContext+0xb0>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e010      	b.n	80090da <vTaskSwitchContext+0x46>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	607b      	str	r3, [r7, #4]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <vTaskSwitchContext+0x3e>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	491b      	ldr	r1, [pc, #108]	; (8009148 <vTaskSwitchContext+0xb4>)
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	440b      	add	r3, r1
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0e4      	beq.n	80090b8 <vTaskSwitchContext+0x24>
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a13      	ldr	r2, [pc, #76]	; (8009148 <vTaskSwitchContext+0xb4>)
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	605a      	str	r2, [r3, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	3308      	adds	r3, #8
 8009110:	429a      	cmp	r2, r3
 8009112:	d104      	bne.n	800911e <vTaskSwitchContext+0x8a>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	605a      	str	r2, [r3, #4]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	4a09      	ldr	r2, [pc, #36]	; (800914c <vTaskSwitchContext+0xb8>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	4a06      	ldr	r2, [pc, #24]	; (8009144 <vTaskSwitchContext+0xb0>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6013      	str	r3, [r2, #0]
}
 800912e:	bf00      	nop
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	24005008 	.word	0x24005008
 8009140:	24004ff4 	.word	0x24004ff4
 8009144:	24004fe8 	.word	0x24004fe8
 8009148:	24004b10 	.word	0x24004b10
 800914c:	24004b0c 	.word	0x24004b0c

08009150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	60fb      	str	r3, [r7, #12]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009176:	4b07      	ldr	r3, [pc, #28]	; (8009194 <vTaskPlaceOnEventList+0x44>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3318      	adds	r3, #24
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fe fc3b 	bl	80079fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009184:	2101      	movs	r1, #1
 8009186:	6838      	ldr	r0, [r7, #0]
 8009188:	f000 fa7c 	bl	8009684 <prvAddCurrentTaskToDelayedList>
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	24004b0c 	.word	0x24004b0c

08009198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	617b      	str	r3, [r7, #20]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <vTaskPlaceOnEventListRestricted+0x54>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3318      	adds	r3, #24
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7fe fbf2 	bl	80079b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295
 80091d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68b8      	ldr	r0, [r7, #8]
 80091de:	f000 fa51 	bl	8009684 <prvAddCurrentTaskToDelayedList>
	}
 80091e2:	bf00      	nop
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	24004b0c 	.word	0x24004b0c

080091f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	3318      	adds	r3, #24
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fc23 	bl	8007a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <xTaskRemoveFromEventList+0xb0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d11d      	bne.n	800926a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3304      	adds	r3, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fc1a 	bl	8007a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <xTaskRemoveFromEventList+0xb4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d903      	bls.n	800924c <xTaskRemoveFromEventList+0x5c>
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a16      	ldr	r2, [pc, #88]	; (80092a4 <xTaskRemoveFromEventList+0xb4>)
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <xTaskRemoveFromEventList+0xb8>)
 800925a:	441a      	add	r2, r3
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fe fba5 	bl	80079b2 <vListInsertEnd>
 8009268:	e005      	b.n	8009276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3318      	adds	r3, #24
 800926e:	4619      	mov	r1, r3
 8009270:	480e      	ldr	r0, [pc, #56]	; (80092ac <xTaskRemoveFromEventList+0xbc>)
 8009272:	f7fe fb9e 	bl	80079b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <xTaskRemoveFromEventList+0xc0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	429a      	cmp	r2, r3
 8009282:	d905      	bls.n	8009290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <xTaskRemoveFromEventList+0xc4>)
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e001      	b.n	8009294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009294:	697b      	ldr	r3, [r7, #20]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	24005008 	.word	0x24005008
 80092a4:	24004fe8 	.word	0x24004fe8
 80092a8:	24004b10 	.word	0x24004b10
 80092ac:	24004fa0 	.word	0x24004fa0
 80092b0:	24004b0c 	.word	0x24004b0c
 80092b4:	24004ff4 	.word	0x24004ff4

080092b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <vTaskInternalSetTimeOutState+0x24>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <vTaskInternalSetTimeOutState+0x28>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	605a      	str	r2, [r3, #4]
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	24004ff8 	.word	0x24004ff8
 80092e0:	24004fe4 	.word	0x24004fe4

080092e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	613b      	str	r3, [r7, #16]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009326:	f7fe fcf5 	bl	8007d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800932a:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <xTaskCheckForTimeOut+0xbc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d102      	bne.n	800934a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e023      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <xTaskCheckForTimeOut+0xc0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d007      	beq.n	8009366 <xTaskCheckForTimeOut+0x82>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	429a      	cmp	r2, r3
 800935e:	d302      	bcc.n	8009366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	61fb      	str	r3, [r7, #28]
 8009364:	e015      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d20b      	bcs.n	8009388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	1ad2      	subs	r2, r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff ff9b 	bl	80092b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	e004      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800938e:	2301      	movs	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009392:	f7fe fcef 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 8009396:	69fb      	ldr	r3, [r7, #28]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	24004fe4 	.word	0x24004fe4
 80093a4:	24004ff8 	.word	0x24004ff8

080093a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <vTaskMissedYield+0x14>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	24004ff4 	.word	0x24004ff4

080093c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093c8:	f000 f852 	bl	8009470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <prvIdleTask+0x28>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d9f9      	bls.n	80093c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <prvIdleTask+0x2c>)
 80093d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093e4:	e7f0      	b.n	80093c8 <prvIdleTask+0x8>
 80093e6:	bf00      	nop
 80093e8:	24004b10 	.word	0x24004b10
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093f6:	2300      	movs	r3, #0
 80093f8:	607b      	str	r3, [r7, #4]
 80093fa:	e00c      	b.n	8009416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a12      	ldr	r2, [pc, #72]	; (8009450 <prvInitialiseTaskLists+0x60>)
 8009408:	4413      	add	r3, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe faa4 	bl	8007958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3301      	adds	r3, #1
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b37      	cmp	r3, #55	; 0x37
 800941a:	d9ef      	bls.n	80093fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800941c:	480d      	ldr	r0, [pc, #52]	; (8009454 <prvInitialiseTaskLists+0x64>)
 800941e:	f7fe fa9b 	bl	8007958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009422:	480d      	ldr	r0, [pc, #52]	; (8009458 <prvInitialiseTaskLists+0x68>)
 8009424:	f7fe fa98 	bl	8007958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009428:	480c      	ldr	r0, [pc, #48]	; (800945c <prvInitialiseTaskLists+0x6c>)
 800942a:	f7fe fa95 	bl	8007958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800942e:	480c      	ldr	r0, [pc, #48]	; (8009460 <prvInitialiseTaskLists+0x70>)
 8009430:	f7fe fa92 	bl	8007958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009434:	480b      	ldr	r0, [pc, #44]	; (8009464 <prvInitialiseTaskLists+0x74>)
 8009436:	f7fe fa8f 	bl	8007958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800943a:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <prvInitialiseTaskLists+0x78>)
 800943c:	4a05      	ldr	r2, [pc, #20]	; (8009454 <prvInitialiseTaskLists+0x64>)
 800943e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <prvInitialiseTaskLists+0x7c>)
 8009442:	4a05      	ldr	r2, [pc, #20]	; (8009458 <prvInitialiseTaskLists+0x68>)
 8009444:	601a      	str	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	24004b10 	.word	0x24004b10
 8009454:	24004f70 	.word	0x24004f70
 8009458:	24004f84 	.word	0x24004f84
 800945c:	24004fa0 	.word	0x24004fa0
 8009460:	24004fb4 	.word	0x24004fb4
 8009464:	24004fcc 	.word	0x24004fcc
 8009468:	24004f98 	.word	0x24004f98
 800946c:	24004f9c 	.word	0x24004f9c

08009470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009476:	e019      	b.n	80094ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009478:	f7fe fc4c 	bl	8007d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <prvCheckTasksWaitingTermination+0x50>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3304      	adds	r3, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe faef 	bl	8007a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <prvCheckTasksWaitingTermination+0x54>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3b01      	subs	r3, #1
 8009494:	4a0b      	ldr	r2, [pc, #44]	; (80094c4 <prvCheckTasksWaitingTermination+0x54>)
 8009496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009498:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3b01      	subs	r3, #1
 800949e:	4a0a      	ldr	r2, [pc, #40]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 80094a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094a2:	f7fe fc67 	bl	8007d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f810 	bl	80094cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e1      	bne.n	8009478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	24004fb4 	.word	0x24004fb4
 80094c4:	24004fe0 	.word	0x24004fe0
 80094c8:	24004fc8 	.word	0x24004fc8

080094cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe f91a 	bl	800771c <vPortFree>
				vPortFree( pxTCB );
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fe f917 	bl	800771c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094ee:	e018      	b.n	8009522 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d103      	bne.n	8009502 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7fe f90e 	bl	800771c <vPortFree>
	}
 8009500:	e00f      	b.n	8009522 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009508:	2b02      	cmp	r3, #2
 800950a:	d00a      	beq.n	8009522 <prvDeleteTCB+0x56>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60fb      	str	r3, [r7, #12]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <prvDeleteTCB+0x54>
	}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009532:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <prvResetNextTaskUnblockTime+0x38>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <prvResetNextTaskUnblockTime+0x3c>)
 800953e:	f04f 32ff 	mov.w	r2, #4294967295
 8009542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009544:	e008      	b.n	8009558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009546:	4b07      	ldr	r3, [pc, #28]	; (8009564 <prvResetNextTaskUnblockTime+0x38>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a04      	ldr	r2, [pc, #16]	; (8009568 <prvResetNextTaskUnblockTime+0x3c>)
 8009556:	6013      	str	r3, [r2, #0]
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	24004f98 	.word	0x24004f98
 8009568:	24005000 	.word	0x24005000

0800956c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009572:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <xTaskGetSchedulerState+0x34>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800957a:	2301      	movs	r3, #1
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	e008      	b.n	8009592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009580:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <xTaskGetSchedulerState+0x38>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009588:	2302      	movs	r3, #2
 800958a:	607b      	str	r3, [r7, #4]
 800958c:	e001      	b.n	8009592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800958e:	2300      	movs	r3, #0
 8009590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009592:	687b      	ldr	r3, [r7, #4]
	}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	24004fec 	.word	0x24004fec
 80095a4:	24005008 	.word	0x24005008

080095a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d056      	beq.n	800966c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095be:	4b2e      	ldr	r3, [pc, #184]	; (8009678 <xTaskPriorityDisinherit+0xd0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d00a      	beq.n	80095de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	60fb      	str	r3, [r7, #12]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60bb      	str	r3, [r7, #8]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009600:	1e5a      	subs	r2, r3, #1
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960e:	429a      	cmp	r2, r3
 8009610:	d02c      	beq.n	800966c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009616:	2b00      	cmp	r3, #0
 8009618:	d128      	bne.n	800966c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fa24 	bl	8007a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <xTaskPriorityDisinherit+0xd4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d903      	bls.n	800964c <xTaskPriorityDisinherit+0xa4>
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	4a0c      	ldr	r2, [pc, #48]	; (800967c <xTaskPriorityDisinherit+0xd4>)
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <xTaskPriorityDisinherit+0xd8>)
 800965a:	441a      	add	r2, r3
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3304      	adds	r3, #4
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f7fe f9a5 	bl	80079b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800966c:	697b      	ldr	r3, [r7, #20]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	24004b0c 	.word	0x24004b0c
 800967c:	24004fe8 	.word	0x24004fe8
 8009680:	24004b10 	.word	0x24004b10

08009684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800968e:	4b21      	ldr	r3, [pc, #132]	; (8009714 <prvAddCurrentTaskToDelayedList+0x90>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009694:	4b20      	ldr	r3, [pc, #128]	; (8009718 <prvAddCurrentTaskToDelayedList+0x94>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3304      	adds	r3, #4
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe f9e6 	bl	8007a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a6:	d10a      	bne.n	80096be <prvAddCurrentTaskToDelayedList+0x3a>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ae:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4819      	ldr	r0, [pc, #100]	; (800971c <prvAddCurrentTaskToDelayedList+0x98>)
 80096b8:	f7fe f97b 	bl	80079b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096bc:	e026      	b.n	800970c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4413      	add	r3, r2
 80096c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096c6:	4b14      	ldr	r3, [pc, #80]	; (8009718 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d209      	bcs.n	80096ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d6:	4b12      	ldr	r3, [pc, #72]	; (8009720 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <prvAddCurrentTaskToDelayedList+0x94>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3304      	adds	r3, #4
 80096e0:	4619      	mov	r1, r3
 80096e2:	4610      	mov	r0, r2
 80096e4:	f7fe f989 	bl	80079fa <vListInsert>
}
 80096e8:	e010      	b.n	800970c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ea:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <prvAddCurrentTaskToDelayedList+0x94>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7fe f97f 	bl	80079fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	429a      	cmp	r2, r3
 8009704:	d202      	bcs.n	800970c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009706:	4a08      	ldr	r2, [pc, #32]	; (8009728 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6013      	str	r3, [r2, #0]
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	24004fe4 	.word	0x24004fe4
 8009718:	24004b0c 	.word	0x24004b0c
 800971c:	24004fcc 	.word	0x24004fcc
 8009720:	24004f9c 	.word	0x24004f9c
 8009724:	24004f98 	.word	0x24004f98
 8009728:	24005000 	.word	0x24005000

0800972c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	; 0x28
 8009730:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009736:	f000 fb07 	bl	8009d48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800973a:	4b1c      	ldr	r3, [pc, #112]	; (80097ac <xTimerCreateTimerTask+0x80>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d021      	beq.n	8009786 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800974a:	1d3a      	adds	r2, r7, #4
 800974c:	f107 0108 	add.w	r1, r7, #8
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	4618      	mov	r0, r3
 8009756:	f7fd fefb 	bl	8007550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	9202      	str	r2, [sp, #8]
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	2302      	movs	r3, #2
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2300      	movs	r3, #0
 800976a:	460a      	mov	r2, r1
 800976c:	4910      	ldr	r1, [pc, #64]	; (80097b0 <xTimerCreateTimerTask+0x84>)
 800976e:	4811      	ldr	r0, [pc, #68]	; (80097b4 <xTimerCreateTimerTask+0x88>)
 8009770:	f7ff f8de 	bl	8008930 <xTaskCreateStatic>
 8009774:	4603      	mov	r3, r0
 8009776:	4a10      	ldr	r2, [pc, #64]	; (80097b8 <xTimerCreateTimerTask+0x8c>)
 8009778:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800977a:	4b0f      	ldr	r3, [pc, #60]	; (80097b8 <xTimerCreateTimerTask+0x8c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009782:	2301      	movs	r3, #1
 8009784:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10a      	bne.n	80097a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	613b      	str	r3, [r7, #16]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097a2:	697b      	ldr	r3, [r7, #20]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	2400503c 	.word	0x2400503c
 80097b0:	08009e88 	.word	0x08009e88
 80097b4:	080098f1 	.word	0x080098f1
 80097b8:	24005040 	.word	0x24005040

080097bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	623b      	str	r3, [r7, #32]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097ea:	4b1a      	ldr	r3, [pc, #104]	; (8009854 <xTimerGenericCommand+0x98>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d02a      	beq.n	8009848 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b05      	cmp	r3, #5
 8009802:	dc18      	bgt.n	8009836 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009804:	f7ff feb2 	bl	800956c <xTaskGetSchedulerState>
 8009808:	4603      	mov	r3, r0
 800980a:	2b02      	cmp	r3, #2
 800980c:	d109      	bne.n	8009822 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <xTimerGenericCommand+0x98>)
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	f107 0110 	add.w	r1, r7, #16
 8009816:	2300      	movs	r3, #0
 8009818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981a:	f7fe fca1 	bl	8008160 <xQueueGenericSend>
 800981e:	6278      	str	r0, [r7, #36]	; 0x24
 8009820:	e012      	b.n	8009848 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <xTimerGenericCommand+0x98>)
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f107 0110 	add.w	r1, r7, #16
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	f7fe fc97 	bl	8008160 <xQueueGenericSend>
 8009832:	6278      	str	r0, [r7, #36]	; 0x24
 8009834:	e008      	b.n	8009848 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009836:	4b07      	ldr	r3, [pc, #28]	; (8009854 <xTimerGenericCommand+0x98>)
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f107 0110 	add.w	r1, r7, #16
 800983e:	2300      	movs	r3, #0
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	f7fe fd8b 	bl	800835c <xQueueGenericSendFromISR>
 8009846:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800984a:	4618      	mov	r0, r3
 800984c:	3728      	adds	r7, #40	; 0x28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	2400503c 	.word	0x2400503c

08009858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009862:	4b22      	ldr	r3, [pc, #136]	; (80098ec <prvProcessExpiredTimer+0x94>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	3304      	adds	r3, #4
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe f8fb 	bl	8007a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d022      	beq.n	80098ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	18d1      	adds	r1, r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f000 f8d1 	bl	8009a38 <prvInsertTimerInActiveList>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01f      	beq.n	80098dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800989c:	2300      	movs	r3, #0
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2300      	movs	r3, #0
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	2100      	movs	r1, #0
 80098a6:	6978      	ldr	r0, [r7, #20]
 80098a8:	f7ff ff88 	bl	80097bc <xTimerGenericCommand>
 80098ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d113      	bne.n	80098dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60fb      	str	r3, [r7, #12]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	f023 0301 	bic.w	r3, r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	6978      	ldr	r0, [r7, #20]
 80098e2:	4798      	blx	r3
}
 80098e4:	bf00      	nop
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	24005034 	.word	0x24005034

080098f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f857 	bl	80099b0 <prvGetNextExpireTime>
 8009902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4619      	mov	r1, r3
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 f803 	bl	8009914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800990e:	f000 f8d5 	bl	8009abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009912:	e7f1      	b.n	80098f8 <prvTimerTask+0x8>

08009914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800991e:	f7ff fa43 	bl	8008da8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f866 	bl	80099f8 <prvSampleTimeNow>
 800992c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d130      	bne.n	8009996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <prvProcessTimerOrBlockTask+0x3c>
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	429a      	cmp	r2, r3
 8009940:	d806      	bhi.n	8009950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009942:	f7ff fa3f 	bl	8008dc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff ff85 	bl	8009858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800994e:	e024      	b.n	800999a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009956:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <prvProcessTimerOrBlockTask+0x90>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <prvProcessTimerOrBlockTask+0x50>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <prvProcessTimerOrBlockTask+0x52>
 8009964:	2300      	movs	r3, #0
 8009966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009968:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <prvProcessTimerOrBlockTask+0x94>)
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	4619      	mov	r1, r3
 8009976:	f7fe ffa7 	bl	80088c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800997a:	f7ff fa23 	bl	8008dc4 <xTaskResumeAll>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <prvProcessTimerOrBlockTask+0x98>)
 8009986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	f3bf 8f6f 	isb	sy
}
 8009994:	e001      	b.n	800999a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009996:	f7ff fa15 	bl	8008dc4 <xTaskResumeAll>
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	24005038 	.word	0x24005038
 80099a8:	2400503c 	.word	0x2400503c
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <prvGetNextExpireTime+0x44>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <prvGetNextExpireTime+0x16>
 80099c2:	2201      	movs	r2, #1
 80099c4:	e000      	b.n	80099c8 <prvGetNextExpireTime+0x18>
 80099c6:	2200      	movs	r2, #0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099d4:	4b07      	ldr	r3, [pc, #28]	; (80099f4 <prvGetNextExpireTime+0x44>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	e001      	b.n	80099e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	24005034 	.word	0x24005034

080099f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a00:	f7ff fa7e 	bl	8008f00 <xTaskGetTickCount>
 8009a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a06:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <prvSampleTimeNow+0x3c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d205      	bcs.n	8009a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a10:	f000 f936 	bl	8009c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e002      	b.n	8009a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a22:	4a04      	ldr	r2, [pc, #16]	; (8009a34 <prvSampleTimeNow+0x3c>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	24005044 	.word	0x24005044

08009a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d812      	bhi.n	8009a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	1ad2      	subs	r2, r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e01b      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <prvInsertTimerInActiveList+0x7c>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fd ffbc 	bl	80079fa <vListInsert>
 8009a82:	e012      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d206      	bcs.n	8009a9a <prvInsertTimerInActiveList+0x62>
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d302      	bcc.n	8009a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e007      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <prvInsertTimerInActiveList+0x80>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fd ffa8 	bl	80079fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aaa:	697b      	ldr	r3, [r7, #20]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	24005038 	.word	0x24005038
 8009ab8:	24005034 	.word	0x24005034

08009abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08e      	sub	sp, #56	; 0x38
 8009ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ac2:	e0ca      	b.n	8009c5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da18      	bge.n	8009afc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	3304      	adds	r3, #4
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	61fb      	str	r3, [r7, #28]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af2:	6850      	ldr	r0, [r2, #4]
 8009af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af6:	6892      	ldr	r2, [r2, #8]
 8009af8:	4611      	mov	r1, r2
 8009afa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f2c0 80ab 	blt.w	8009c5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	3304      	adds	r3, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd ffa9 	bl	8007a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff ff6b 	bl	80099f8 <prvSampleTimeNow>
 8009b22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	f200 8096 	bhi.w	8009c58 <prvProcessReceivedCommands+0x19c>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <prvProcessReceivedCommands+0x78>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b5d 	.word	0x08009b5d
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009bd1 	.word	0x08009bd1
 8009b44:	08009be5 	.word	0x08009be5
 8009b48:	08009c2f 	.word	0x08009c2f
 8009b4c:	08009b5d 	.word	0x08009b5d
 8009b50:	08009b5d 	.word	0x08009b5d
 8009b54:	08009bd1 	.word	0x08009bd1
 8009b58:	08009be5 	.word	0x08009be5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	18d1      	adds	r1, r2, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7c:	f7ff ff5c 	bl	8009a38 <prvInsertTimerInActiveList>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d069      	beq.n	8009c5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d05e      	beq.n	8009c5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	441a      	add	r2, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bae:	f7ff fe05 	bl	80097bc <xTimerGenericCommand>
 8009bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d14f      	bne.n	8009c5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	61bb      	str	r3, [r7, #24]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009be2:	e03a      	b.n	8009c5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	617b      	str	r3, [r7, #20]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	18d1      	adds	r1, r2, r3
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c28:	f7ff ff06 	bl	8009a38 <prvInsertTimerInActiveList>
					break;
 8009c2c:	e015      	b.n	8009c5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c3e:	f7fd fd6d 	bl	800771c <vPortFree>
 8009c42:	e00a      	b.n	8009c5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c56:	e000      	b.n	8009c5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009c58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c5a:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <prvProcessReceivedCommands+0x1c0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	1d39      	adds	r1, r7, #4
 8009c60:	2200      	movs	r2, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fc16 	bl	8008494 <xQueueReceive>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f47f af2a 	bne.w	8009ac4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3730      	adds	r7, #48	; 0x30
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	2400503c 	.word	0x2400503c

08009c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c86:	e048      	b.n	8009d1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c88:	4b2d      	ldr	r3, [pc, #180]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c92:	4b2b      	ldr	r3, [pc, #172]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd fee3 	bl	8007a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02e      	beq.n	8009d1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d90e      	bls.n	8009cec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cda:	4b19      	ldr	r3, [pc, #100]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7fd fe88 	bl	80079fa <vListInsert>
 8009cea:	e016      	b.n	8009d1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cec:	2300      	movs	r3, #0
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff fd60 	bl	80097bc <xTimerGenericCommand>
 8009cfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1b1      	bne.n	8009c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <prvSwitchTimerLists+0xc4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a04      	ldr	r2, [pc, #16]	; (8009d40 <prvSwitchTimerLists+0xc0>)
 8009d30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d32:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <prvSwitchTimerLists+0xc4>)
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	6013      	str	r3, [r2, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	24005034 	.word	0x24005034
 8009d44:	24005038 	.word	0x24005038

08009d48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d4e:	f7fd ffe1 	bl	8007d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d52:	4b15      	ldr	r3, [pc, #84]	; (8009da8 <prvCheckForValidListAndQueue+0x60>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d120      	bne.n	8009d9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d5a:	4814      	ldr	r0, [pc, #80]	; (8009dac <prvCheckForValidListAndQueue+0x64>)
 8009d5c:	f7fd fdfc 	bl	8007958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d60:	4813      	ldr	r0, [pc, #76]	; (8009db0 <prvCheckForValidListAndQueue+0x68>)
 8009d62:	f7fd fdf9 	bl	8007958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <prvCheckForValidListAndQueue+0x6c>)
 8009d68:	4a10      	ldr	r2, [pc, #64]	; (8009dac <prvCheckForValidListAndQueue+0x64>)
 8009d6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d6c:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <prvCheckForValidListAndQueue+0x70>)
 8009d6e:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <prvCheckForValidListAndQueue+0x68>)
 8009d70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d72:	2300      	movs	r3, #0
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <prvCheckForValidListAndQueue+0x74>)
 8009d78:	4a11      	ldr	r2, [pc, #68]	; (8009dc0 <prvCheckForValidListAndQueue+0x78>)
 8009d7a:	2110      	movs	r1, #16
 8009d7c:	200a      	movs	r0, #10
 8009d7e:	f7fe f953 	bl	8008028 <xQueueGenericCreateStatic>
 8009d82:	4603      	mov	r3, r0
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <prvCheckForValidListAndQueue+0x60>)
 8009d86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <prvCheckForValidListAndQueue+0x60>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <prvCheckForValidListAndQueue+0x60>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	490b      	ldr	r1, [pc, #44]	; (8009dc4 <prvCheckForValidListAndQueue+0x7c>)
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fd6c 	bl	8008874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d9c:	f7fd ffea 	bl	8007d74 <vPortExitCritical>
}
 8009da0:	bf00      	nop
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	2400503c 	.word	0x2400503c
 8009dac:	2400500c 	.word	0x2400500c
 8009db0:	24005020 	.word	0x24005020
 8009db4:	24005034 	.word	0x24005034
 8009db8:	24005038 	.word	0x24005038
 8009dbc:	240050e8 	.word	0x240050e8
 8009dc0:	24005048 	.word	0x24005048
 8009dc4:	08009e90 	.word	0x08009e90

08009dc8 <memset>:
 8009dc8:	4402      	add	r2, r0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <__libc_init_array>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	4d0d      	ldr	r5, [pc, #52]	; (8009e10 <__libc_init_array+0x38>)
 8009ddc:	4c0d      	ldr	r4, [pc, #52]	; (8009e14 <__libc_init_array+0x3c>)
 8009dde:	1b64      	subs	r4, r4, r5
 8009de0:	10a4      	asrs	r4, r4, #2
 8009de2:	2600      	movs	r6, #0
 8009de4:	42a6      	cmp	r6, r4
 8009de6:	d109      	bne.n	8009dfc <__libc_init_array+0x24>
 8009de8:	4d0b      	ldr	r5, [pc, #44]	; (8009e18 <__libc_init_array+0x40>)
 8009dea:	4c0c      	ldr	r4, [pc, #48]	; (8009e1c <__libc_init_array+0x44>)
 8009dec:	f000 f826 	bl	8009e3c <_init>
 8009df0:	1b64      	subs	r4, r4, r5
 8009df2:	10a4      	asrs	r4, r4, #2
 8009df4:	2600      	movs	r6, #0
 8009df6:	42a6      	cmp	r6, r4
 8009df8:	d105      	bne.n	8009e06 <__libc_init_array+0x2e>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e00:	4798      	blx	r3
 8009e02:	3601      	adds	r6, #1
 8009e04:	e7ee      	b.n	8009de4 <__libc_init_array+0xc>
 8009e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0a:	4798      	blx	r3
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	e7f2      	b.n	8009df6 <__libc_init_array+0x1e>
 8009e10:	08009f20 	.word	0x08009f20
 8009e14:	08009f20 	.word	0x08009f20
 8009e18:	08009f20 	.word	0x08009f20
 8009e1c:	08009f24 	.word	0x08009f24

08009e20 <memcpy>:
 8009e20:	440a      	add	r2, r1
 8009e22:	4291      	cmp	r1, r2
 8009e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e28:	d100      	bne.n	8009e2c <memcpy+0xc>
 8009e2a:	4770      	bx	lr
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e36:	4291      	cmp	r1, r2
 8009e38:	d1f9      	bne.n	8009e2e <memcpy+0xe>
 8009e3a:	bd10      	pop	{r4, pc}

08009e3c <_init>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr

08009e48 <_fini>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr
